// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"fxsm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ['average', 'big', 'colossal', 'fat', 'giant', 'gigantic', 'great', 'huge', 'immense', 'large', 'little', 'long', 'mammoth', 'massive', 'miniature', 'petite', 'puny', 'short', 'small', 'tall', 'tiny', 'boiling', 'breezy', 'broken', 'bumpy', 'chilly', 'cold', 'cool', 'creepy', 'crooked', 'cuddly', 'curly', 'damaged', 'damp', 'dirty', 'dry', 'dusty', 'filthy', 'flaky', 'fluffy', 'wet', 'broad', 'chubby', 'crooked', 'curved', 'deep', 'flat', 'high', 'hollow', 'low', 'narrow', 'round', 'shallow', 'skinny', 'square', 'steep', 'straight', 'wide', 'ancient', 'brief', 'early', 'fast', 'late', 'long', 'modern', 'old', 'quick', 'rapid', 'short', 'slow', 'swift', 'young', 'abundant', 'empty', 'few', 'heavy', 'light', 'many', 'numerous', 'Sound', 'cooing', 'deafening', 'faint', 'harsh', 'hissing', 'hushed', 'husky', 'loud', 'melodic', 'moaning', 'mute', 'noisy', 'purring', 'quiet', 'raspy', 'resonant', 'screeching', 'shrill', 'silent', 'soft', 'squealing', 'thundering', 'voiceless', 'whispering', 'bitter', 'delicious', 'fresh', 'juicy', 'ripe', 'rotten', 'salty', 'sour', 'spicy', 'stale', 'sticky', 'strong', 'sweet', 'tasteless', 'tasty', 'thirsty', 'fluttering', 'fuzzy', 'greasy', 'grubby', 'hard', 'hot', 'icy', 'loose', 'melted', 'plastic', 'prickly', 'rainy', 'rough', 'scattered', 'shaggy', 'shaky', 'sharp', 'shivering', 'silky', 'slimy', 'slippery', 'smooth', 'soft', 'solid', 'steady', 'sticky', 'tender', 'tight', 'uneven', 'weak', 'wet', 'wooden', 'afraid', 'angry', 'annoyed', 'anxious', 'arrogant', 'ashamed', 'awful', 'bad', 'bewildered', 'bored', 'combative', 'condemned', 'confused', 'creepy', 'cruel', 'dangerous', 'defeated', 'defiant', 'depressed', 'disgusted', 'disturbed', 'eerie', 'embarrassed', 'envious', 'evil', 'fierce', 'foolish', 'frantic', 'frightened', 'grieving', 'helpless', 'homeless', 'hungry', 'hurt', 'ill', 'jealous', 'lonely', 'mysterious', 'naughty', 'nervous', 'obnoxious', 'outrageous', 'panicky', 'repulsive', 'scary', 'scornful', 'selfish', 'sore', 'tense', 'terrible', 'thoughtless', 'tired', 'troubled', 'upset', 'uptight', 'weary', 'wicked', 'worried', 'agreeable', 'amused', 'brave', 'calm', 'charming', 'cheerful', 'comfortable', 'cooperative', 'courageous', 'delightful', 'determined', 'eager', 'elated', 'enchanting', 'encouraging', 'energetic', 'enthusiastic', 'excited', 'exuberant', 'fair', 'faithful', 'fantastic', 'fine', 'friendly', 'funny', 'gentle', 'glorious', 'good', 'happy', 'healthy', 'helpful', 'hilarious', 'jolly', 'joyous', 'kind', 'lively', 'lovely', 'lucky', 'obedient', 'perfect', 'pleasant', 'proud', 'relieved', 'silly', 'smiling', 'splendid', 'successful', 'thoughtful', 'victorious', 'vivacious', 'witty', 'wonderful', 'zealous', 'zany', 'other', 'good', 'new', 'old', 'great', 'high', 'small', 'different', 'large', 'local', 'social', 'important', 'long', 'young', 'national', 'british', 'right', 'early', 'possible', 'big', 'little', 'political', 'able', 'late', 'general', 'full', 'far', 'low', 'public', 'available', 'bad', 'main', 'sure', 'clear', 'major', 'economic', 'only', 'likely', 'real', 'black', 'particular', 'international', 'special', 'difficult', 'certain', 'open', 'whole', 'white', 'free', 'short', 'easy', 'strong', 'european', 'central', 'similar', 'human', 'common', 'necessary', 'single', 'personal', 'hard', 'private', 'poor', 'financial', 'wide', 'foreign', 'simple', 'recent', 'concerned', 'american', 'various', 'close', 'fine', 'english', 'wrong', 'present', 'royal', 'natural', 'individual', 'nice', 'french', 'following', 'current', 'modern', 'labour', 'legal', 'happy', 'final', 'red', 'normal', 'serious', 'previous', 'total', 'prime', 'significant', 'industrial', 'sorry', 'dead', 'specific', 'appropriate', 'top', 'soviet', 'basic', 'military', 'original', 'successful', 'aware', 'hon', 'popular', 'heavy', 'professional', 'direct', 'dark', 'cold', 'ready', 'green', 'useful', 'effective', 'western', 'traditional', 'scottish', 'german', 'independent', 'deep', 'interesting', 'considerable', 'involved', 'physical', 'left', 'hot', 'existing', 'responsible', 'complete', 'medical', 'blue', 'extra', 'past', 'male', 'interested', 'fair', 'essential', 'beautiful', 'civil', 'primary', 'obvious', 'future', 'environmental', 'positive', 'senior', 'nuclear', 'annual', 'relevant', 'huge', 'rich', 'commercial', 'safe', 'regional', 'practical', 'official', 'separate', 'key', 'chief', 'regular', 'due', 'additional', 'active', 'powerful', 'complex', 'standard', 'impossible', 'light', 'warm', 'middle', 'fresh', 'sexual', 'front', 'domestic', 'actual', 'united', 'technical', 'ordinary', 'cheap', 'strange', 'internal', 'excellent', 'quiet', 'soft', 'potential', 'northern', 'religious', 'quick', 'very', 'famous', 'cultural', 'proper', 'broad', 'joint', 'formal', 'limited', 'conservative', 'lovely', 'usual', 'ltd', 'unable', 'rural', 'initial', 'substantial', 'christian', 'bright', 'average', 'leading', 'reasonable', 'immediate', 'suitable', 'equal', 'detailed', 'working', 'overall', 'female', 'afraid', 'democratic', 'growing', 'sufficient', 'scientific', 'eastern', 'correct', 'inc', 'irish', 'expensive', 'educational', 'mental', 'dangerous', 'critical', 'increased', 'familiar', 'unlikely', 'double', 'perfect', 'slow', 'tiny', 'dry', 'historical', 'thin', 'daily', 'southern', 'increasing', 'wild', 'alone', 'urban', 'empty', 'married', 'narrow', 'liberal', 'supposed', 'upper', 'apparent', 'tall', 'busy', 'bloody', 'prepared', 'russian', 'moral', 'careful', 'clean', 'attractive', 'japanese', 'vital', 'thick', 'alternative', 'fast', 'ancient', 'elderly', 'rare', 'external', 'capable', 'brief', 'wonderful', 'grand', 'typical', 'entire', 'grey', 'constant', 'vast', 'surprised', 'ideal', 'terrible', 'academic', 'funny', 'minor', 'pleased', 'severe', 'ill', 'corporate', 'negative', 'permanent', 'weak', 'brown', 'fundamental', 'odd', 'crucial', 'inner', 'used', 'criminal', 'contemporary', 'sharp', 'sick', 'near', 'roman', 'massive', 'unique', 'secondary', 'parliamentary', 'african', 'unknown', 'subsequent', 'angry', 'alive', 'guilty', 'lucky', 'enormous', 'well', 'communist', 'yellow', 'unusual', 'net', 'tough', 'dear', 'extensive', 'glad', 'remaining', 'agricultural', 'alright', 'healthy', 'italian', 'principal', 'tired', 'efficient', 'comfortable', 'chinese', 'relative', 'friendly', 'conventional', 'willing', 'sudden', 'proposed', 'voluntary', 'slight', 'valuable', 'dramatic', 'golden', 'temporary', 'federal', 'keen', 'flat', 'silent', 'indian', 'worried', 'pale', 'statutory', 'welsh', 'dependent', 'firm', 'wet', 'competitive', 'armed', 'radical', 'outside', 'acceptable', 'sensitive', 'living', 'pure', 'global', 'emotional', 'sad', 'secret', 'rapid', 'adequate', 'fixed', 'sweet', 'administrative', 'wooden', 'remarkable', 'comprehensive', 'surprising', 'solid', 'rough', 'mere', 'mass', 'brilliant', 'maximum', 'absolute', 'tory', 'electronic', 'visual', 'electric', 'cool', 'spanish', 'literary', 'continuing', 'supreme', 'chemical', 'genuine', 'exciting', 'written', 'stupid', 'advanced', 'extreme', 'classical', 'fit', 'favourite', 'socialist', 'widespread', 'confident', 'straight', 'catholic', 'proud', 'numerous', 'opposite', 'distinct', 'mad', 'helpful', 'given', 'disabled', 'consistent', 'anxious', 'nervous', 'awful', 'stable', 'constitutional', 'satisfied', 'conscious', 'developing', 'strategic', 'holy', 'smooth', 'dominant', 'remote', 'theoretical', 'outstanding', 'pink', 'pretty', 'clinical', 'minimum', 'honest', 'impressive', 'related', 'residential', 'extraordinary', 'plain', 'visible', 'accurate', 'distant', 'still', 'greek', 'complicated', 'musical', 'precise', 'gentle', 'broken', 'live', 'silly', 'fat', 'tight', 'monetary', 'round', 'psychological', 'violent', 'unemployed', 'inevitable', 'junior', 'sensible', 'grateful', 'pleasant', 'dirty', 'structural', 'welcome', 'deaf', 'above', 'continuous', 'blind', 'overseas', 'mean', 'entitled', 'delighted', 'loose', 'occasional', 'evident', 'desperate', 'fellow', 'universal', 'square', 'steady', 'classic', 'equivalent', 'intellectual', 'victorian', 'level', 'ultimate', 'creative', 'lost', 'medieval', 'clever', 'linguistic', 'convinced', 'judicial', 'raw', 'sophisticated', 'asleep', 'vulnerable', 'illegal', 'outer', 'revolutionary', 'bitter', 'changing', 'australian', 'native', 'imperial', 'strict', 'wise', 'informal', 'flexible', 'collective', 'frequent', 'experimental', 'spiritual', 'intense', 'rational', 'ethnic', 'generous', 'inadequate', 'prominent', 'logical', 'bare', 'historic', 'modest', 'dutch', 'acute', 'electrical', 'valid', 'weekly', 'gross', 'automatic', 'loud', 'reliable', 'mutual', 'liable', 'multiple', 'ruling', 'curious', 'arab', 'sole', 'jewish', 'managing', 'pregnant', 'latin', 'nearby', 'exact', 'underlying', 'identical', 'satisfactory', 'marginal', 'distinctive', 'electoral', 'urgent', 'presidential', 'controversial', 'oral', 'everyday', 'encouraging', 'organic', 'continued', 'expected', 'statistical', 'desirable', 'innocent', 'improved', 'exclusive', 'marked', 'experienced', 'unexpected', 'superb', 'sheer', 'disappointed', 'frightened', 'gastric', 'capitalist', 'romantic', 'naked', 'reluctant', 'magnificent', 'convenient', 'established', 'closed', 'uncertain', 'artificial', 'diplomatic', 'tremendous', 'marine', 'mechanical', 'retail', 'institutional', 'mixed', 'required', 'biological', 'known', 'functional', 'straightforward', 'superior', 'digital', 'spectacular', 'unhappy', 'confused', 'unfair', 'aggressive', 'spare', 'painful', 'abstract', 'asian', 'associated', 'legislative', 'monthly', 'intelligent', 'hungry', 'explicit', 'nasty', 'just', 'faint', 'coloured', 'ridiculous', 'amazing', 'comparable', 'successive', 'realistic', 'back', 'decent', 'unnecessary', 'flying', 'random', 'influential', 'dull', 'genetic', 'neat', 'marvellous', 'crazy', 'damp', 'giant', 'secure', 'bottom', 'skilled', 'subtle', 'elegant', 'brave', 'lesser', 'parallel', 'steep', 'intensive', 'casual', 'tropical', 'lonely', 'partial', 'preliminary', 'concrete', 'alleged', 'assistant', 'vertical', 'upset', 'delicate', 'mild', 'occupational', 'excessive', 'progressive', 'iraqi', 'exceptional', 'integrated', 'striking', 'continental', 'okay', 'harsh', 'combined', 'fierce', 'handsome', 'characteristic', 'chronic', 'compulsory', 'interim', 'objective', 'splendid', 'magic', 'systematic', 'obliged', 'payable', 'fun', 'horrible', 'primitive', 'fascinating', 'ideological', 'metropolitan', 'surrounding', 'estimated', 'peaceful', 'premier', 'operational', 'technological', 'kind', 'advisory', 'hostile', 'precious', 'gay', 'accessible', 'determined', 'excited', 'impressed', 'provincial', 'smart', 'endless', 'isolated', 'drunk', 'geographical', 'like', 'dynamic', 'boring', 'forthcoming', 'unfortunate', 'definite', 'super', 'notable', 'indirect', 'stiff', 'wealthy', 'awkward', 'lively', 'neutral', 'artistic', 'content', 'mature', 'colonial', 'ambitious', 'evil', 'magnetic', 'verbal', 'legitimate', 'sympathetic', 'empirical', 'head', 'shallow', 'vague', 'naval', 'depressed', 'shared', 'added', 'shocked', 'mid', 'worthwhile', 'qualified', 'missing', 'blank', 'absent', 'favourable', 'polish', 'israeli', 'developed', 'profound', 'representative', 'enthusiastic', 'dreadful', 'rigid', 'reduced', 'cruel', 'coastal', 'peculiar', 'racial', 'ugly', 'swiss', 'crude', 'extended', 'selected', 'eager', 'feminist', 'canadian', 'bold', 'relaxed', 'corresponding', 'running', 'planned', 'applicable', 'immense', 'allied', 'comparative', 'uncomfortable', 'conservation', 'productive', 'beneficial', 'bored', 'charming', 'minimal', 'mobile', 'turkish', 'orange', 'rear', 'passive', 'suspicious', 'overwhelming', 'fatal', 'resulting', 'symbolic', 'registered', 'neighbouring', 'calm', 'irrelevant', 'patient', 'compact', 'profitable', 'rival', 'loyal', 'moderate', 'distinguished', 'interior', 'noble', 'insufficient', 'eligible', 'mysterious', 'varying', 'managerial', 'molecular', 'olympic', 'linear', 'prospective', 'printed', 'parental', 'diverse', 'elaborate', 'furious', 'fiscal', 'burning', 'useless', 'semantic', 'embarrassed', 'inherent', 'philosophical', 'deliberate', 'awake', 'variable', 'promising', 'unpleasant', 'varied', 'sacred', 'selective', 'inclined', 'tender', 'hidden', 'worthy', 'intermediate', 'sound', 'protective', 'fortunate', 'slim', 'islamic', 'defensive', 'divine', 'stuck', 'driving', 'invisible', 'misleading', 'circular', 'mathematical', 'inappropriate', 'liquid', 'persistent', 'solar', 'doubtful', 'manual', 'architectural', 'intact', 'incredible', 'devoted', 'prior', 'tragic', 'respectable', 'optimistic', 'convincing', 'unacceptable', 'decisive', 'competent', 'spatial', 'respective', 'binding', 'relieved', 'nursing', 'toxic', 'select', 'redundant', 'integral', 'then', 'probable', 'amateur', 'fond', 'passing', 'specified', 'territorial', 'horizontal', 'inland', 'cognitive', 'regulatory', 'miserable', 'resident', 'polite', 'scared', 'marxist', 'gothic', 'civilian', 'instant', 'lengthy', 'adverse', 'korean', 'unconscious', 'anonymous', 'aesthetic', 'orthodox', 'static', 'unaware', 'costly', 'fantastic', 'foolish', 'fashionable', 'causal', 'compatible', 'wee', 'implicit', 'dual', 'ok', 'cheerful', 'subjective', 'forward', 'surviving', 'exotic', 'purple', 'cautious', 'visiting', 'aggregate', 'ethical', 'protestant', 'teenage', 'dying', 'disastrous', 'delicious', 'confidential', 'underground', 'thorough', 'grim', 'autonomous', 'atomic', 'frozen', 'colourful', 'injured', 'uniform', 'ashamed', 'glorious', 'wicked', 'coherent', 'rising', 'shy', 'novel', 'balanced', 'delightful', 'arbitrary', 'adjacent', 'psychiatric', 'worrying', 'weird', 'unchanged', 'rolling', 'evolutionary', 'intimate', 'sporting', 'disciplinary', 'formidable', 'lexical', 'noisy', 'gradual', 'accused', 'homeless', 'supporting', 'coming', 'renewed', 'excess', 'retired', 'rubber', 'chosen', 'outdoor', 'embarrassing', 'preferred', 'bizarre', 'appalling', 'agreed', 'imaginative', 'governing', 'accepted', 'vocational', 'palestinian', 'mighty', 'puzzled', 'worldwide', 'handicapped', 'organisational', 'sunny', 'eldest', 'eventual', 'spontaneous', 'vivid', 'rude', 'faithful', 'ministerial', 'innovative', 'controlled', 'conceptual', 'unwilling', 'civic', 'meaningful', 'disturbing', 'alive', 'brainy', 'breakable', 'busy', 'careful', 'cautious', 'clever', 'concerned', 'crazy', 'curious', 'dead', 'different', 'difficult', 'doubtful', 'easy', 'famous', 'fragile', 'helpful', 'helpless', 'important', 'impossible', 'innocent', 'inquisitive', 'modern', 'open', 'outstanding', 'poor', 'powerful', 'puzzled', 'real', 'rich', 'shy', 'sleepy', 'stupid', 'super', 'tame', 'uninterested', 'wandering', 'wild', 'wrong', 'adorable', 'alert', 'average', 'beautiful', 'blonde', 'bloody', 'blushing', 'bright', 'clean', 'clear', 'cloudy', 'colorful', 'crowded', 'cute', 'dark', 'drab', 'distinct', 'dull', 'elegant', 'fancy', 'filthy', 'glamorous', 'gleaming', 'graceful', 'grotesque', 'homely', 'light', 'misty', 'motionless', 'muddy', 'plain', 'poised', 'quaint', 'shiny', 'smoggy', 'sparkling', 'spotless', 'stormy', 'strange', 'ugly', 'unsightly', 'unusual', 'bad', 'better', 'beautiful', 'big', 'black', 'blue', 'bright', 'clumsy', 'crazy', 'dizzy', 'dull', 'fat', 'frail', 'friendly', 'funny', 'great', 'green', 'gigantic', 'gorgeous', 'grumpy', 'handsome', 'happy', 'horrible', 'itchy', 'jittery', 'jolly', 'kind', 'long', 'lazy', 'magnificent', 'magenta', 'many', 'mighty', 'mushy', 'nasty', 'new', 'nice', 'nosy', 'nutty', 'nutritious', 'odd', 'orange', 'ordinary', 'pretty', 'precious', 'prickly', 'purple', 'quaint', 'quiet', 'quick', 'quickest', 'rainy', 'rare', 'ratty', 'red', 'roasted', 'robust', 'round', 'sad', 'scary', 'scrawny', 'short', 'silly', 'stingy', 'strange', 'striped', 'spotty', 'tart', 'tall', 'tame', 'tan', 'tender', 'testy', 'tricky', 'tough', 'ugly', 'ugliest', 'vast', 'watery', 'wasteful', 'wonderful', 'yellow', 'yummy', 'zany'];
},{}],"TAQU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ['amaranth', 'amber', 'amethyst', 'apricot', 'aqua', 'aquamarine', 'azure', 'beige', 'black', 'blue', 'blush', 'bronze', 'brown', 'chocolate', 'coffee', 'copper', 'coral', 'crimson', 'cyan', 'emerald', 'fuchsia', 'gold', 'gray', 'green', 'harlequin', 'indigo', 'ivory', 'jade', 'lavender', 'lime', 'magenta', 'maroon', 'moccasin', 'olive', 'orange', 'peach', 'pink', 'plum', 'purple', 'red', 'rose', 'salmon', 'sapphire', 'scarlet', 'silver', 'tan', 'teal', 'tomato', 'turquoise', 'violet', 'white', 'yellow'];
},{}],"ch1d":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ['canidae', 'felidae', 'cat', 'cattle', 'dog', 'donkey', 'goat', 'horse', 'pig', 'rabbit', 'aardvark', 'aardwolf', 'albatross', 'alligator', 'alpaca', 'amphibian', 'anaconda', 'angelfish', 'anglerfish', 'ant', 'anteater', 'antelope', 'antlion', 'ape', 'aphid', 'armadillo', 'asp', 'baboon', 'badger', 'bandicoot', 'barnacle', 'barracuda', 'basilisk', 'bass', 'bat', 'bear', 'beaver', 'bedbug', 'bee', 'beetle', 'bird', 'bison', 'blackbird', 'boa', 'boar', 'bobcat', 'bobolink', 'bonobo', 'booby', 'bovid', 'bug', 'butterfly', 'buzzard', 'camel', 'canid', 'capybara', 'cardinal', 'caribou', 'carp', 'cat', 'catshark', 'caterpillar', 'catfish', 'cattle', 'centipede', 'cephalopod', 'chameleon', 'cheetah', 'chickadee', 'chicken', 'chimpanzee', 'chinchilla', 'chipmunk', 'clam', 'clownfish', 'cobra', 'cockroach', 'cod', 'condor', 'constrictor', 'coral', 'cougar', 'cow', 'coyote', 'crab', 'crane', 'crawdad', 'crayfish', 'cricket', 'crocodile', 'crow', 'cuckoo', 'cicada', 'damselfly', 'deer', 'dingo', 'dinosaur', 'dog', 'dolphin', 'donkey', 'dormouse', 'dove', 'dragonfly', 'dragon', 'duck', 'eagle', 'earthworm', 'earwig', 'echidna', 'eel', 'egret', 'elephant', 'elk', 'emu', 'ermine', 'falcon', 'ferret', 'finch', 'firefly', 'fish', 'flamingo', 'flea', 'fly', 'flyingfish', 'fowl', 'fox', 'frog', 'gamefowl', 'galliform', 'gazelle', 'gecko', 'gerbil', 'gibbon', 'giraffe', 'goat', 'goldfish', 'goose', 'gopher', 'gorilla', 'grasshopper', 'grouse', 'guan', 'guanaco', 'guineafowl', 'gull', 'guppy', 'haddock', 'halibut', 'hamster', 'hare', 'harrier', 'hawk', 'hedgehog', 'heron', 'herring', 'hippopotamus', 'hookworm', 'hornet', 'horse', 'hoverfly', 'hummingbird', 'hyena', 'iguana', 'impala', 'jackal', 'jaguar', 'jay', 'jellyfish', 'junglefowl', 'kangaroo', 'kingfisher', 'kite', 'kiwi', 'koala', 'koi', 'krill', 'ladybug', 'lamprey', 'landfowl', 'lark', 'leech', 'lemming', 'lemur', 'leopard', 'leopon', 'limpet', 'lion', 'lizard', 'llama', 'lobster', 'locust', 'loon', 'louse', 'lungfish', 'lynx', 'macaw', 'mackerel', 'magpie', 'mammal', 'manatee', 'mandrill', 'marlin', 'marmoset', 'marmot', 'marsupial', 'marten', 'mastodon', 'meadowlark', 'meerkat', 'mink', 'minnow', 'mite', 'mockingbird', 'mole', 'mollusk', 'mongoose', 'monkey', 'moose', 'mosquito', 'moth', 'mouse', 'mule', 'muskox', 'narwhal', 'newt', 'nightingale', 'ocelot', 'octopus', 'opossum', 'orangutan', 'orca', 'ostrich', 'otter', 'owl', 'ox', 'panda', 'panther', 'parakeet', 'parrot', 'parrotfish', 'partridge', 'peacock', 'peafowl', 'pelican', 'penguin', 'perch', 'pheasant', 'pig', 'pigeon', 'pike', 'pinniped', 'piranha', 'planarian', 'platypus', 'pony', 'porcupine', 'porpoise', 'possum', 'prawn', 'primate', 'ptarmigan', 'puffin', 'puma', 'python', 'quail', 'quelea', 'quokka', 'rabbit', 'raccoon', 'rat', 'rattlesnake', 'raven', 'reindeer', 'reptile', 'rhinoceros', 'roadrunner', 'rodent', 'rook', 'rooster', 'roundworm', 'sailfish', 'salamander', 'salmon', 'sawfish', 'scallop', 'scorpion', 'seahorse', 'shark', 'sheep', 'shrew', 'shrimp', 'silkworm', 'silverfish', 'skink', 'skunk', 'sloth', 'slug', 'smelt', 'snail', 'snake', 'snipe', 'sole', 'sparrow', 'spider', 'spoonbill', 'squid', 'squirrel', 'starfish', 'stingray', 'stoat', 'stork', 'sturgeon', 'swallow', 'swan', 'swift', 'swordfish', 'swordtail', 'tahr', 'takin', 'tapir', 'tarantula', 'tarsier', 'termite', 'tern', 'thrush', 'tick', 'tiger', 'tiglon', 'toad', 'tortoise', 'toucan', 'trout', 'tuna', 'turkey', 'turtle', 'tyrannosaurus', 'urial', 'vicuna', 'viper', 'vole', 'vulture', 'wallaby', 'walrus', 'wasp', 'warbler', 'weasel', 'whale', 'whippet', 'whitefish', 'wildcat', 'wildebeest', 'wildfowl', 'wolf', 'wolverine', 'wombat', 'woodpecker', 'worm', 'wren', 'xerinae', 'yak', 'zebra', 'alpaca', 'cat', 'cattle', 'chicken', 'dog', 'donkey', 'ferret', 'gayal', 'goldfish', 'guppy', 'horse', 'koi', 'llama', 'sheep', 'yak'];
},{}],"m78u":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var UniqueNamesGenerator = function () {
  function UniqueNamesGenerator(config) {
    var length = config.length,
        separator = config.separator,
        dictionaries = config.dictionaries,
        style = config.style;
    this.dictionaries = dictionaries;
    this.separator = separator;
    this.length = length;
    this.style = style;
  }

  UniqueNamesGenerator.prototype.generate = function () {
    var _this = this;

    if (!this.dictionaries) {
      throw new Error('Cannot find any dictionary. Please provide at least one, or leave ' + 'the "dictionary" field empty in the config object');
    }

    if (this.length <= 0) {
      throw new Error('Invalid length provided');
    }

    if (this.length > this.dictionaries.length) {
      throw new Error('The length cannot be bigger than the number of dictionaries.\n' + ("Length provided: " + this.length + ". Number of dictionaries provided: " + this.dictionaries.length));
    }

    return this.dictionaries.slice(0, this.length).reduce(function (acc, curr) {
      var rnd = Math.floor(Math.random() * curr.length);
      var word = curr[rnd] || '';

      if (_this.style === 'lowerCase') {
        word = word.toLowerCase();
      } else if (_this.style === 'capital') {
        var _a = word.split(''),
            firstLetter = _a[0],
            rest = _a.slice(1);

        word = firstLetter.toUpperCase() + rest.join('');
      } else if (_this.style === 'upperCase') {
        word = word.toUpperCase();
      }

      return acc ? "" + acc + _this.separator + word : "" + word;
    }, '');
  };

  return UniqueNamesGenerator;
}();

exports.UniqueNamesGenerator = UniqueNamesGenerator;
},{}],"oOYt":[function(require,module,exports) {
"use strict";

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var adjectives_1 = __importDefault(require("./dictionaries/adjectives"));

var colors_1 = __importDefault(require("./dictionaries/colors"));

var animals_1 = __importDefault(require("./dictionaries/animals"));

var unique_names_generator_1 = require("./unique-names-generator");

var defaultConfig = {
  separator: '_',
  length: 3,
  dictionaries: [adjectives_1.default, colors_1.default, animals_1.default]
};

exports.uniqueNamesGenerator = function (customConfig) {
  if (customConfig === void 0) {
    customConfig = {};
  }

  var config = __assign(__assign(__assign({}, defaultConfig), customConfig), {
    dictionaries: __spreadArrays(customConfig && customConfig.dictionaries || defaultConfig.dictionaries)
  });

  var ung = new unique_names_generator_1.UniqueNamesGenerator(config);
  return ung.generate();
};
},{"./dictionaries/adjectives":"fxsm","./dictionaries/colors":"TAQU","./dictionaries/animals":"ch1d","./unique-names-generator":"m78u"}],"LC55":[function(require,module,exports) {
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var adjectives_1 = __importDefault(require("./adjectives"));

exports.adjectives = adjectives_1.default;

var animals_1 = __importDefault(require("./animals"));

exports.animals = animals_1.default;

var colors_1 = __importDefault(require("./colors"));

exports.colors = colors_1.default;
},{"./adjectives":"fxsm","./animals":"ch1d","./colors":"TAQU"}],"Qz33":[function(require,module,exports) {
"use strict";

function __export(m) {
  for (var p in m) {
    if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

__export(require("./lib/index"));

__export(require("./lib/dictionaries/index"));
},{"./lib/index":"oOYt","./lib/dictionaries/index":"LC55"}],"EjGt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractSerializedData = exports.trimEachRow = exports.isVideoConvertibleIntoMp4 = exports.isWebImage = exports.setToLocalStorage = exports.getJSONFromLocalStorage = exports.detectPlatform = exports.detectBrowser = exports.template = exports._uniqBy = exports._find = exports._flatten = exports._round = exports._last = exports.randomDigitStringId = exports.capitalize = void 0;

function capitalize(str) {
  return str.substr(0, 1).toUpperCase() + str.substr(1);
}

exports.capitalize = capitalize;

function randomDigitStringId(idLength) {
  return (Array(idLength).join('0') + Math.random()).slice(-idLength);
}

exports.randomDigitStringId = randomDigitStringId; // Lodash-like _.last

function _last(arr) {
  return arr[arr.length - 1];
}

exports._last = _last; // Lodash-like _.round

function _round(num) {
  return +num.toFixed(2);
}

exports._round = _round; // Lodash-like _.flatten

function _flatten(arr) {
  var flattenedArray = [];

  for (var i = 0; i < arr.length; i++) {
    var item = arr[i];

    if (item instanceof Array) {
      flattenedArray = flattenedArray.concat(item);
    } else {
      flattenedArray.push(item);
    }
  }

  return flattenedArray;
}

exports._flatten = _flatten; // Lodash-like _.find

function _find(arr, validation) {
  var isValidItem = typeof validation === 'function' ? validation : function (item) {
    for (var key in validation) {
      if (validation[key] !== item[key]) {
        return false;
      }
    }

    return true;
  };

  for (var i = 0; i < arr.length; i++) {
    var item = arr[i];

    if (isValidItem(item)) {
      return item;
    }
  }
}

exports._find = _find; // Lodash-like _.uniqBy

function _uniqBy(arr, propFunction) {
  var uniqueItemsTable = {};
  var getPropValue = typeof propFunction === 'string' ? function (item) {
    return item[propFunction];
  } : propFunction;
  return arr.filter(function (item) {
    var propValue = getPropValue(item);

    if (!uniqueItemsTable[propValue]) {
      uniqueItemsTable[propValue] = true;
      return true;
    }

    return false;
  });
}

exports._uniqBy = _uniqBy; // Simple template engine. Example: template('Hello {{a}} {{b}}', { a: 'foo', bar: 'b' })

function template(str, dict) {
  return (str || '').toString().replace(/{{\s*([a-z0-9]+)\s*}}/ig, function (match, key) {
    return dict[key] || '';
  });
}

exports.template = template;

function detectBrowser() {
  var userAgentKeywords = {
    'Opera': 'opera',
    'Chrome': 'chrome',
    'Safari': 'safari',
    'Firefox': 'firefox',
    'MSIE': 'ie'
  };

  for (var keyword in userAgentKeywords) {
    if (navigator.userAgent.indexOf(keyword) > -1) {
      return userAgentKeywords[keyword];
    }
  }

  return null;
}

exports.detectBrowser = detectBrowser;

function detectPlatform() {
  return {
    isWindows: navigator.platform.indexOf('Win') > -1,
    isMac: navigator.platform.indexOf('Mac') > -1
  };
}

exports.detectPlatform = detectPlatform;

function getJSONFromLocalStorage(key) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var value = defaultValue;

  try {
    value = JSON.parse(localStorage.getItem(key));

    if (value === null) {
      value = defaultValue;
    }
  } catch (e) {}

  return value;
}

exports.getJSONFromLocalStorage = getJSONFromLocalStorage;

function setToLocalStorage(key, data) {
  localStorage.setItem(key, JSON.stringify(data));
}

exports.setToLocalStorage = setToLocalStorage;

function isWebImage(mimeType) {
  return ['image/jpg', 'image/jpeg', 'image/png', 'image/gif'].includes(mimeType.toLowerCase());
}

exports.isWebImage = isWebImage;

function isVideoConvertibleIntoMp4(mimeType) {
  var supportedTypes = ['video/mp4', 'video/x-msvideo', 'video/vnd.avi', 'video/avi', 'video/msvideo', 'video/quicktime', 'video/x-ms-wmv', 'video/x-ms-asf', 'video/webm', 'video/x-matroska', 'video/x-flv', 'video/dvd', 'video/mpeg', 'video/x-ms-vo', 'video/ogg', 'video/mp2t', 'video/x-m4v'];
  return supportedTypes.includes(mimeType.toLowerCase().trim());
}

exports.isVideoConvertibleIntoMp4 = isVideoConvertibleIntoMp4;

function trimEachRow(text) {
  return text.split(/\n/).map(function (row) {
    return row.trim();
  }).join('\n');
}

exports.trimEachRow = trimEachRow;

function extractSerializedData(data, defaultValues) {
  var serializedData = {};

  for (var key in defaultValues) {
    serializedData[key] = (data === null || data === void 0 ? void 0 : data[key]) || defaultValues[key];
  }

  return serializedData;
}

exports.extractSerializedData = extractSerializedData;
},{}],"fvSB":[function(require,module,exports) {
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getErrorMessageFromResponse = exports.parseGraphQLMethodFromQuery = exports.insertGraphQlFragments = exports.gql = exports.simplifyGraphQLJSON = exports.GraphQLClient = void 0;

var GraphQLClient =
/*#__PURE__*/
function () {
  function GraphQLClient() {
    var _this = this;

    _classCallCheck(this, GraphQLClient);

    this.headers = {
      'Accept': 'application/json'
    };

    this.initialize = function (_ref) {
      var url = _ref.url,
          token = _ref.token;
      _this.url = url;
      _this.token = token;

      if (_this.token) {
        _this.headers.Authorization = "Bearer ".concat(_this.token);
      }
    };
  }

  _createClass(GraphQLClient, [{
    key: "query",
    value: function query(_query, variables, binaryFiles) {
      var headers;
      var body;
      variables = variables || {};

      if (binaryFiles) {
        body = this.makeFormData(_query, variables, binaryFiles);
        headers = this.headers;
      } else {
        body = JSON.stringify({
          query: _query,
          variables: variables
        });
        headers = Object.assign(Object.assign({}, this.headers), {
          'Content-Type': 'application/json'
        });
      }

      return fetch(this.url, {
        method: 'POST',
        headers: headers,
        body: body
      }).then(function (response) {
        return response.json();
      }).then(function (response) {
        if (response.errors || !response.data) {
          throw response;
        } else {
          return response.data;
        }
      });
    }
  }, {
    key: "makeFormData",
    value: function makeFormData(query, variables, binaryFiles) {
      var formData = new FormData();
      formData.append('query', query);
      formData.append('variables', JSON.stringify(variables));

      for (var fileName in binaryFiles) {
        formData.append(fileName, binaryFiles[fileName]);
      }

      return formData;
    }
  }]);

  return GraphQLClient;
}();

exports.GraphQLClient = GraphQLClient;

function simplifyGraphQLJSON(graphQLJSON) {
  var _a;

  if (!((_a = graphQLJSON === null || graphQLJSON === void 0 ? void 0 : graphQLJSON.edges) === null || _a === void 0 ? void 0 : _a.length)) {
    return [];
  }

  return graphQLJSON.edges.map(function (data) {
    return Object.assign(Object.assign({}, data.node), {
      cursor: data.cursor
    });
  });
}

exports.simplifyGraphQLJSON = simplifyGraphQLJSON;
/**
 * When used like this:
 *  @example gql`some string`
 * it simply returns its argument i.e. "some string"
 *
 * It's only designed to trigger WebStorm Plugin "JS GraphQL" highlight strings as graphql queries
 */

function gql(queryParts) {
  var str = '';

  for (var i = 0; i < queryParts.length; i++) {
    str += queryParts[i] + ((i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1]) || '');
  }

  return str;
}

exports.gql = gql;

function insertGraphQlFragments(query) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fragmentsString = '';

  for (var name in fragments) {
    fragmentsString += fragments[name];
  }

  return query + fragmentsString;
}

exports.insertGraphQlFragments = insertGraphQlFragments;

function parseGraphQLMethodFromQuery(query) {
  try {
    return query.trim().replace(/(\([^\)]*\))/ig, '').replace(/([a-z]+)?\s*/i, '').replace(/^\{\s*|\s*\}$/ig, '').split(/\s*\{/)[0];
  } catch (e) {
    return '';
  }
}

exports.parseGraphQLMethodFromQuery = parseGraphQLMethodFromQuery;

function getErrorMessageFromResponse(response) {
  var errorMessage = 'Unknown error';

  if (response) {
    if (response.errors && response.errors.length) {
      errorMessage = response.errors.map(function (error) {
        var message = '\n  - ' + error.message;

        if (error.path && error.path.length) {
          message += ' in ' + error.path.join(', ');
        }

        return message;
      }).join('');
    } else if (response.message) {
      errorMessage = response.message;
    }
  }

  return errorMessage;
}

exports.getErrorMessageFromResponse = getErrorMessageFromResponse;
},{}],"sQAQ":[function(require,module,exports) {
"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  fragment fragmentFile on File {\n    id\n    url\n    name\n    bytesSize\n    height\n    width\n    contentType\n    duration\n    thumbnails {\n      id\n      url\n      name\n      bytesSize\n      height\n      width\n      contentType\n      thumbType\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeFile = exports.serializeFileUrl = exports.fragmentFile = void 0;

var GraphQLClient_1 = require("../GraphQLClient");

var utilsCommon_1 = require("../../utilsCommon");

exports.fragmentFile = GraphQLClient_1.gql(_templateObject());

function serializeFileUrl(url, elixirChat) {
  var uploadsUrlPrefix = elixirChat.config.apiUrl.replace(/\/$/, '') + '/';

  if (url) {
    return /^uploads/i.test(url) ? uploadsUrlPrefix + url : url;
  } else {
    return '';
  }
}

exports.serializeFileUrl = serializeFileUrl;

function serializeFile(data, elixirChat) {
  var _a;

  var _ref = data || {},
      url = _ref.url,
      thumbnails = _ref.thumbnails;

  var fileUrl = serializeFileUrl(url, elixirChat);
  var thumbnailUrl = serializeFileUrl((_a = thumbnails === null || thumbnails === void 0 ? void 0 : thumbnails[0]) === null || _a === void 0 ? void 0 : _a.url, elixirChat);
  var firstThumbnail = {
    url: serializeFileUrl(thumbnailUrl || fileUrl, elixirChat)
  };
  return Object.assign(Object.assign({}, utilsCommon_1.extractSerializedData(data, {
    id: null,
    name: '',
    bytesSize: 0,
    height: 0,
    width: 0,
    duration: 0,
    contentType: '',
    isScreenshot: false
  })), {
    thumbnails: [firstThumbnail],
    url: serializeFileUrl(fileUrl || thumbnailUrl, elixirChat)
  });
}

exports.serializeFile = serializeFile;
},{"../GraphQLClient":"fvSB","../../utilsCommon":"EjGt"}],"lqyB":[function(require,module,exports) {
"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  fragment fragmentUser on Account {\n    __typename\n    id\n    firstName\n    lastName\n    avatar {\n      thumbnails { url }\n    }\n\n    ... on Client {\n      foreignId\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeUser = exports.fragmentUser = void 0;

var GraphQLClient_1 = require("../GraphQLClient");

var utilsCommon_1 = require("../../utilsCommon");

var serializeFile_1 = require("./serializeFile");

exports.fragmentUser = GraphQLClient_1.gql(_templateObject());

function serializeUser(data, elixirChat) {
  var clientId = (data === null || data === void 0 ? void 0 : data.foreignId) || null;
  var isOperator = (data === null || data === void 0 ? void 0 : data.__typename) !== 'Client';
  var isCurrentClient = clientId === elixirChat.client.id;
  return Object.assign(Object.assign({}, utilsCommon_1.extractSerializedData(data, {
    id: null,
    firstName: '',
    lastName: ''
  })), {
    avatar: serializeFile_1.serializeFile(data === null || data === void 0 ? void 0 : data.avatar, elixirChat),
    clientId: clientId,
    isOperator: isOperator,
    isCurrentClient: isCurrentClient
  });
}

exports.serializeUser = serializeUser;
},{"../GraphQLClient":"fvSB","../../utilsCommon":"EjGt","./serializeFile":"sQAQ"}],"vCxL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}

function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

;

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
},{}],"Pro7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogLevel = void 0;

/** Console logging verbosity for the SDK. */
var LogLevel;
exports.LogLevel = LogLevel;

(function (LogLevel) {
  /** No logs will be generated. */
  LogLevel[LogLevel["None"] = 0] = "None";
  /** Only SDK internal errors will be logged. */

  LogLevel[LogLevel["Error"] = 1] = "Error";
  /** Information useful for debugging the SDK will be logged. */

  LogLevel[LogLevel["Debug"] = 2] = "Debug";
  /** All SDK actions will be logged. */

  LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
},{}],"glSR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Severity = void 0;

/** JSDoc */
// eslint-disable-next-line import/export
var Severity;
exports.Severity = Severity;

(function (Severity) {
  /** JSDoc */
  Severity["Fatal"] = "fatal";
  /** JSDoc */

  Severity["Error"] = "error";
  /** JSDoc */

  Severity["Warning"] = "warning";
  /** JSDoc */

  Severity["Log"] = "log";
  /** JSDoc */

  Severity["Info"] = "info";
  /** JSDoc */

  Severity["Debug"] = "debug";
  /** JSDoc */

  Severity["Critical"] = "critical";
})(Severity || (exports.Severity = Severity = {})); // eslint-disable-next-line @typescript-eslint/no-namespace, import/export


(function (Severity) {
  /**
   * Converts a string-based level into a {@link Severity}.
   *
   * @param level string representation of Severity
   * @returns Severity
   */
  function fromString(level) {
    switch (level) {
      case 'debug':
        return Severity.Debug;

      case 'info':
        return Severity.Info;

      case 'warn':
      case 'warning':
        return Severity.Warning;

      case 'error':
        return Severity.Error;

      case 'fatal':
        return Severity.Fatal;

      case 'critical':
        return Severity.Critical;

      case 'log':
      default:
        return Severity.Log;
    }
  }

  Severity.fromString = fromString;
})(Severity || (exports.Severity = Severity = {}));
},{}],"PQXu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Status = void 0;

/** The status of an event. */
// eslint-disable-next-line import/export
var Status;
exports.Status = Status;

(function (Status) {
  /** The status could not be determined. */
  Status["Unknown"] = "unknown";
  /** The event was skipped due to configuration or callbacks. */

  Status["Skipped"] = "skipped";
  /** The event was sent to Sentry successfully. */

  Status["Success"] = "success";
  /** The client is currently rate limited and will try again later. */

  Status["RateLimit"] = "rate_limit";
  /** The event could not be processed. */

  Status["Invalid"] = "invalid";
  /** A server-side error ocurred during submission. */

  Status["Failed"] = "failed";
})(Status || (exports.Status = Status = {})); // eslint-disable-next-line @typescript-eslint/no-namespace, import/export


(function (Status) {
  /**
   * Converts a HTTP status code into a {@link Status}.
   *
   * @param code The HTTP response status code.
   * @returns The send status or {@link Status.Unknown}.
   */
  function fromHttpCode(code) {
    if (code >= 200 && code < 300) {
      return Status.Success;
    }

    if (code === 429) {
      return Status.RateLimit;
    }

    if (code >= 400 && code < 500) {
      return Status.Invalid;
    }

    if (code >= 500) {
      return Status.Failed;
    }

    return Status.Unknown;
  }

  Status.fromHttpCode = fromHttpCode;
})(Status || (exports.Status = Status = {}));
},{}],"vYhp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "LogLevel", {
  enumerable: true,
  get: function () {
    return _loglevel.LogLevel;
  }
});
Object.defineProperty(exports, "Severity", {
  enumerable: true,
  get: function () {
    return _severity.Severity;
  }
});
Object.defineProperty(exports, "Status", {
  enumerable: true,
  get: function () {
    return _status.Status;
  }
});

var _loglevel = require("./loglevel");

var _severity = require("./severity");

var _status = require("./status");
},{"./loglevel":"Pro7","./severity":"glSR","./status":"PQXu"}],"PHfu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forget = forget;

/**
 * Consumes the promise and logs the error when it rejects.
 * @param promise A promise to forget.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function forget(promise) {
  promise.then(null, function (e) {
    // TODO: Use a better logging mechanism
    // eslint-disable-next-line no-console
    console.error(e);
  });
}
},{}],"RzbR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setPrototypeOf = void 0;
var setPrototypeOf = Object.setPrototypeOf || ({
  __proto__: []
} instanceof Array ? setProtoOf : mixinProperties);
/**
 * setPrototypeOf polyfill using __proto__
 */
// eslint-disable-next-line @typescript-eslint/ban-types

exports.setPrototypeOf = setPrototypeOf;

function setProtoOf(obj, proto) {
  // @ts-ignore __proto__ does not exist on obj
  obj.__proto__ = proto;
  return obj;
}
/**
 * setPrototypeOf polyfill using mixin
 */
// eslint-disable-next-line @typescript-eslint/ban-types


function mixinProperties(obj, proto) {
  for (var prop in proto) {
    // eslint-disable-next-line no-prototype-builtins
    if (!obj.hasOwnProperty(prop)) {
      // @ts-ignore typescript complains about indexing so we remove
      obj[prop] = proto[prop];
    }
  }

  return obj;
}
},{}],"IhUY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SentryError = void 0;

var _tslib = require("tslib");

var _polyfill = require("./polyfill");

/** An error emitted by Sentry SDKs and related utilities. */
var SentryError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SentryError, _super);

  function SentryError(message) {
    var _newTarget = this.constructor;

    var _this = _super.call(this, message) || this;

    _this.message = message;
    _this.name = _newTarget.prototype.constructor.name;
    (0, _polyfill.setPrototypeOf)(_this, _newTarget.prototype);
    return _this;
  }

  return SentryError;
}(Error);

exports.SentryError = SentryError;
},{"tslib":"vCxL","./polyfill":"RzbR"}],"cixp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isError = isError;
exports.isErrorEvent = isErrorEvent;
exports.isDOMError = isDOMError;
exports.isDOMException = isDOMException;
exports.isString = isString;
exports.isPrimitive = isPrimitive;
exports.isPlainObject = isPlainObject;
exports.isEvent = isEvent;
exports.isElement = isElement;
exports.isRegExp = isRegExp;
exports.isThenable = isThenable;
exports.isSyntheticEvent = isSyntheticEvent;
exports.isInstanceOf = isInstanceOf;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

/**
 * Checks whether given value's type is one of a few Error or Error-like
 * {@link isError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isError(wat) {
  switch (Object.prototype.toString.call(wat)) {
    case '[object Error]':
      return true;

    case '[object Exception]':
      return true;

    case '[object DOMException]':
      return true;

    default:
      return isInstanceOf(wat, Error);
  }
}
/**
 * Checks whether given value's type is ErrorEvent
 * {@link isErrorEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isErrorEvent(wat) {
  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';
}
/**
 * Checks whether given value's type is DOMError
 * {@link isDOMError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isDOMError(wat) {
  return Object.prototype.toString.call(wat) === '[object DOMError]';
}
/**
 * Checks whether given value's type is DOMException
 * {@link isDOMException}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isDOMException(wat) {
  return Object.prototype.toString.call(wat) === '[object DOMException]';
}
/**
 * Checks whether given value's type is a string
 * {@link isString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isString(wat) {
  return Object.prototype.toString.call(wat) === '[object String]';
}
/**
 * Checks whether given value's is a primitive (undefined, null, number, boolean, string)
 * {@link isPrimitive}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isPrimitive(wat) {
  return wat === null || _typeof(wat) !== 'object' && typeof wat !== 'function';
}
/**
 * Checks whether given value's type is an object literal
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isPlainObject(wat) {
  return Object.prototype.toString.call(wat) === '[object Object]';
}
/**
 * Checks whether given value's type is an Event instance
 * {@link isEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isEvent(wat) {
  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);
}
/**
 * Checks whether given value's type is an Element instance
 * {@link isElement}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isElement(wat) {
  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);
}
/**
 * Checks whether given value's type is an regexp
 * {@link isRegExp}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isRegExp(wat) {
  return Object.prototype.toString.call(wat) === '[object RegExp]';
}
/**
 * Checks whether given value has a then function.
 * @param wat A value to be checked.
 */


function isThenable(wat) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return Boolean(wat && wat.then && typeof wat.then === 'function');
}
/**
 * Checks whether given value's type is a SyntheticEvent
 * {@link isSyntheticEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */


function isSyntheticEvent(wat) {
  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;
}
/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */


function isInstanceOf(wat, base) {
  try {
    return wat instanceof base;
  } catch (_e) {
    return false;
  }
}
},{}],"EomM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.truncate = truncate;
exports.snipLine = snipLine;
exports.safeJoin = safeJoin;
exports.isMatchingPattern = isMatchingPattern;

var _is = require("./is");

/**
 * Truncates given string to the maximum characters count
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string
 * @returns string Encoded
 */
function truncate(str, max) {
  if (max === void 0) {
    max = 0;
  }

  if (typeof str !== 'string' || max === 0) {
    return str;
  }

  return str.length <= max ? str : str.substr(0, max) + "...";
}
/**
 * This is basically just `trim_line` from
 * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string
 * @returns string Encoded
 */


function snipLine(line, colno) {
  var newLine = line;
  var ll = newLine.length;

  if (ll <= 150) {
    return newLine;
  }

  if (colno > ll) {
    // eslint-disable-next-line no-param-reassign
    colno = ll;
  }

  var start = Math.max(colno - 60, 0);

  if (start < 5) {
    start = 0;
  }

  var end = Math.min(start + 140, ll);

  if (end > ll - 5) {
    end = ll;
  }

  if (end === ll) {
    start = Math.max(end - 140, 0);
  }

  newLine = newLine.slice(start, end);

  if (start > 0) {
    newLine = "'{snip} " + newLine;
  }

  if (end < ll) {
    newLine += ' {snip}';
  }

  return newLine;
}
/**
 * Join values in array
 * @param input array of values to be joined together
 * @param delimiter string to be placed in-between values
 * @returns Joined values
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function safeJoin(input, delimiter) {
  if (!Array.isArray(input)) {
    return '';
  }

  var output = []; // eslint-disable-next-line @typescript-eslint/prefer-for-of

  for (var i = 0; i < input.length; i++) {
    var value = input[i];

    try {
      output.push(String(value));
    } catch (e) {
      output.push('[value cannot be serialized]');
    }
  }

  return output.join(delimiter);
}
/**
 * Checks if the value matches a regex or includes the string
 * @param value The string value to be checked against
 * @param pattern Either a regex or a string that must be contained in value
 */


function isMatchingPattern(value, pattern) {
  if (!(0, _is.isString)(value)) {
    return false;
  }

  if ((0, _is.isRegExp)(pattern)) {
    return pattern.test(value);
  }

  if (typeof pattern === 'string') {
    return value.indexOf(pattern) !== -1;
  }

  return false;
}
},{"./is":"cixp"}],"pBGv":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"CNBN":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dynamicRequire = dynamicRequire;
exports.isNodeEnv = isNodeEnv;
exports.getGlobalObject = getGlobalObject;
exports.uuid4 = uuid4;
exports.parseUrl = parseUrl;
exports.getEventDescription = getEventDescription;
exports.consoleSandbox = consoleSandbox;
exports.addExceptionTypeValue = addExceptionTypeValue;
exports.addExceptionMechanism = addExceptionMechanism;
exports.getLocationHref = getLocationHref;
exports.htmlTreeAsString = htmlTreeAsString;
exports.timestampWithMs = timestampWithMs;
exports.parseSemver = parseSemver;
exports.parseRetryAfterHeader = parseRetryAfterHeader;
exports.getFunctionName = getFunctionName;
exports.addContextToFrame = addContextToFrame;
exports.crossPlatformPerformance = void 0;

var _is = require("./is");

var _string = require("./string");

/**
 * Requires a module which is protected against bundler minification.
 *
 * @param request The module path to resolve
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function dynamicRequire(mod, request) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return mod.require(request);
}
/**
 * Checks whether we're in the Node.js or Browser environment
 *
 * @returns Answer to given question
 */


function isNodeEnv() {
  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
}

var fallbackGlobalObject = {};
/**
 * Safely get global scope object
 *
 * @returns Global scope object
 */

function getGlobalObject() {
  return isNodeEnv() ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : fallbackGlobalObject;
}
/**
 * UUID4 generator
 *
 * @returns string Generated UUID4.
 */


function uuid4() {
  var global = getGlobalObject();
  var crypto = global.crypto || global.msCrypto;

  if (!(crypto === void 0) && crypto.getRandomValues) {
    // Use window.crypto API if available
    var arr = new Uint16Array(8);
    crypto.getRandomValues(arr); // set 4 in byte 7
    // eslint-disable-next-line no-bitwise

    arr[3] = arr[3] & 0xfff | 0x4000; // set 2 most significant bits of byte 9 to '10'
    // eslint-disable-next-line no-bitwise

    arr[4] = arr[4] & 0x3fff | 0x8000;

    var pad = function (num) {
      var v = num.toString(16);

      while (v.length < 4) {
        v = "0" + v;
      }

      return v;
    };

    return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);
  } // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523


  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    // eslint-disable-next-line no-bitwise
    var r = Math.random() * 16 | 0; // eslint-disable-next-line no-bitwise

    var v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
}
/**
 * Parses string form of URL into an object
 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
 * // intentionally using regex and not <a/> href parsing trick because React Native and other
 * // environments where DOM might not be available
 * @returns parsed URL object
 */


function parseUrl(url) {
  if (!url) {
    return {};
  }

  var match = url.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);

  if (!match) {
    return {};
  } // coerce to undefined values to empty string so we don't get 'undefined'


  var query = match[6] || '';
  var fragment = match[8] || '';
  return {
    host: match[4],
    path: match[5],
    protocol: match[2],
    relative: match[5] + query + fragment
  };
}
/**
 * Extracts either message or type+value from an event that can be used for user-facing logs
 * @returns event's description
 */


function getEventDescription(event) {
  if (event.message) {
    return event.message;
  }

  if (event.exception && event.exception.values && event.exception.values[0]) {
    var exception = event.exception.values[0];

    if (exception.type && exception.value) {
      return exception.type + ": " + exception.value;
    }

    return exception.type || exception.value || event.event_id || '<unknown>';
  }

  return event.event_id || '<unknown>';
}
/** JSDoc */


function consoleSandbox(callback) {
  var global = getGlobalObject();
  var levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];

  if (!('console' in global)) {
    return callback();
  }

  var originalConsole = global.console;
  var wrappedLevels = {}; // Restore all wrapped console methods

  levels.forEach(function (level) {
    if (level in global.console && originalConsole[level].__sentry_original__) {
      wrappedLevels[level] = originalConsole[level];
      originalConsole[level] = originalConsole[level].__sentry_original__;
    }
  }); // Perform callback manipulations

  var result = callback(); // Revert restoration to wrapped state

  Object.keys(wrappedLevels).forEach(function (level) {
    originalConsole[level] = wrappedLevels[level];
  });
  return result;
}
/**
 * Adds exception values, type and value to an synthetic Exception.
 * @param event The event to modify.
 * @param value Value of the exception.
 * @param type Type of the exception.
 * @hidden
 */


function addExceptionTypeValue(event, value, type) {
  event.exception = event.exception || {};
  event.exception.values = event.exception.values || [];
  event.exception.values[0] = event.exception.values[0] || {};
  event.exception.values[0].value = event.exception.values[0].value || value || '';
  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';
}
/**
 * Adds exception mechanism to a given event.
 * @param event The event to modify.
 * @param mechanism Mechanism of the mechanism.
 * @hidden
 */


function addExceptionMechanism(event, mechanism) {
  if (mechanism === void 0) {
    mechanism = {};
  } // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?


  try {
    // @ts-ignore Type 'Mechanism | {}' is not assignable to type 'Mechanism | undefined'
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    event.exception.values[0].mechanism = event.exception.values[0].mechanism || {};
    Object.keys(mechanism).forEach(function (key) {
      // @ts-ignore Mechanism has no index signature
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      event.exception.values[0].mechanism[key] = mechanism[key];
    });
  } catch (_oO) {// no-empty
  }
}
/**
 * A safe form of location.href
 */


function getLocationHref() {
  try {
    return document.location.href;
  } catch (oO) {
    return '';
  }
}
/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */


function htmlTreeAsString(elem) {
  // try/catch both:
  // - accessing event.target (see getsentry/raven-js#838, #768)
  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
  // - can throw an exception in some circumstances.
  try {
    var currentElem = elem;
    var MAX_TRAVERSE_HEIGHT = 5;
    var MAX_OUTPUT_LEN = 80;
    var out = [];
    var height = 0;
    var len = 0;
    var separator = ' > ';
    var sepLength = separator.length;
    var nextStr = void 0; // eslint-disable-next-line no-plusplus

    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
      nextStr = _htmlElementAsString(currentElem); // bail out if
      // - nextStr is the 'html' element
      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
      //   (ignore this limit if we are on the first iteration)

      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {
        break;
      }

      out.push(nextStr);
      len += nextStr.length;
      currentElem = currentElem.parentNode;
    }

    return out.reverse().join(separator);
  } catch (_oO) {
    return '<unknown>';
  }
}
/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */


function _htmlElementAsString(el) {
  var elem = el;
  var out = [];
  var className;
  var classes;
  var key;
  var attr;
  var i;

  if (!elem || !elem.tagName) {
    return '';
  }

  out.push(elem.tagName.toLowerCase());

  if (elem.id) {
    out.push("#" + elem.id);
  } // eslint-disable-next-line prefer-const


  className = elem.className;

  if (className && (0, _is.isString)(className)) {
    classes = className.split(/\s+/);

    for (i = 0; i < classes.length; i++) {
      out.push("." + classes[i]);
    }
  }

  var allowedAttrs = ['type', 'name', 'title', 'alt'];

  for (i = 0; i < allowedAttrs.length; i++) {
    key = allowedAttrs[i];
    attr = elem.getAttribute(key);

    if (attr) {
      out.push("[" + key + "=\"" + attr + "\"]");
    }
  }

  return out.join('');
}

var INITIAL_TIME = Date.now();
var prevNow = 0;
var performanceFallback = {
  now: function () {
    var now = Date.now() - INITIAL_TIME;

    if (now < prevNow) {
      now = prevNow;
    }

    prevNow = now;
    return now;
  },
  timeOrigin: INITIAL_TIME
};

var crossPlatformPerformance = function () {
  if (isNodeEnv()) {
    try {
      var perfHooks = dynamicRequire(module, 'perf_hooks');
      return perfHooks.performance;
    } catch (_) {
      return performanceFallback;
    }
  }

  var performance = getGlobalObject().performance;

  if (!performance || !performance.now) {
    return performanceFallback;
  } // Polyfill for performance.timeOrigin.
  //
  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin
  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.


  if (performance.timeOrigin === undefined) {
    // As of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always a
    // valid fallback. In the absence of a initial time provided by the browser, fallback to INITIAL_TIME.
    // @ts-ignore ignored because timeOrigin is a readonly property but we want to override
    // eslint-disable-next-line deprecation/deprecation
    performance.timeOrigin = performance.timing && performance.timing.navigationStart || INITIAL_TIME;
  }

  return performance;
}();
/**
 * Returns a timestamp in seconds with milliseconds precision since the UNIX epoch calculated with the monotonic clock.
 */


exports.crossPlatformPerformance = crossPlatformPerformance;

function timestampWithMs() {
  return (crossPlatformPerformance.timeOrigin + crossPlatformPerformance.now()) / 1000;
} // https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string


var SEMVER_REGEXP = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
/**
 * Parses input into a SemVer interface
 * @param input string representation of a semver version
 */

function parseSemver(input) {
  var match = input.match(SEMVER_REGEXP) || [];
  var major = parseInt(match[1], 10);
  var minor = parseInt(match[2], 10);
  var patch = parseInt(match[3], 10);
  return {
    buildmetadata: match[5],
    major: isNaN(major) ? undefined : major,
    minor: isNaN(minor) ? undefined : minor,
    patch: isNaN(patch) ? undefined : patch,
    prerelease: match[4]
  };
}

var defaultRetryAfter = 60 * 1000; // 60 seconds

/**
 * Extracts Retry-After value from the request header or returns default value
 * @param now current unix timestamp
 * @param header string representation of 'Retry-After' header
 */

function parseRetryAfterHeader(now, header) {
  if (!header) {
    return defaultRetryAfter;
  }

  var headerDelay = parseInt("" + header, 10);

  if (!isNaN(headerDelay)) {
    return headerDelay * 1000;
  }

  var headerDate = Date.parse("" + header);

  if (!isNaN(headerDate)) {
    return headerDate - now;
  }

  return defaultRetryAfter;
}

var defaultFunctionName = '<anonymous>';
/**
 * Safely extract function name from itself
 */

function getFunctionName(fn) {
  try {
    if (!fn || typeof fn !== 'function') {
      return defaultFunctionName;
    }

    return fn.name || defaultFunctionName;
  } catch (e) {
    // Just accessing custom props in some Selenium environments
    // can cause a "Permission denied" exception (see raven-js#495).
    return defaultFunctionName;
  }
}
/**
 * This function adds context (pre/post/line) lines to the provided frame
 *
 * @param lines string[] containing all lines
 * @param frame StackFrame that will be mutated
 * @param linesOfContext number of context lines we want to add pre/post
 */


function addContextToFrame(lines, frame, linesOfContext) {
  if (linesOfContext === void 0) {
    linesOfContext = 5;
  }

  var lineno = frame.lineno || 0;
  var maxLines = lines.length;
  var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);
  frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function (line) {
    return (0, _string.snipLine)(line, 0);
  });
  frame.context_line = (0, _string.snipLine)(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);
  frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function (line) {
    return (0, _string.snipLine)(line, 0);
  });
}
},{"./is":"cixp","./string":"EomM","process":"pBGv"}],"ZYOL":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;

var _misc = require("./misc");

/* eslint-disable @typescript-eslint/no-explicit-any */
// TODO: Implement different loggers for different environments
var global = (0, _misc.getGlobalObject)();
/** Prefix for logging strings */

var PREFIX = 'Sentry Logger ';
/** JSDoc */

var Logger =
/** @class */
function () {
  /** JSDoc */
  function Logger() {
    this._enabled = false;
  }
  /** JSDoc */


  Logger.prototype.disable = function () {
    this._enabled = false;
  };
  /** JSDoc */


  Logger.prototype.enable = function () {
    this._enabled = true;
  };
  /** JSDoc */


  Logger.prototype.log = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (!this._enabled) {
      return;
    }

    (0, _misc.consoleSandbox)(function () {
      global.console.log(PREFIX + "[Log]: " + args.join(' '));
    });
  };
  /** JSDoc */


  Logger.prototype.warn = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (!this._enabled) {
      return;
    }

    (0, _misc.consoleSandbox)(function () {
      global.console.warn(PREFIX + "[Warn]: " + args.join(' '));
    });
  };
  /** JSDoc */


  Logger.prototype.error = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (!this._enabled) {
      return;
    }

    (0, _misc.consoleSandbox)(function () {
      global.console.error(PREFIX + "[Error]: " + args.join(' '));
    });
  };

  return Logger;
}(); // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used


global.__SENTRY__ = global.__SENTRY__ || {};
var logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());
exports.logger = logger;
},{"./misc":"CNBN"}],"dPzZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Memo = void 0;

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

/**
 * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.
 */
var Memo =
/** @class */
function () {
  function Memo() {
    this._hasWeakSet = typeof WeakSet === 'function';
    this._inner = this._hasWeakSet ? new WeakSet() : [];
  }
  /**
   * Sets obj to remember.
   * @param obj Object to remember
   */


  Memo.prototype.memoize = function (obj) {
    if (this._hasWeakSet) {
      if (this._inner.has(obj)) {
        return true;
      }

      this._inner.add(obj);

      return false;
    } // eslint-disable-next-line @typescript-eslint/prefer-for-of


    for (var i = 0; i < this._inner.length; i++) {
      var value = this._inner[i];

      if (value === obj) {
        return true;
      }
    }

    this._inner.push(obj);

    return false;
  };
  /**
   * Removes object from internal storage.
   * @param obj Object to forget
   */


  Memo.prototype.unmemoize = function (obj) {
    if (this._hasWeakSet) {
      this._inner.delete(obj);
    } else {
      for (var i = 0; i < this._inner.length; i++) {
        if (this._inner[i] === obj) {
          this._inner.splice(i, 1);

          break;
        }
      }
    }
  };

  return Memo;
}();

exports.Memo = Memo;
},{}],"f2BT":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fill = fill;
exports.urlEncode = urlEncode;
exports.normalizeToSize = normalizeToSize;
exports.walk = walk;
exports.normalize = normalize;
exports.extractExceptionKeysForMessage = extractExceptionKeysForMessage;
exports.dropUndefinedKeys = dropUndefinedKeys;

var _tslib = require("tslib");

var _is = require("./is");

var _memo = require("./memo");

var _misc = require("./misc");

var _string = require("./string");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Wrap a given object method with a higher-order function
 *
 * @param source An object that contains a method to be wrapped.
 * @param name A name of method to be wrapped.
 * @param replacement A function that should be used to wrap a given method.
 * @returns void
 */
function fill(source, name, replacement) {
  if (!(name in source)) {
    return;
  }

  var original = source[name];
  var wrapped = replacement(original); // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work
  // otherwise it'll throw "TypeError: Object.defineProperties called on non-object"

  if (typeof wrapped === 'function') {
    try {
      wrapped.prototype = wrapped.prototype || {};
      Object.defineProperties(wrapped, {
        __sentry_original__: {
          enumerable: false,
          value: original
        }
      });
    } catch (_Oo) {// This can throw if multiple fill happens on a global object like XMLHttpRequest
      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043
    }
  }

  source[name] = wrapped;
}
/**
 * Encodes given object into url-friendly format
 *
 * @param object An object that contains serializable values
 * @returns string Encoded
 */


function urlEncode(object) {
  return Object.keys(object).map(function (key) {
    return encodeURIComponent(key) + "=" + encodeURIComponent(object[key]);
  }).join('&');
}
/**
 * Transforms any object into an object literal with all it's attributes
 * attached to it.
 *
 * @param value Initial source that we have to transform in order to be usable by the serializer
 */


function getWalkSource(value) {
  if ((0, _is.isError)(value)) {
    var error = value;
    var err = {
      message: error.message,
      name: error.name,
      stack: error.stack
    };

    for (var i in error) {
      if (Object.prototype.hasOwnProperty.call(error, i)) {
        err[i] = error[i];
      }
    }

    return err;
  }

  if ((0, _is.isEvent)(value)) {
    var event_1 = value;
    var source = {};
    source.type = event_1.type; // Accessing event.target can throw (see getsentry/raven-js#838, #768)

    try {
      source.target = (0, _is.isElement)(event_1.target) ? (0, _misc.htmlTreeAsString)(event_1.target) : Object.prototype.toString.call(event_1.target);
    } catch (_oO) {
      source.target = '<unknown>';
    }

    try {
      source.currentTarget = (0, _is.isElement)(event_1.currentTarget) ? (0, _misc.htmlTreeAsString)(event_1.currentTarget) : Object.prototype.toString.call(event_1.currentTarget);
    } catch (_oO) {
      source.currentTarget = '<unknown>';
    }

    if (typeof CustomEvent !== 'undefined' && (0, _is.isInstanceOf)(value, CustomEvent)) {
      source.detail = event_1.detail;
    }

    for (var i in event_1) {
      if (Object.prototype.hasOwnProperty.call(event_1, i)) {
        source[i] = event_1;
      }
    }

    return source;
  }

  return value;
}
/** Calculates bytes size of input string */


function utf8Length(value) {
  // eslint-disable-next-line no-bitwise
  return ~-encodeURI(value).split(/%..|./).length;
}
/** Calculates bytes size of input object */


function jsonSize(value) {
  return utf8Length(JSON.stringify(value));
}
/** JSDoc */


function normalizeToSize(object, // Default Node.js REPL depth
depth, // 100kB, as 200kB is max payload size, so half sounds reasonable
maxSize) {
  if (depth === void 0) {
    depth = 3;
  }

  if (maxSize === void 0) {
    maxSize = 100 * 1024;
  }

  var serialized = normalize(object, depth);

  if (jsonSize(serialized) > maxSize) {
    return normalizeToSize(object, depth - 1, maxSize);
  }

  return serialized;
}
/** Transforms any input value into a string form, either primitive value or a type of the input */


function serializeValue(value) {
  var type = Object.prototype.toString.call(value); // Node.js REPL notation

  if (typeof value === 'string') {
    return value;
  }

  if (type === '[object Object]') {
    return '[Object]';
  }

  if (type === '[object Array]') {
    return '[Array]';
  }

  var normalized = normalizeValue(value);
  return (0, _is.isPrimitive)(normalized) ? normalized : type;
}
/**
 * normalizeValue()
 *
 * Takes unserializable input and make it serializable friendly
 *
 * - translates undefined/NaN values to "[undefined]"/"[NaN]" respectively,
 * - serializes Error objects
 * - filter global objects
 */


function normalizeValue(value, key) {
  if (key === 'domain' && value && _typeof(value) === 'object' && value._events) {
    return '[Domain]';
  }

  if (key === 'domainEmitter') {
    return '[DomainEmitter]';
  }

  if (typeof global !== 'undefined' && value === global) {
    return '[Global]';
  }

  if (typeof window !== 'undefined' && value === window) {
    return '[Window]';
  }

  if (typeof document !== 'undefined' && value === document) {
    return '[Document]';
  } // React's SyntheticEvent thingy


  if ((0, _is.isSyntheticEvent)(value)) {
    return '[SyntheticEvent]';
  }

  if (typeof value === 'number' && value !== value) {
    return '[NaN]';
  }

  if (value === void 0) {
    return '[undefined]';
  }

  if (typeof value === 'function') {
    return "[Function: " + (0, _misc.getFunctionName)(value) + "]";
  }

  return value;
}
/**
 * Walks an object to perform a normalization on it
 *
 * @param key of object that's walked in current iteration
 * @param value object to be walked
 * @param depth Optional number indicating how deep should walking be performed
 * @param memo Optional Memo class handling decycling
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


function walk(key, value, depth, memo) {
  if (depth === void 0) {
    depth = +Infinity;
  }

  if (memo === void 0) {
    memo = new _memo.Memo();
  } // If we reach the maximum depth, serialize whatever has left


  if (depth === 0) {
    return serializeValue(value);
  }
  /* eslint-disable @typescript-eslint/no-unsafe-member-access */
  // If value implements `toJSON` method, call it and return early


  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {
    return value.toJSON();
  }
  /* eslint-enable @typescript-eslint/no-unsafe-member-access */
  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further


  var normalized = normalizeValue(value, key);

  if ((0, _is.isPrimitive)(normalized)) {
    return normalized;
  } // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself


  var source = getWalkSource(value); // Create an accumulator that will act as a parent for all future itterations of that branch

  var acc = Array.isArray(value) ? [] : {}; // If we already walked that branch, bail out, as it's circular reference

  if (memo.memoize(value)) {
    return '[Circular ~]';
  } // Walk all keys of the source


  for (var innerKey in source) {
    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {
      continue;
    } // Recursively walk through all the child nodes


    acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);
  } // Once walked through all the branches, remove the parent from memo storage


  memo.unmemoize(value); // Return accumulated values

  return acc;
}
/**
 * normalize()
 *
 * - Creates a copy to prevent original input mutation
 * - Skip non-enumerablers
 * - Calls `toJSON` if implemented
 * - Removes circular references
 * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format
 * - Translates known global objects/Classes to a string representations
 * - Takes care of Error objects serialization
 * - Optionally limit depth of final output
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


function normalize(input, depth) {
  try {
    return JSON.parse(JSON.stringify(input, function (key, value) {
      return walk(key, value, depth);
    }));
  } catch (_oO) {
    return '**non-serializable**';
  }
}
/**
 * Given any captured exception, extract its keys and create a sorted
 * and truncated list that will be used inside the event message.
 * eg. `Non-error exception captured with keys: foo, bar, baz`
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


function extractExceptionKeysForMessage(exception, maxLength) {
  if (maxLength === void 0) {
    maxLength = 40;
  }

  var keys = Object.keys(getWalkSource(exception));
  keys.sort();

  if (!keys.length) {
    return '[object has no keys]';
  }

  if (keys[0].length >= maxLength) {
    return (0, _string.truncate)(keys[0], maxLength);
  }

  for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {
    var serialized = keys.slice(0, includedKeys).join(', ');

    if (serialized.length > maxLength) {
      continue;
    }

    if (includedKeys === keys.length) {
      return serialized;
    }

    return (0, _string.truncate)(serialized, maxLength);
  }

  return '';
}
/**
 * Given any object, return the new object with removed keys that value was `undefined`.
 * Works recursively on objects and arrays.
 */


function dropUndefinedKeys(val) {
  var e_1, _a;

  if ((0, _is.isPlainObject)(val)) {
    var obj = val;
    var rv = {};

    try {
      for (var _b = (0, _tslib.__values)(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var key = _c.value;

        if (typeof obj[key] !== 'undefined') {
          rv[key] = dropUndefinedKeys(obj[key]);
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    return rv;
  }

  if (Array.isArray(val)) {
    return val.map(dropUndefinedKeys);
  }

  return val;
}
},{"tslib":"vCxL","./is":"cixp","./memo":"dPzZ","./misc":"CNBN","./string":"EomM"}],"bF34":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolve = resolve;
exports.relative = relative;
exports.normalizePath = normalizePath;
exports.isAbsolute = isAbsolute;
exports.join = join;
exports.dirname = dirname;
exports.basename = basename;

// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript
// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js

/** JSDoc */
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;

  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];

    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1); // eslint-disable-next-line no-plusplus

      up++;
    } else if (up) {
      parts.splice(i, 1); // eslint-disable-next-line no-plusplus

      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (allowAboveRoot) {
    // eslint-disable-next-line no-plusplus
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
} // Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.


var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^/]+?|)(\.[^./]*|))(?:[/]*)$/;
/** JSDoc */

function splitPath(filename) {
  var parts = splitPathRe.exec(filename);
  return parts ? parts.slice(1) : [];
} // path.resolve([from ...], to)
// posix version

/** JSDoc */


function resolve() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var resolvedPath = '';
  var resolvedAbsolute = false;

  for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? args[i] : '/'; // Skip empty entries

    if (!path) {
      continue;
    }

    resolvedPath = path + "/" + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  } // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)
  // Normalize the path


  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');
  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
}
/** JSDoc */


function trim(arr) {
  var start = 0;

  for (; start < arr.length; start++) {
    if (arr[start] !== '') {
      break;
    }
  }

  var end = arr.length - 1;

  for (; end >= 0; end--) {
    if (arr[end] !== '') {
      break;
    }
  }

  if (start > end) {
    return [];
  }

  return arr.slice(start, end - start + 1);
} // path.relative(from, to)
// posix version

/** JSDoc */


function relative(from, to) {
  /* eslint-disable no-param-reassign */
  from = resolve(from).substr(1);
  to = resolve(to).substr(1);
  /* eslint-enable no-param-reassign */

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;

  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];

  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join('/');
} // path.normalize(path)
// posix version

/** JSDoc */


function normalizePath(path) {
  var isPathAbsolute = isAbsolute(path);
  var trailingSlash = path.substr(-1) === '/'; // Normalize the path

  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {
    return !!p;
  }), !isPathAbsolute).join('/');

  if (!normalizedPath && !isPathAbsolute) {
    normalizedPath = '.';
  }

  if (normalizedPath && trailingSlash) {
    normalizedPath += '/';
  }

  return (isPathAbsolute ? '/' : '') + normalizedPath;
} // posix version

/** JSDoc */


function isAbsolute(path) {
  return path.charAt(0) === '/';
} // posix version

/** JSDoc */


function join() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  return normalizePath(args.join('/'));
}
/** JSDoc */


function dirname(path) {
  var result = splitPath(path);
  var root = result[0];
  var dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
}
/** JSDoc */


function basename(path, ext) {
  var f = splitPath(path)[2];

  if (ext && f.substr(ext.length * -1) === ext) {
    f = f.substr(0, f.length - ext.length);
  }

  return f;
}
},{}],"EwT2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncPromise = void 0;

var _is = require("./is");

/* eslint-disable @typescript-eslint/explicit-function-return-type */

/* eslint-disable @typescript-eslint/typedef */

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

/* eslint-disable @typescript-eslint/no-explicit-any */

/** SyncPromise internal states */
var States;

(function (States) {
  /** Pending */
  States["PENDING"] = "PENDING";
  /** Resolved / OK */

  States["RESOLVED"] = "RESOLVED";
  /** Rejected / Error */

  States["REJECTED"] = "REJECTED";
})(States || (States = {}));
/**
 * Thenable class that behaves like a Promise and follows it's interface
 * but is not async internally
 */


var SyncPromise =
/** @class */
function () {
  function SyncPromise(executor) {
    var _this = this;

    this._state = States.PENDING;
    this._handlers = [];
    /** JSDoc */

    this._resolve = function (value) {
      _this._setResult(States.RESOLVED, value);
    };
    /** JSDoc */


    this._reject = function (reason) {
      _this._setResult(States.REJECTED, reason);
    };
    /** JSDoc */


    this._setResult = function (state, value) {
      if (_this._state !== States.PENDING) {
        return;
      }

      if ((0, _is.isThenable)(value)) {
        value.then(_this._resolve, _this._reject);
        return;
      }

      _this._state = state;
      _this._value = value;

      _this._executeHandlers();
    }; // TODO: FIXME

    /** JSDoc */


    this._attachHandler = function (handler) {
      _this._handlers = _this._handlers.concat(handler);

      _this._executeHandlers();
    };
    /** JSDoc */


    this._executeHandlers = function () {
      if (_this._state === States.PENDING) {
        return;
      }

      var cachedHandlers = _this._handlers.slice();

      _this._handlers = [];
      cachedHandlers.forEach(function (handler) {
        if (handler.done) {
          return;
        }

        if (_this._state === States.RESOLVED) {
          if (handler.onfulfilled) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            handler.onfulfilled(_this._value);
          }
        }

        if (_this._state === States.REJECTED) {
          if (handler.onrejected) {
            handler.onrejected(_this._value);
          }
        }

        handler.done = true;
      });
    };

    try {
      executor(this._resolve, this._reject);
    } catch (e) {
      this._reject(e);
    }
  }
  /** JSDoc */


  SyncPromise.resolve = function (value) {
    return new SyncPromise(function (resolve) {
      resolve(value);
    });
  };
  /** JSDoc */


  SyncPromise.reject = function (reason) {
    return new SyncPromise(function (_, reject) {
      reject(reason);
    });
  };
  /** JSDoc */


  SyncPromise.all = function (collection) {
    return new SyncPromise(function (resolve, reject) {
      if (!Array.isArray(collection)) {
        reject(new TypeError("Promise.all requires an array as input."));
        return;
      }

      if (collection.length === 0) {
        resolve([]);
        return;
      }

      var counter = collection.length;
      var resolvedCollection = [];
      collection.forEach(function (item, index) {
        SyncPromise.resolve(item).then(function (value) {
          resolvedCollection[index] = value;
          counter -= 1;

          if (counter !== 0) {
            return;
          }

          resolve(resolvedCollection);
        }).then(null, reject);
      });
    });
  };
  /** JSDoc */


  SyncPromise.prototype.then = function (onfulfilled, onrejected) {
    var _this = this;

    return new SyncPromise(function (resolve, reject) {
      _this._attachHandler({
        done: false,
        onfulfilled: function (result) {
          if (!onfulfilled) {
            // TODO: ¯\_(ツ)_/¯
            // TODO: FIXME
            resolve(result);
            return;
          }

          try {
            resolve(onfulfilled(result));
            return;
          } catch (e) {
            reject(e);
            return;
          }
        },
        onrejected: function (reason) {
          if (!onrejected) {
            reject(reason);
            return;
          }

          try {
            resolve(onrejected(reason));
            return;
          } catch (e) {
            reject(e);
            return;
          }
        }
      });
    });
  };
  /** JSDoc */


  SyncPromise.prototype.catch = function (onrejected) {
    return this.then(function (val) {
      return val;
    }, onrejected);
  };
  /** JSDoc */


  SyncPromise.prototype.finally = function (onfinally) {
    var _this = this;

    return new SyncPromise(function (resolve, reject) {
      var val;
      var isRejected;
      return _this.then(function (value) {
        isRejected = false;
        val = value;

        if (onfinally) {
          onfinally();
        }
      }, function (reason) {
        isRejected = true;
        val = reason;

        if (onfinally) {
          onfinally();
        }
      }).then(function () {
        if (isRejected) {
          reject(val);
          return;
        }

        resolve(val);
      });
    });
  };
  /** JSDoc */


  SyncPromise.prototype.toString = function () {
    return '[object SyncPromise]';
  };

  return SyncPromise;
}();

exports.SyncPromise = SyncPromise;
},{"./is":"cixp"}],"WUuT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PromiseBuffer = void 0;

var _error = require("./error");

var _syncpromise = require("./syncpromise");

/** A simple queue that holds promises. */
var PromiseBuffer =
/** @class */
function () {
  function PromiseBuffer(_limit) {
    this._limit = _limit;
    /** Internal set of queued Promises */

    this._buffer = [];
  }
  /**
   * Says if the buffer is ready to take more requests
   */


  PromiseBuffer.prototype.isReady = function () {
    return this._limit === undefined || this.length() < this._limit;
  };
  /**
   * Add a promise to the queue.
   *
   * @param task Can be any PromiseLike<T>
   * @returns The original promise.
   */


  PromiseBuffer.prototype.add = function (task) {
    var _this = this;

    if (!this.isReady()) {
      return _syncpromise.SyncPromise.reject(new _error.SentryError('Not adding Promise due to buffer limit reached.'));
    }

    if (this._buffer.indexOf(task) === -1) {
      this._buffer.push(task);
    }

    task.then(function () {
      return _this.remove(task);
    }).then(null, function () {
      return _this.remove(task).then(null, function () {// We have to add this catch here otherwise we have an unhandledPromiseRejection
        // because it's a new Promise chain.
      });
    });
    return task;
  };
  /**
   * Remove a promise to the queue.
   *
   * @param task Can be any PromiseLike<T>
   * @returns Removed promise.
   */


  PromiseBuffer.prototype.remove = function (task) {
    var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];

    return removedTask;
  };
  /**
   * This function returns the number of unresolved promises in the queue.
   */


  PromiseBuffer.prototype.length = function () {
    return this._buffer.length;
  };
  /**
   * This will drain the whole queue, returns true if queue is empty or drained.
   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.
   *
   * @param timeout Number in ms to wait until it resolves with false.
   */


  PromiseBuffer.prototype.drain = function (timeout) {
    var _this = this;

    return new _syncpromise.SyncPromise(function (resolve) {
      var capturedSetTimeout = setTimeout(function () {
        if (timeout && timeout > 0) {
          resolve(false);
        }
      }, timeout);

      _syncpromise.SyncPromise.all(_this._buffer).then(function () {
        clearTimeout(capturedSetTimeout);
        resolve(true);
      }).then(null, function () {
        resolve(true);
      });
    });
  };

  return PromiseBuffer;
}();

exports.PromiseBuffer = PromiseBuffer;
},{"./error":"IhUY","./syncpromise":"EwT2"}],"shUJ":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.supportsErrorEvent = supportsErrorEvent;
exports.supportsDOMError = supportsDOMError;
exports.supportsDOMException = supportsDOMException;
exports.supportsFetch = supportsFetch;
exports.supportsNativeFetch = supportsNativeFetch;
exports.supportsReportingObserver = supportsReportingObserver;
exports.supportsReferrerPolicy = supportsReferrerPolicy;
exports.supportsHistory = supportsHistory;

var _logger = require("./logger");

var _misc = require("./misc");

/**
 * Tells whether current environment supports ErrorEvent objects
 * {@link supportsErrorEvent}.
 *
 * @returns Answer to the given question.
 */
function supportsErrorEvent() {
  try {
    new ErrorEvent('');
    return true;
  } catch (e) {
    return false;
  }
}
/**
 * Tells whether current environment supports DOMError objects
 * {@link supportsDOMError}.
 *
 * @returns Answer to the given question.
 */


function supportsDOMError() {
  try {
    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':
    // 1 argument required, but only 0 present.
    // @ts-ignore It really needs 1 argument, not 0.
    new DOMError('');
    return true;
  } catch (e) {
    return false;
  }
}
/**
 * Tells whether current environment supports DOMException objects
 * {@link supportsDOMException}.
 *
 * @returns Answer to the given question.
 */


function supportsDOMException() {
  try {
    new DOMException('');
    return true;
  } catch (e) {
    return false;
  }
}
/**
 * Tells whether current environment supports Fetch API
 * {@link supportsFetch}.
 *
 * @returns Answer to the given question.
 */


function supportsFetch() {
  if (!('fetch' in (0, _misc.getGlobalObject)())) {
    return false;
  }

  try {
    new Headers();
    new Request('');
    new Response();
    return true;
  } catch (e) {
    return false;
  }
}
/**
 * isNativeFetch checks if the given function is a native implementation of fetch()
 */
// eslint-disable-next-line @typescript-eslint/ban-types


function isNativeFetch(func) {
  return func && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
}
/**
 * Tells whether current environment supports Fetch API natively
 * {@link supportsNativeFetch}.
 *
 * @returns true if `window.fetch` is natively implemented, false otherwise
 */


function supportsNativeFetch() {
  if (!supportsFetch()) {
    return false;
  }

  var global = (0, _misc.getGlobalObject)(); // Fast path to avoid DOM I/O
  // eslint-disable-next-line @typescript-eslint/unbound-method

  if (isNativeFetch(global.fetch)) {
    return true;
  } // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
  // so create a "pure" iframe to see if that has native fetch


  var result = false;
  var doc = global.document; // eslint-disable-next-line deprecation/deprecation

  if (doc && typeof doc.createElement === "function") {
    try {
      var sandbox = doc.createElement('iframe');
      sandbox.hidden = true;
      doc.head.appendChild(sandbox);

      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        result = isNativeFetch(sandbox.contentWindow.fetch);
      }

      doc.head.removeChild(sandbox);
    } catch (err) {
      _logger.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);
    }
  }

  return result;
}
/**
 * Tells whether current environment supports ReportingObserver API
 * {@link supportsReportingObserver}.
 *
 * @returns Answer to the given question.
 */


function supportsReportingObserver() {
  return 'ReportingObserver' in (0, _misc.getGlobalObject)();
}
/**
 * Tells whether current environment supports Referrer Policy API
 * {@link supportsReferrerPolicy}.
 *
 * @returns Answer to the given question.
 */


function supportsReferrerPolicy() {
  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default
  // https://caniuse.com/#feat=referrer-policy
  // It doesn't. And it throw exception instead of ignoring this parameter...
  // REF: https://github.com/getsentry/raven-js/issues/1233
  if (!supportsFetch()) {
    return false;
  }

  try {
    new Request('_', {
      referrerPolicy: 'origin'
    });
    return true;
  } catch (e) {
    return false;
  }
}
/**
 * Tells whether current environment supports History API
 * {@link supportsHistory}.
 *
 * @returns Answer to the given question.
 */


function supportsHistory() {
  // NOTE: in Chrome App environment, touching history.pushState, *even inside
  //       a try/catch block*, will cause Chrome to output an error to console.error
  // borrowed from: https://github.com/angular/angular.js/pull/13945/files
  var global = (0, _misc.getGlobalObject)();
  /* eslint-disable @typescript-eslint/no-unsafe-member-access */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var chrome = global.chrome;
  var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;
  /* eslint-enable @typescript-eslint/no-unsafe-member-access */

  var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;
  return !isChromePackagedApp && hasHistoryApi;
}
},{"./logger":"ZYOL","./misc":"CNBN"}],"Sn6H":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addInstrumentationHandler = addInstrumentationHandler;

var _tslib = require("tslib");

var _is = require("./is");

var _logger = require("./logger");

var _misc = require("./misc");

var _object = require("./object");

var _supports = require("./supports");

var global = (0, _misc.getGlobalObject)();
/**
 * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.
 *  - Console API
 *  - Fetch API
 *  - XHR API
 *  - History API
 *  - DOM API (click/typing)
 *  - Error API
 *  - UnhandledRejection API
 */

var handlers = {};
var instrumented = {};
/** Instruments given API */

function instrument(type) {
  if (instrumented[type]) {
    return;
  }

  instrumented[type] = true;

  switch (type) {
    case 'console':
      instrumentConsole();
      break;

    case 'dom':
      instrumentDOM();
      break;

    case 'xhr':
      instrumentXHR();
      break;

    case 'fetch':
      instrumentFetch();
      break;

    case 'history':
      instrumentHistory();
      break;

    case 'error':
      instrumentError();
      break;

    case 'unhandledrejection':
      instrumentUnhandledRejection();
      break;

    default:
      _logger.logger.warn('unknown instrumentation type:', type);

  }
}
/**
 * Add handler that will be called when given type of instrumentation triggers.
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */


function addInstrumentationHandler(handler) {
  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {
    return;
  }

  handlers[handler.type] = handlers[handler.type] || [];
  handlers[handler.type].push(handler.callback);
  instrument(handler.type);
}
/** JSDoc */


function triggerHandlers(type, data) {
  var e_1, _a;

  if (!type || !handlers[type]) {
    return;
  }

  try {
    for (var _b = (0, _tslib.__values)(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {
      var handler = _c.value;

      try {
        handler(data);
      } catch (e) {
        _logger.logger.error("Error while triggering instrumentation handler.\nType: " + type + "\nName: " + (0, _misc.getFunctionName)(handler) + "\nError: " + e);
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_1) throw e_1.error;
    }
  }
}
/** JSDoc */


function instrumentConsole() {
  if (!('console' in global)) {
    return;
  }

  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function (level) {
    if (!(level in global.console)) {
      return;
    }

    (0, _object.fill)(global.console, level, function (originalConsoleLevel) {
      return function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        triggerHandlers('console', {
          args: args,
          level: level
        }); // this fails for some browsers. :(

        if (originalConsoleLevel) {
          Function.prototype.apply.call(originalConsoleLevel, global.console, args);
        }
      };
    });
  });
}
/** JSDoc */


function instrumentFetch() {
  if (!(0, _supports.supportsNativeFetch)()) {
    return;
  }

  (0, _object.fill)(global, 'fetch', function (originalFetch) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var commonHandlerData = {
        args: args,
        fetchData: {
          method: getFetchMethod(args),
          url: getFetchUrl(args)
        },
        startTimestamp: Date.now()
      };
      triggerHandlers('fetch', (0, _tslib.__assign)({}, commonHandlerData)); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

      return originalFetch.apply(global, args).then(function (response) {
        triggerHandlers('fetch', (0, _tslib.__assign)((0, _tslib.__assign)({}, commonHandlerData), {
          endTimestamp: Date.now(),
          response: response
        }));
        return response;
      }, function (error) {
        triggerHandlers('fetch', (0, _tslib.__assign)((0, _tslib.__assign)({}, commonHandlerData), {
          endTimestamp: Date.now(),
          error: error
        })); // NOTE: If you are a Sentry user, and you are seeing this stack frame,
        //       it means the sentry.javascript SDK caught an error invoking your application code.
        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.

        throw error;
      });
    };
  });
}
/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/** Extract `method` from fetch call arguments */


function getFetchMethod(fetchArgs) {
  if (fetchArgs === void 0) {
    fetchArgs = [];
  }

  if ('Request' in global && (0, _is.isInstanceOf)(fetchArgs[0], Request) && fetchArgs[0].method) {
    return String(fetchArgs[0].method).toUpperCase();
  }

  if (fetchArgs[1] && fetchArgs[1].method) {
    return String(fetchArgs[1].method).toUpperCase();
  }

  return 'GET';
}
/** Extract `url` from fetch call arguments */


function getFetchUrl(fetchArgs) {
  if (fetchArgs === void 0) {
    fetchArgs = [];
  }

  if (typeof fetchArgs[0] === 'string') {
    return fetchArgs[0];
  }

  if ('Request' in global && (0, _is.isInstanceOf)(fetchArgs[0], Request)) {
    return fetchArgs[0].url;
  }

  return String(fetchArgs[0]);
}
/* eslint-enable @typescript-eslint/no-unsafe-member-access */

/** JSDoc */


function instrumentXHR() {
  if (!('XMLHttpRequest' in global)) {
    return;
  }

  var xhrproto = XMLHttpRequest.prototype;
  (0, _object.fill)(xhrproto, 'open', function (originalOpen) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      } // eslint-disable-next-line @typescript-eslint/no-this-alias


      var xhr = this;
      var url = args[1];
      xhr.__sentry_xhr__ = {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        method: (0, _is.isString)(args[0]) ? args[0].toUpperCase() : args[0],
        url: args[1]
      }; // if Sentry key appears in URL, don't capture it as a request
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

      if ((0, _is.isString)(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {
        xhr.__sentry_own_request__ = true;
      }

      var onreadystatechangeHandler = function () {
        if (xhr.readyState === 4) {
          try {
            // touching statusCode in some platforms throws
            // an exception
            if (xhr.__sentry_xhr__) {
              xhr.__sentry_xhr__.status_code = xhr.status;
            }
          } catch (e) {
            /* do nothing */
          }

          triggerHandlers('xhr', {
            args: args,
            endTimestamp: Date.now(),
            startTimestamp: Date.now(),
            xhr: xhr
          });
        }
      };

      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {
        (0, _object.fill)(xhr, 'onreadystatechange', function (original) {
          return function () {
            var readyStateArgs = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              readyStateArgs[_i] = arguments[_i];
            }

            onreadystatechangeHandler();
            return original.apply(xhr, readyStateArgs);
          };
        });
      } else {
        xhr.addEventListener('readystatechange', onreadystatechangeHandler);
      }

      return originalOpen.apply(xhr, args);
    };
  });
  (0, _object.fill)(xhrproto, 'send', function (originalSend) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      triggerHandlers('xhr', {
        args: args,
        startTimestamp: Date.now(),
        xhr: this
      });
      return originalSend.apply(this, args);
    };
  });
}

var lastHref;
/** JSDoc */

function instrumentHistory() {
  if (!(0, _supports.supportsHistory)()) {
    return;
  }

  var oldOnPopState = global.onpopstate;

  global.onpopstate = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var to = global.location.href; // keep track of the current URL state, as we always receive only the updated state

    var from = lastHref;
    lastHref = to;
    triggerHandlers('history', {
      from: from,
      to: to
    });

    if (oldOnPopState) {
      return oldOnPopState.apply(this, args);
    }
  };
  /** @hidden */


  function historyReplacementFunction(originalHistoryFunction) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var url = args.length > 2 ? args[2] : undefined;

      if (url) {
        // coerce to string (this is what pushState does)
        var from = lastHref;
        var to = String(url); // keep track of the current URL state, as we always receive only the updated state

        lastHref = to;
        triggerHandlers('history', {
          from: from,
          to: to
        });
      }

      return originalHistoryFunction.apply(this, args);
    };
  }

  (0, _object.fill)(global.history, 'pushState', historyReplacementFunction);
  (0, _object.fill)(global.history, 'replaceState', historyReplacementFunction);
}
/** JSDoc */


function instrumentDOM() {
  if (!('document' in global)) {
    return;
  } // Capture breadcrumbs from any click that is unhandled / bubbled up all the way
  // to the document. Do this before we instrument addEventListener.


  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);
  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false); // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.

  ['EventTarget', 'Node'].forEach(function (target) {
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
    var proto = global[target] && global[target].prototype; // eslint-disable-next-line no-prototype-builtins

    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
      return;
    }
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */


    (0, _object.fill)(proto, 'addEventListener', function (original) {
      return function (eventName, fn, options) {
        if (fn && fn.handleEvent) {
          if (eventName === 'click') {
            (0, _object.fill)(fn, 'handleEvent', function (innerOriginal) {
              return function (event) {
                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);
                return innerOriginal.call(this, event);
              };
            });
          }

          if (eventName === 'keypress') {
            (0, _object.fill)(fn, 'handleEvent', function (innerOriginal) {
              return function (event) {
                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);
                return innerOriginal.call(this, event);
              };
            });
          }
        } else {
          if (eventName === 'click') {
            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);
          }

          if (eventName === 'keypress') {
            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);
          }
        }

        return original.call(this, eventName, fn, options);
      };
    });
    (0, _object.fill)(proto, 'removeEventListener', function (original) {
      return function (eventName, fn, options) {
        try {
          original.call(this, eventName, fn.__sentry_wrapped__, options);
        } catch (e) {// ignore, accessing __sentry_wrapped__ will throw in some Selenium environments
        }

        return original.call(this, eventName, fn, options);
      };
    });
  });
}

var debounceDuration = 1000;
var debounceTimer = 0;
var keypressTimeout;
var lastCapturedEvent;
/**
 * Wraps addEventListener to capture UI breadcrumbs
 * @param name the event name (e.g. "click")
 * @param handler function that will be triggered
 * @param debounce decides whether it should wait till another event loop
 * @returns wrapped breadcrumb events handler
 * @hidden
 */

function domEventHandler(name, handler, debounce) {
  if (debounce === void 0) {
    debounce = false;
  }

  return function (event) {
    // reset keypress timeout; e.g. triggering a 'click' after
    // a 'keypress' will reset the keypress debounce so that a new
    // set of keypresses can be recorded
    keypressTimeout = undefined; // It's possible this handler might trigger multiple times for the same
    // event (e.g. event propagation through node ancestors). Ignore if we've
    // already captured the event.

    if (!event || lastCapturedEvent === event) {
      return;
    }

    lastCapturedEvent = event;

    if (debounceTimer) {
      clearTimeout(debounceTimer);
    }

    if (debounce) {
      debounceTimer = setTimeout(function () {
        handler({
          event: event,
          name: name
        });
      });
    } else {
      handler({
        event: event,
        name: name
      });
    }
  };
}
/**
 * Wraps addEventListener to capture keypress UI events
 * @param handler function that will be triggered
 * @returns wrapped keypress events handler
 * @hidden
 */


function keypressEventHandler(handler) {
  // TODO: if somehow user switches keypress target before
  //       debounce timeout is triggered, we will only capture
  //       a single breadcrumb from the FIRST target (acceptable?)
  return function (event) {
    var target;

    try {
      target = event.target;
    } catch (e) {
      // just accessing event properties can throw an exception in some rare circumstances
      // see: https://github.com/getsentry/raven-js/issues/838
      return;
    }

    var tagName = target && target.tagName; // only consider keypress events on actual input elements
    // this will disregard keypresses targeting body (e.g. tabbing
    // through elements, hotkeys, etc)

    if (!tagName || tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable) {
      return;
    } // record first keypress in a series, but ignore subsequent
    // keypresses until debounce clears


    if (!keypressTimeout) {
      domEventHandler('input', handler)(event);
    }

    clearTimeout(keypressTimeout);
    keypressTimeout = setTimeout(function () {
      keypressTimeout = undefined;
    }, debounceDuration);
  };
}

var _oldOnErrorHandler = null;
/** JSDoc */

function instrumentError() {
  _oldOnErrorHandler = global.onerror;

  global.onerror = function (msg, url, line, column, error) {
    triggerHandlers('error', {
      column: column,
      error: error,
      line: line,
      msg: msg,
      url: url
    });

    if (_oldOnErrorHandler) {
      // eslint-disable-next-line prefer-rest-params
      return _oldOnErrorHandler.apply(this, arguments);
    }

    return false;
  };
}

var _oldOnUnhandledRejectionHandler = null;
/** JSDoc */

function instrumentUnhandledRejection() {
  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;

  global.onunhandledrejection = function (e) {
    triggerHandlers('unhandledrejection', e);

    if (_oldOnUnhandledRejectionHandler) {
      // eslint-disable-next-line prefer-rest-params
      return _oldOnUnhandledRejectionHandler.apply(this, arguments);
    }

    return true;
  };
}
},{"tslib":"vCxL","./is":"cixp","./logger":"ZYOL","./misc":"CNBN","./object":"f2BT","./supports":"shUJ"}],"au1D":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dsn = void 0;

var _tslib = require("tslib");

var _error = require("./error");

/** Regular expression used to parse a Dsn. */
var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/;
/** Error message */

var ERROR_MESSAGE = 'Invalid Dsn';
/** The Sentry Dsn, identifying a Sentry instance and project. */

var Dsn =
/** @class */
function () {
  /** Creates a new Dsn component */
  function Dsn(from) {
    if (typeof from === 'string') {
      this._fromString(from);
    } else {
      this._fromComponents(from);
    }

    this._validate();
  }
  /**
   * Renders the string representation of this Dsn.
   *
   * By default, this will render the public representation without the password
   * component. To get the deprecated private representation, set `withPassword`
   * to true.
   *
   * @param withPassword When set to true, the password will be included.
   */


  Dsn.prototype.toString = function (withPassword) {
    if (withPassword === void 0) {
      withPassword = false;
    }

    var _a = this,
        host = _a.host,
        path = _a.path,
        pass = _a.pass,
        port = _a.port,
        projectId = _a.projectId,
        protocol = _a.protocol,
        user = _a.user;

    return protocol + "://" + user + (withPassword && pass ? ":" + pass : '') + ("@" + host + (port ? ":" + port : '') + "/" + (path ? path + "/" : path) + projectId);
  };
  /** Parses a string into this Dsn. */


  Dsn.prototype._fromString = function (str) {
    var match = DSN_REGEX.exec(str);

    if (!match) {
      throw new _error.SentryError(ERROR_MESSAGE);
    }

    var _a = (0, _tslib.__read)(match.slice(1), 6),
        protocol = _a[0],
        user = _a[1],
        _b = _a[2],
        pass = _b === void 0 ? '' : _b,
        host = _a[3],
        _c = _a[4],
        port = _c === void 0 ? '' : _c,
        lastPath = _a[5];

    var path = '';
    var projectId = lastPath;
    var split = projectId.split('/');

    if (split.length > 1) {
      path = split.slice(0, -1).join('/');
      projectId = split.pop();
    }

    if (projectId) {
      var projectMatch = projectId.match(/^\d+/);

      if (projectMatch) {
        projectId = projectMatch[0];
      }
    }

    this._fromComponents({
      host: host,
      pass: pass,
      path: path,
      projectId: projectId,
      port: port,
      protocol: protocol,
      user: user
    });
  };
  /** Maps Dsn components into this instance. */


  Dsn.prototype._fromComponents = function (components) {
    this.protocol = components.protocol;
    this.user = components.user;
    this.pass = components.pass || '';
    this.host = components.host;
    this.port = components.port || '';
    this.path = components.path || '';
    this.projectId = components.projectId;
  };
  /** Validates this Dsn and throws on error. */


  Dsn.prototype._validate = function () {
    var _this = this;

    ['protocol', 'user', 'host', 'projectId'].forEach(function (component) {
      if (!_this[component]) {
        throw new _error.SentryError(ERROR_MESSAGE + ": " + component + " missing");
      }
    });

    if (!this.projectId.match(/^\d+$/)) {
      throw new _error.SentryError(ERROR_MESSAGE + ": Invalid projectId " + this.projectId);
    }

    if (this.protocol !== 'http' && this.protocol !== 'https') {
      throw new _error.SentryError(ERROR_MESSAGE + ": Invalid protocol " + this.protocol);
    }

    if (this.port && isNaN(parseInt(this.port, 10))) {
      throw new _error.SentryError(ERROR_MESSAGE + ": Invalid port " + this.port);
    }
  };

  return Dsn;
}();

exports.Dsn = Dsn;
},{"tslib":"vCxL","./error":"IhUY"}],"vnUD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _async = require("./async");

Object.keys(_async).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _async[key];
    }
  });
});

var _error = require("./error");

Object.keys(_error).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _error[key];
    }
  });
});

var _is = require("./is");

Object.keys(_is).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _is[key];
    }
  });
});

var _logger = require("./logger");

Object.keys(_logger).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _logger[key];
    }
  });
});

var _memo = require("./memo");

Object.keys(_memo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _memo[key];
    }
  });
});

var _misc = require("./misc");

Object.keys(_misc).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _misc[key];
    }
  });
});

var _object = require("./object");

Object.keys(_object).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _object[key];
    }
  });
});

var _path = require("./path");

Object.keys(_path).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _path[key];
    }
  });
});

var _promisebuffer = require("./promisebuffer");

Object.keys(_promisebuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _promisebuffer[key];
    }
  });
});

var _string = require("./string");

Object.keys(_string).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _string[key];
    }
  });
});

var _supports = require("./supports");

Object.keys(_supports).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _supports[key];
    }
  });
});

var _syncpromise = require("./syncpromise");

Object.keys(_syncpromise).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _syncpromise[key];
    }
  });
});

var _instrument = require("./instrument");

Object.keys(_instrument).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _instrument[key];
    }
  });
});

var _dsn = require("./dsn");

Object.keys(_dsn).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dsn[key];
    }
  });
});
},{"./async":"PHfu","./error":"IhUY","./is":"cixp","./logger":"ZYOL","./memo":"dPzZ","./misc":"CNBN","./object":"f2BT","./path":"bF34","./promisebuffer":"WUuT","./string":"EomM","./supports":"shUJ","./syncpromise":"EwT2","./instrument":"Sn6H","./dsn":"au1D"}],"RFfS":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addGlobalEventProcessor = addGlobalEventProcessor;
exports.Scope = void 0;

var _tslib = require("tslib");

var _utils = require("@sentry/utils");

/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */
var Scope =
/** @class */
function () {
  function Scope() {
    /** Flag if notifiying is happening. */
    this._notifyingListeners = false;
    /** Callback for client to receive scope changes. */

    this._scopeListeners = [];
    /** Callback list that will be called after {@link applyToEvent}. */

    this._eventProcessors = [];
    /** Array of breadcrumbs. */

    this._breadcrumbs = [];
    /** User */

    this._user = {};
    /** Tags */

    this._tags = {};
    /** Extra */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

    this._extra = {};
    /** Contexts */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

    this._contexts = {};
  }
  /**
   * Inherit values from the parent scope.
   * @param scope to clone.
   */


  Scope.clone = function (scope) {
    var newScope = new Scope();

    if (scope) {
      newScope._breadcrumbs = (0, _tslib.__spread)(scope._breadcrumbs);
      newScope._tags = (0, _tslib.__assign)({}, scope._tags);
      newScope._extra = (0, _tslib.__assign)({}, scope._extra);
      newScope._contexts = (0, _tslib.__assign)({}, scope._contexts);
      newScope._user = scope._user;
      newScope._level = scope._level;
      newScope._span = scope._span;
      newScope._transactionName = scope._transactionName;
      newScope._fingerprint = scope._fingerprint;
      newScope._eventProcessors = (0, _tslib.__spread)(scope._eventProcessors);
    }

    return newScope;
  };
  /**
   * Add internal on change listener. Used for sub SDKs that need to store the scope.
   * @hidden
   */


  Scope.prototype.addScopeListener = function (callback) {
    this._scopeListeners.push(callback);
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.addEventProcessor = function (callback) {
    this._eventProcessors.push(callback);

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setUser = function (user) {
    this._user = user || {};

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setTags = function (tags) {
    this._tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), tags);

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setTag = function (key, value) {
    var _a;

    this._tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), (_a = {}, _a[key] = value, _a));

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setExtras = function (extras) {
    this._extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), extras);

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setExtra = function (key, extra) {
    var _a;

    this._extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), (_a = {}, _a[key] = extra, _a));

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setFingerprint = function (fingerprint) {
    this._fingerprint = fingerprint;

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setLevel = function (level) {
    this._level = level;

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setTransactionName = function (name) {
    this._transactionName = name;

    this._notifyScopeListeners();

    return this;
  };
  /**
   * Can be removed in major version.
   * @deprecated in favor of {@link this.setTransactionName}
   */


  Scope.prototype.setTransaction = function (name) {
    return this.setTransactionName(name);
  };
  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Scope.prototype.setContext = function (key, context) {
    var _a;

    this._contexts = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._contexts), (_a = {}, _a[key] = context, _a));

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.setSpan = function (span) {
    this._span = span;

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.getSpan = function () {
    return this._span;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.getTransaction = function () {
    var span = this.getSpan();

    if (span && span.spanRecorder && span.spanRecorder.spans[0]) {
      return span.spanRecorder.spans[0];
    }

    return undefined;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.update = function (captureContext) {
    if (!captureContext) {
      return this;
    }

    if (typeof captureContext === 'function') {
      var updatedScope = captureContext(this);
      return updatedScope instanceof Scope ? updatedScope : this;
    }

    if (captureContext instanceof Scope) {
      this._tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), captureContext._tags);
      this._extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), captureContext._extra);
      this._contexts = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._contexts), captureContext._contexts);

      if (captureContext._user) {
        this._user = captureContext._user;
      }

      if (captureContext._level) {
        this._level = captureContext._level;
      }

      if (captureContext._fingerprint) {
        this._fingerprint = captureContext._fingerprint;
      }
    } else if ((0, _utils.isPlainObject)(captureContext)) {
      // eslint-disable-next-line no-param-reassign
      captureContext = captureContext;
      this._tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), captureContext.tags);
      this._extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), captureContext.extra);
      this._contexts = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._contexts), captureContext.contexts);

      if (captureContext.user) {
        this._user = captureContext.user;
      }

      if (captureContext.level) {
        this._level = captureContext.level;
      }

      if (captureContext.fingerprint) {
        this._fingerprint = captureContext.fingerprint;
      }
    }

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.clear = function () {
    this._breadcrumbs = [];
    this._tags = {};
    this._extra = {};
    this._user = {};
    this._contexts = {};
    this._level = undefined;
    this._transactionName = undefined;
    this._fingerprint = undefined;
    this._span = undefined;

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {
    var mergedBreadcrumb = (0, _tslib.__assign)({
      timestamp: (0, _utils.timestampWithMs)()
    }, breadcrumb);
    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? (0, _tslib.__spread)(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : (0, _tslib.__spread)(this._breadcrumbs, [mergedBreadcrumb]);

    this._notifyScopeListeners();

    return this;
  };
  /**
   * @inheritDoc
   */


  Scope.prototype.clearBreadcrumbs = function () {
    this._breadcrumbs = [];

    this._notifyScopeListeners();

    return this;
  };
  /**
   * Applies the current context and fingerprint to the event.
   * Note that breadcrumbs will be added by the client.
   * Also if the event has already breadcrumbs on it, we do not merge them.
   * @param event Event
   * @param hint May contain additional informartion about the original exception.
   * @hidden
   */


  Scope.prototype.applyToEvent = function (event, hint) {
    if (this._extra && Object.keys(this._extra).length) {
      event.extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._extra), event.extra);
    }

    if (this._tags && Object.keys(this._tags).length) {
      event.tags = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._tags), event.tags);
    }

    if (this._user && Object.keys(this._user).length) {
      event.user = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._user), event.user);
    }

    if (this._contexts && Object.keys(this._contexts).length) {
      event.contexts = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._contexts), event.contexts);
    }

    if (this._level) {
      event.level = this._level;
    }

    if (this._transactionName) {
      event.transaction = this._transactionName;
    } // We want to set the trace context for normal events only if there isn't already
    // a trace context on the event. There is a product feature in place where we link
    // errors with transaction and it relys on that.


    if (this._span) {
      event.contexts = (0, _tslib.__assign)({
        trace: this._span.getTraceContext()
      }, event.contexts);
    }

    this._applyFingerprint(event);

    event.breadcrumbs = (0, _tslib.__spread)(event.breadcrumbs || [], this._breadcrumbs);
    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;
    return this._notifyEventProcessors((0, _tslib.__spread)(getGlobalEventProcessors(), this._eventProcessors), event, hint);
  };
  /**
   * This will be called after {@link applyToEvent} is finished.
   */


  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {
    var _this = this;

    if (index === void 0) {
      index = 0;
    }

    return new _utils.SyncPromise(function (resolve, reject) {
      var processor = processors[index];

      if (event === null || typeof processor !== 'function') {
        resolve(event);
      } else {
        var result = processor((0, _tslib.__assign)({}, event), hint);

        if ((0, _utils.isThenable)(result)) {
          result.then(function (final) {
            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);
          }).then(null, reject);
        } else {
          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);
        }
      }
    });
  };
  /**
   * This will be called on every set call.
   */


  Scope.prototype._notifyScopeListeners = function () {
    var _this = this;

    if (!this._notifyingListeners) {
      this._notifyingListeners = true;
      setTimeout(function () {
        _this._scopeListeners.forEach(function (callback) {
          callback(_this);
        });

        _this._notifyingListeners = false;
      });
    }
  };
  /**
   * Applies fingerprint from the scope to the event if there's one,
   * uses message if there's one instead or get rid of empty fingerprint
   */


  Scope.prototype._applyFingerprint = function (event) {
    // Make sure it's an array first and we actually have something in place
    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event

    if (this._fingerprint) {
      event.fingerprint = event.fingerprint.concat(this._fingerprint);
    } // If we have no data at all, remove empty array default


    if (event.fingerprint && !event.fingerprint.length) {
      delete event.fingerprint;
    }
  };

  return Scope;
}();

exports.Scope = Scope;

/**
 * Retruns the global event processors.
 */
function getGlobalEventProcessors() {
  var global = (0, _utils.getGlobalObject)();
  global.__SENTRY__ = global.__SENTRY__ || {};
  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];
  return global.__SENTRY__.globalEventProcessors;
}
/**
 * Add a EventProcessor to be kept globally.
 * @param callback EventProcessor to add
 */


function addGlobalEventProcessor(callback) {
  getGlobalEventProcessors().push(callback);
}
},{"tslib":"vCxL","@sentry/utils":"vnUD"}],"R95U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMainCarrier = getMainCarrier;
exports.makeMain = makeMain;
exports.getCurrentHub = getCurrentHub;
exports.getHubFromCarrier = getHubFromCarrier;
exports.setHubOnCarrier = setHubOnCarrier;
exports.Hub = exports.API_VERSION = void 0;

var _tslib = require("tslib");

var _utils = require("@sentry/utils");

var _scope = require("./scope");

/**
 * API compatibility version of this hub.
 *
 * WARNING: This number should only be increased when the global interface
 * changes and new methods are introduced.
 *
 * @hidden
 */
var API_VERSION = 3;
/**
 * Default maximum number of breadcrumbs added to an event. Can be overwritten
 * with {@link Options.maxBreadcrumbs}.
 */

exports.API_VERSION = API_VERSION;
var DEFAULT_BREADCRUMBS = 100;
/**
 * Absolute maximum number of breadcrumbs added to an event. The
 * `maxBreadcrumbs` option cannot be higher than this value.
 */

var MAX_BREADCRUMBS = 100;
/**
 * @inheritDoc
 */

var Hub =
/** @class */
function () {
  /**
   * Creates a new instance of the hub, will push one {@link Layer} into the
   * internal stack on creation.
   *
   * @param client bound to the hub.
   * @param scope bound to the hub.
   * @param version number, higher number means higher priority.
   */
  function Hub(client, scope, _version) {
    if (scope === void 0) {
      scope = new _scope.Scope();
    }

    if (_version === void 0) {
      _version = API_VERSION;
    }

    this._version = _version;
    /** Is a {@link Layer}[] containing the client and scope */

    this._stack = [];

    this._stack.push({
      client: client,
      scope: scope
    });

    this.bindClient(client);
  }
  /**
   * @inheritDoc
   */


  Hub.prototype.isOlderThan = function (version) {
    return this._version < version;
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.bindClient = function (client) {
    var top = this.getStackTop();
    top.client = client;

    if (client && client.setupIntegrations) {
      client.setupIntegrations();
    }
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.pushScope = function () {
    // We want to clone the content of prev scope
    var stack = this.getStack();
    var parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;

    var scope = _scope.Scope.clone(parentScope);

    this.getStack().push({
      client: this.getClient(),
      scope: scope
    });
    return scope;
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.popScope = function () {
    return this.getStack().pop() !== undefined;
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.withScope = function (callback) {
    var scope = this.pushScope();

    try {
      callback(scope);
    } finally {
      this.popScope();
    }
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.getClient = function () {
    return this.getStackTop().client;
  };
  /** Returns the scope of the top stack. */


  Hub.prototype.getScope = function () {
    return this.getStackTop().scope;
  };
  /** Returns the scope stack for domains or the process. */


  Hub.prototype.getStack = function () {
    return this._stack;
  };
  /** Returns the topmost scope layer in the order domain > local > process. */


  Hub.prototype.getStackTop = function () {
    return this._stack[this._stack.length - 1];
  };
  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types


  Hub.prototype.captureException = function (exception, hint) {
    var eventId = this._lastEventId = (0, _utils.uuid4)();
    var finalHint = hint; // If there's no explicit hint provided, mimick the same thing that would happen
    // in the minimal itself to create a consistent behavior.
    // We don't do this in the client, as it's the lowest level API, and doing this,
    // would prevent user from having full control over direct calls.

    if (!hint) {
      var syntheticException = void 0;

      try {
        throw new Error('Sentry syntheticException');
      } catch (exception) {
        syntheticException = exception;
      }

      finalHint = {
        originalException: exception,
        syntheticException: syntheticException
      };
    }

    this._invokeClient('captureException', exception, (0, _tslib.__assign)((0, _tslib.__assign)({}, finalHint), {
      event_id: eventId
    }));

    return eventId;
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.captureMessage = function (message, level, hint) {
    var eventId = this._lastEventId = (0, _utils.uuid4)();
    var finalHint = hint; // If there's no explicit hint provided, mimick the same thing that would happen
    // in the minimal itself to create a consistent behavior.
    // We don't do this in the client, as it's the lowest level API, and doing this,
    // would prevent user from having full control over direct calls.

    if (!hint) {
      var syntheticException = void 0;

      try {
        throw new Error(message);
      } catch (exception) {
        syntheticException = exception;
      }

      finalHint = {
        originalException: message,
        syntheticException: syntheticException
      };
    }

    this._invokeClient('captureMessage', message, level, (0, _tslib.__assign)((0, _tslib.__assign)({}, finalHint), {
      event_id: eventId
    }));

    return eventId;
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.captureEvent = function (event, hint) {
    var eventId = this._lastEventId = (0, _utils.uuid4)();

    this._invokeClient('captureEvent', event, (0, _tslib.__assign)((0, _tslib.__assign)({}, hint), {
      event_id: eventId
    }));

    return eventId;
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.lastEventId = function () {
    return this._lastEventId;
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.addBreadcrumb = function (breadcrumb, hint) {
    var top = this.getStackTop();

    if (!top.scope || !top.client) {
      return;
    } // eslint-disable-next-line @typescript-eslint/unbound-method


    var _a = top.client.getOptions && top.client.getOptions() || {},
        _b = _a.beforeBreadcrumb,
        beforeBreadcrumb = _b === void 0 ? null : _b,
        _c = _a.maxBreadcrumbs,
        maxBreadcrumbs = _c === void 0 ? DEFAULT_BREADCRUMBS : _c;

    if (maxBreadcrumbs <= 0) {
      return;
    }

    var timestamp = (0, _utils.timestampWithMs)();
    var mergedBreadcrumb = (0, _tslib.__assign)({
      timestamp: timestamp
    }, breadcrumb);
    var finalBreadcrumb = beforeBreadcrumb ? (0, _utils.consoleSandbox)(function () {
      return beforeBreadcrumb(mergedBreadcrumb, hint);
    }) : mergedBreadcrumb;

    if (finalBreadcrumb === null) {
      return;
    }

    top.scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.setUser = function (user) {
    var top = this.getStackTop();

    if (!top.scope) {
      return;
    }

    top.scope.setUser(user);
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.setTags = function (tags) {
    var top = this.getStackTop();

    if (!top.scope) {
      return;
    }

    top.scope.setTags(tags);
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.setExtras = function (extras) {
    var top = this.getStackTop();

    if (!top.scope) {
      return;
    }

    top.scope.setExtras(extras);
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.setTag = function (key, value) {
    var top = this.getStackTop();

    if (!top.scope) {
      return;
    }

    top.scope.setTag(key, value);
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.setExtra = function (key, extra) {
    var top = this.getStackTop();

    if (!top.scope) {
      return;
    }

    top.scope.setExtra(key, extra);
  };
  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Hub.prototype.setContext = function (name, context) {
    var top = this.getStackTop();

    if (!top.scope) {
      return;
    }

    top.scope.setContext(name, context);
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.configureScope = function (callback) {
    var top = this.getStackTop();

    if (top.scope && top.client) {
      callback(top.scope);
    }
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.run = function (callback) {
    var oldHub = makeMain(this);

    try {
      callback(this);
    } finally {
      makeMain(oldHub);
    }
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.getIntegration = function (integration) {
    var client = this.getClient();

    if (!client) {
      return null;
    }

    try {
      return client.getIntegration(integration);
    } catch (_oO) {
      _utils.logger.warn("Cannot retrieve integration " + integration.id + " from the current Hub");

      return null;
    }
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.startSpan = function (context) {
    return this._callExtensionMethod('startSpan', context);
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.startTransaction = function (context) {
    return this._callExtensionMethod('startTransaction', context);
  };
  /**
   * @inheritDoc
   */


  Hub.prototype.traceHeaders = function () {
    return this._callExtensionMethod('traceHeaders');
  };
  /**
   * Internal helper function to call a method on the top client if it exists.
   *
   * @param method The method to call on the client.
   * @param args Arguments to pass to the client function.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Hub.prototype._invokeClient = function (method) {
    var _a;

    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    var top = this.getStackTop();

    if (top && top.client && top.client[method]) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
      (_a = top.client)[method].apply(_a, (0, _tslib.__spread)(args, [top.scope]));
    }
  };
  /**
   * Calls global extension method and binding current instance to the function call
   */
  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Hub.prototype._callExtensionMethod = function (method) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    var carrier = getMainCarrier();
    var sentry = carrier.__SENTRY__;

    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {
      return sentry.extensions[method].apply(this, args);
    }

    _utils.logger.warn("Extension method " + method + " couldn't be found, doing nothing.");
  };

  return Hub;
}();

exports.Hub = Hub;

/** Returns the global shim registry. */
function getMainCarrier() {
  var carrier = (0, _utils.getGlobalObject)();
  carrier.__SENTRY__ = carrier.__SENTRY__ || {
    extensions: {},
    hub: undefined
  };
  return carrier;
}
/**
 * Replaces the current main hub with the passed one on the global object
 *
 * @returns The old replaced hub
 */


function makeMain(hub) {
  var registry = getMainCarrier();
  var oldHub = getHubFromCarrier(registry);
  setHubOnCarrier(registry, hub);
  return oldHub;
}
/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 */


function getCurrentHub() {
  // Get main carrier (global for every environment)
  var registry = getMainCarrier(); // If there's no hub, or its an old API, assign a new one

  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {
    setHubOnCarrier(registry, new Hub());
  } // Prefer domains over global if they are there (applicable only to Node environment)


  if ((0, _utils.isNodeEnv)()) {
    return getHubFromActiveDomain(registry);
  } // Return hub that lives on a global object


  return getHubFromCarrier(registry);
}
/**
 * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist
 * @returns discovered hub
 */


function getHubFromActiveDomain(registry) {
  try {
    var property = 'domain';
    var carrier = getMainCarrier();
    var sentry = carrier.__SENTRY__;

    if (!sentry || !sentry.extensions || !sentry.extensions[property]) {
      return getHubFromCarrier(registry);
    } // eslint-disable-next-line @typescript-eslint/no-explicit-any


    var domain = sentry.extensions[property]; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

    var activeDomain = domain.active; // If there's no active domain, just return global hub

    if (!activeDomain) {
      return getHubFromCarrier(registry);
    } // If there's no hub on current domain, or it's an old API, assign a new one


    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {
      var registryHubTopStack = getHubFromCarrier(registry).getStackTop();
      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, _scope.Scope.clone(registryHubTopStack.scope)));
    } // Return hub that lives on a domain


    return getHubFromCarrier(activeDomain);
  } catch (_Oo) {
    // Return hub that lives on a global object
    return getHubFromCarrier(registry);
  }
}
/**
 * This will tell whether a carrier has a hub on it or not
 * @param carrier object
 */


function hasHubOnCarrier(carrier) {
  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {
    return true;
  }

  return false;
}
/**
 * This will create a new {@link Hub} and add to the passed object on
 * __SENTRY__.hub.
 * @param carrier object
 * @hidden
 */


function getHubFromCarrier(carrier) {
  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {
    return carrier.__SENTRY__.hub;
  }

  carrier.__SENTRY__ = carrier.__SENTRY__ || {};
  carrier.__SENTRY__.hub = new Hub();
  return carrier.__SENTRY__.hub;
}
/**
 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
 * @param carrier object
 * @param hub Hub
 */


function setHubOnCarrier(carrier, hub) {
  if (!carrier) {
    return false;
  }

  carrier.__SENTRY__ = carrier.__SENTRY__ || {};
  carrier.__SENTRY__.hub = hub;
  return true;
}
},{"tslib":"vCxL","@sentry/utils":"vnUD","./scope":"RFfS"}],"U9M5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "addGlobalEventProcessor", {
  enumerable: true,
  get: function () {
    return _scope.addGlobalEventProcessor;
  }
});
Object.defineProperty(exports, "Scope", {
  enumerable: true,
  get: function () {
    return _scope.Scope;
  }
});
Object.defineProperty(exports, "getCurrentHub", {
  enumerable: true,
  get: function () {
    return _hub.getCurrentHub;
  }
});
Object.defineProperty(exports, "getHubFromCarrier", {
  enumerable: true,
  get: function () {
    return _hub.getHubFromCarrier;
  }
});
Object.defineProperty(exports, "getMainCarrier", {
  enumerable: true,
  get: function () {
    return _hub.getMainCarrier;
  }
});
Object.defineProperty(exports, "Hub", {
  enumerable: true,
  get: function () {
    return _hub.Hub;
  }
});
Object.defineProperty(exports, "makeMain", {
  enumerable: true,
  get: function () {
    return _hub.makeMain;
  }
});
Object.defineProperty(exports, "setHubOnCarrier", {
  enumerable: true,
  get: function () {
    return _hub.setHubOnCarrier;
  }
});

var _scope = require("./scope");

var _hub = require("./hub");
},{"./scope":"RFfS","./hub":"R95U"}],"uQ1D":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.captureException = captureException;
exports.captureMessage = captureMessage;
exports.captureEvent = captureEvent;
exports.configureScope = configureScope;
exports.addBreadcrumb = addBreadcrumb;
exports.setContext = setContext;
exports.setExtras = setExtras;
exports.setTags = setTags;
exports.setExtra = setExtra;
exports.setTag = setTag;
exports.setUser = setUser;
exports.withScope = withScope;
exports._callOnClient = _callOnClient;
exports.startTransaction = startTransaction;

var _tslib = require("tslib");

var _hub = require("@sentry/hub");

/**
 * This calls a function on the current hub.
 * @param method function to call on hub.
 * @param args to pass to function.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function callOnHub(method) {
  var args = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }

  var hub = (0, _hub.getCurrentHub)();

  if (hub && hub[method]) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return hub[method].apply(hub, (0, _tslib.__spread)(args));
  }

  throw new Error("No hub defined or " + method + " was not found on the hub, please open a bug report.");
}
/**
 * Captures an exception event and sends it to Sentry.
 *
 * @param exception An exception-like object.
 * @returns The generated eventId.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types


function captureException(exception, captureContext) {
  var syntheticException;

  try {
    throw new Error('Sentry syntheticException');
  } catch (exception) {
    syntheticException = exception;
  }

  return callOnHub('captureException', exception, {
    captureContext: captureContext,
    originalException: exception,
    syntheticException: syntheticException
  });
}
/**
 * Captures a message event and sends it to Sentry.
 *
 * @param message The message to send to Sentry.
 * @param level Define the level of the message.
 * @returns The generated eventId.
 */


function captureMessage(message, captureContext) {
  var syntheticException;

  try {
    throw new Error(message);
  } catch (exception) {
    syntheticException = exception;
  } // This is necessary to provide explicit scopes upgrade, without changing the original
  // arrity of the `captureMessage(message, level)` method.


  var level = typeof captureContext === 'string' ? captureContext : undefined;
  var context = typeof captureContext !== 'string' ? {
    captureContext: captureContext
  } : undefined;
  return callOnHub('captureMessage', message, level, (0, _tslib.__assign)({
    originalException: message,
    syntheticException: syntheticException
  }, context));
}
/**
 * Captures a manually created event and sends it to Sentry.
 *
 * @param event The event to send to Sentry.
 * @returns The generated eventId.
 */


function captureEvent(event) {
  return callOnHub('captureEvent', event);
}
/**
 * Callback to set context information onto the scope.
 * @param callback Callback function that receives Scope.
 */


function configureScope(callback) {
  callOnHub('configureScope', callback);
}
/**
 * Records a new breadcrumb which will be attached to future events.
 *
 * Breadcrumbs will be added to subsequent events to provide more context on
 * user's actions prior to an error or crash.
 *
 * @param breadcrumb The breadcrumb to record.
 */


function addBreadcrumb(breadcrumb) {
  callOnHub('addBreadcrumb', breadcrumb);
}
/**
 * Sets context data with the given name.
 * @param name of the context
 * @param context Any kind of data. This data will be normalized.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function setContext(name, context) {
  callOnHub('setContext', name, context);
}
/**
 * Set an object that will be merged sent as extra data with the event.
 * @param extras Extras object to merge into current context.
 */


function setExtras(extras) {
  callOnHub('setExtras', extras);
}
/**
 * Set an object that will be merged sent as tags data with the event.
 * @param tags Tags context object to merge into current context.
 */


function setTags(tags) {
  callOnHub('setTags', tags);
}
/**
 * Set key:value that will be sent as extra data with the event.
 * @param key String of extra
 * @param extra Any kind of data. This data will be normalized.
 */


function setExtra(key, extra) {
  callOnHub('setExtra', key, extra);
}
/**
 * Set key:value that will be sent as tags data with the event.
 * @param key String key of tag
 * @param value String value of tag
 */


function setTag(key, value) {
  callOnHub('setTag', key, value);
}
/**
 * Updates user context information for future events.
 *
 * @param user User context object to be set in the current context. Pass `null` to unset the user.
 */


function setUser(user) {
  callOnHub('setUser', user);
}
/**
 * Creates a new scope with and executes the given operation within.
 * The scope is automatically removed once the operation
 * finishes or throws.
 *
 * This is essentially a convenience function for:
 *
 *     pushScope();
 *     callback();
 *     popScope();
 *
 * @param callback that will be enclosed into push/popScope.
 */


function withScope(callback) {
  callOnHub('withScope', callback);
}
/**
 * Calls a function on the latest client. Use this with caution, it's meant as
 * in "internal" helper so we don't need to expose every possible function in
 * the shim. It is not guaranteed that the client actually implements the
 * function.
 *
 * @param method The method to call on the client/client.
 * @param args Arguments to pass to the client/fontend.
 * @hidden
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function _callOnClient(method) {
  var args = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }

  callOnHub.apply(void 0, (0, _tslib.__spread)(['_invokeClient', method], args));
}
/**
 * Starts a new `Transaction` and returns it. This is the entry point to manual
 * tracing instrumentation.
 *
 * A tree structure can be built by adding child spans to the transaction, and
 * child spans to other spans. To start a new child span within the transaction
 * or any span, call the respective `.startChild()` method.
 *
 * Every child span must be finished before the transaction is finished,
 * otherwise the unfinished spans are discarded.
 *
 * The transaction must be finished with a call to its `.finish()` method, at
 * which point the transaction with all its finished child spans will be sent to
 * Sentry.
 *
 * @param context Properties of the new `Transaction`.
 */


function startTransaction(context) {
  return callOnHub('startTransaction', (0, _tslib.__assign)({}, context));
}
},{"tslib":"vCxL","@sentry/hub":"U9M5"}],"DsIj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.API = void 0;

var _utils = require("@sentry/utils");

var SENTRY_API_VERSION = '7';
/** Helper class to provide urls to different Sentry endpoints. */

var API =
/** @class */
function () {
  /** Create a new instance of API */
  function API(dsn) {
    this.dsn = dsn;
    this._dsnObject = new _utils.Dsn(dsn);
  }
  /** Returns the Dsn object. */


  API.prototype.getDsn = function () {
    return this._dsnObject;
  };
  /** Returns the prefix to construct Sentry ingestion API endpoints. */


  API.prototype.getBaseApiEndpoint = function () {
    var dsn = this._dsnObject;
    var protocol = dsn.protocol ? dsn.protocol + ":" : '';
    var port = dsn.port ? ":" + dsn.port : '';
    return protocol + "//" + dsn.host + port + (dsn.path ? "/" + dsn.path : '') + "/api/";
  };
  /** Returns the store endpoint URL. */


  API.prototype.getStoreEndpoint = function () {
    return this._getIngestEndpoint('store');
  };
  /**
   * Returns the store endpoint URL with auth in the query string.
   *
   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
   */


  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {
    return this.getStoreEndpoint() + "?" + this._encodedAuth();
  };
  /**
   * Returns the envelope endpoint URL with auth in the query string.
   *
   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
   */


  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {
    return this._getEnvelopeEndpoint() + "?" + this._encodedAuth();
  };
  /** Returns only the path component for the store endpoint. */


  API.prototype.getStoreEndpointPath = function () {
    var dsn = this._dsnObject;
    return (dsn.path ? "/" + dsn.path : '') + "/api/" + dsn.projectId + "/store/";
  };
  /**
   * Returns an object that can be used in request headers.
   * This is needed for node and the old /store endpoint in sentry
   */


  API.prototype.getRequestHeaders = function (clientName, clientVersion) {
    var dsn = this._dsnObject;
    var header = ["Sentry sentry_version=" + SENTRY_API_VERSION];
    header.push("sentry_client=" + clientName + "/" + clientVersion);
    header.push("sentry_key=" + dsn.user);

    if (dsn.pass) {
      header.push("sentry_secret=" + dsn.pass);
    }

    return {
      'Content-Type': 'application/json',
      'X-Sentry-Auth': header.join(', ')
    };
  };
  /** Returns the url to the report dialog endpoint. */


  API.prototype.getReportDialogEndpoint = function (dialogOptions) {
    if (dialogOptions === void 0) {
      dialogOptions = {};
    }

    var dsn = this._dsnObject;
    var endpoint = this.getBaseApiEndpoint() + "embed/error-page/";
    var encodedOptions = [];
    encodedOptions.push("dsn=" + dsn.toString());

    for (var key in dialogOptions) {
      if (key === 'user') {
        if (!dialogOptions.user) {
          continue;
        }

        if (dialogOptions.user.name) {
          encodedOptions.push("name=" + encodeURIComponent(dialogOptions.user.name));
        }

        if (dialogOptions.user.email) {
          encodedOptions.push("email=" + encodeURIComponent(dialogOptions.user.email));
        }
      } else {
        encodedOptions.push(encodeURIComponent(key) + "=" + encodeURIComponent(dialogOptions[key]));
      }
    }

    if (encodedOptions.length) {
      return endpoint + "?" + encodedOptions.join('&');
    }

    return endpoint;
  };
  /** Returns the envelope endpoint URL. */


  API.prototype._getEnvelopeEndpoint = function () {
    return this._getIngestEndpoint('envelope');
  };
  /** Returns the ingest API endpoint for target. */


  API.prototype._getIngestEndpoint = function (target) {
    var base = this.getBaseApiEndpoint();
    var dsn = this._dsnObject;
    return "" + base + dsn.projectId + "/" + target + "/";
  };
  /** Returns a URL-encoded string with auth config suitable for a query string. */


  API.prototype._encodedAuth = function () {
    var dsn = this._dsnObject;
    var auth = {
      // We send only the minimum set of required information. See
      // https://github.com/getsentry/sentry-javascript/issues/2572.
      sentry_key: dsn.user,
      sentry_version: SENTRY_API_VERSION
    };
    return (0, _utils.urlEncode)(auth);
  };

  return API;
}();

exports.API = API;
},{"@sentry/utils":"vnUD"}],"am9d":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIntegrationsToSetup = getIntegrationsToSetup;
exports.setupIntegration = setupIntegration;
exports.setupIntegrations = setupIntegrations;
exports.installedIntegrations = void 0;

var _tslib = require("tslib");

var _hub = require("@sentry/hub");

var _utils = require("@sentry/utils");

var installedIntegrations = [];
/** Gets integration to install */

exports.installedIntegrations = installedIntegrations;

function getIntegrationsToSetup(options) {
  var defaultIntegrations = options.defaultIntegrations && (0, _tslib.__spread)(options.defaultIntegrations) || [];
  var userIntegrations = options.integrations;
  var integrations = [];

  if (Array.isArray(userIntegrations)) {
    var userIntegrationsNames_1 = userIntegrations.map(function (i) {
      return i.name;
    });
    var pickedIntegrationsNames_1 = []; // Leave only unique default integrations, that were not overridden with provided user integrations

    defaultIntegrations.forEach(function (defaultIntegration) {
      if (userIntegrationsNames_1.indexOf(defaultIntegration.name) === -1 && pickedIntegrationsNames_1.indexOf(defaultIntegration.name) === -1) {
        integrations.push(defaultIntegration);
        pickedIntegrationsNames_1.push(defaultIntegration.name);
      }
    }); // Don't add same user integration twice

    userIntegrations.forEach(function (userIntegration) {
      if (pickedIntegrationsNames_1.indexOf(userIntegration.name) === -1) {
        integrations.push(userIntegration);
        pickedIntegrationsNames_1.push(userIntegration.name);
      }
    });
  } else if (typeof userIntegrations === 'function') {
    integrations = userIntegrations(defaultIntegrations);
    integrations = Array.isArray(integrations) ? integrations : [integrations];
  } else {
    integrations = (0, _tslib.__spread)(defaultIntegrations);
  } // Make sure that if present, `Debug` integration will always run last


  var integrationsNames = integrations.map(function (i) {
    return i.name;
  });
  var alwaysLastToRun = 'Debug';

  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {
    integrations.push.apply(integrations, (0, _tslib.__spread)(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));
  }

  return integrations;
}
/** Setup given integration */


function setupIntegration(integration) {
  if (installedIntegrations.indexOf(integration.name) !== -1) {
    return;
  }

  integration.setupOnce(_hub.addGlobalEventProcessor, _hub.getCurrentHub);
  installedIntegrations.push(integration.name);

  _utils.logger.log("Integration installed: " + integration.name);
}
/**
 * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default
 * integrations are added unless they were already provided before.
 * @param integrations array of integration instances
 * @param withDefault should enable default integrations
 */


function setupIntegrations(options) {
  var integrations = {};
  getIntegrationsToSetup(options).forEach(function (integration) {
    integrations[integration.name] = integration;
    setupIntegration(integration);
  });
  return integrations;
}
},{"tslib":"vCxL","@sentry/hub":"U9M5","@sentry/utils":"vnUD"}],"AQrL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseClient = void 0;

var _tslib = require("tslib");

var _hub = require("@sentry/hub");

var _utils = require("@sentry/utils");

var _integration = require("./integration");

/* eslint-disable max-lines */

/**
 * Base implementation for all JavaScript SDK clients.
 *
 * Call the constructor with the corresponding backend constructor and options
 * specific to the client subclass. To access these options later, use
 * {@link Client.getOptions}. Also, the Backend instance is available via
 * {@link Client.getBackend}.
 *
 * If a Dsn is specified in the options, it will be parsed and stored. Use
 * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is
 * invalid, the constructor will throw a {@link SentryException}. Note that
 * without a valid Dsn, the SDK will not send any events to Sentry.
 *
 * Before sending an event via the backend, it is passed through
 * {@link BaseClient.prepareEvent} to add SDK information and scope data
 * (breadcrumbs and context). To add more custom information, override this
 * method and extend the resulting prepared event.
 *
 * To issue automatically created events (e.g. via instrumentation), use
 * {@link Client.captureEvent}. It will prepare the event and pass it through
 * the callback lifecycle. To issue auto-breadcrumbs, use
 * {@link Client.addBreadcrumb}.
 *
 * @example
 * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {
 *   public constructor(options: NodeOptions) {
 *     super(NodeBackend, options);
 *   }
 *
 *   // ...
 * }
 */
var BaseClient =
/** @class */
function () {
  /**
   * Initializes this client instance.
   *
   * @param backendClass A constructor function to create the backend.
   * @param options Options for the client.
   */
  function BaseClient(backendClass, options) {
    /** Array of used integrations. */
    this._integrations = {};
    /** Is the client still processing a call? */

    this._processing = false;
    this._backend = new backendClass(options);
    this._options = options;

    if (options.dsn) {
      this._dsn = new _utils.Dsn(options.dsn);
    }
  }
  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types


  BaseClient.prototype.captureException = function (exception, hint, scope) {
    var _this = this;

    var eventId = hint && hint.event_id;
    this._processing = true; // eslint-disable-next-line @typescript-eslint/no-floating-promises

    this._getBackend().eventFromException(exception, hint).then(function (event) {
      eventId = _this.captureEvent(event, hint, scope);
    });

    return eventId;
  };
  /**
   * @inheritDoc
   */


  BaseClient.prototype.captureMessage = function (message, level, hint, scope) {
    var _this = this;

    var eventId = hint && hint.event_id;
    this._processing = true;
    var promisedEvent = (0, _utils.isPrimitive)(message) ? this._getBackend().eventFromMessage("" + message, level, hint) : this._getBackend().eventFromException(message, hint); // eslint-disable-next-line @typescript-eslint/no-floating-promises

    promisedEvent.then(function (event) {
      eventId = _this.captureEvent(event, hint, scope);
    });
    return eventId;
  };
  /**
   * @inheritDoc
   */


  BaseClient.prototype.captureEvent = function (event, hint, scope) {
    var _this = this;

    var eventId = hint && hint.event_id;
    this._processing = true;

    this._processEvent(event, hint, scope).then(function (finalEvent) {
      // We need to check for finalEvent in case beforeSend returned null
      eventId = finalEvent && finalEvent.event_id;
      _this._processing = false;
    }).then(null, function (reason) {
      _utils.logger.error(reason);

      _this._processing = false;
    });

    return eventId;
  };
  /**
   * @inheritDoc
   */


  BaseClient.prototype.getDsn = function () {
    return this._dsn;
  };
  /**
   * @inheritDoc
   */


  BaseClient.prototype.getOptions = function () {
    return this._options;
  };
  /**
   * @inheritDoc
   */


  BaseClient.prototype.flush = function (timeout) {
    var _this = this;

    return this._isClientProcessing(timeout).then(function (status) {
      clearInterval(status.interval);
      return _this._getBackend().getTransport().close(timeout).then(function (transportFlushed) {
        return status.ready && transportFlushed;
      });
    });
  };
  /**
   * @inheritDoc
   */


  BaseClient.prototype.close = function (timeout) {
    var _this = this;

    return this.flush(timeout).then(function (result) {
      _this.getOptions().enabled = false;
      return result;
    });
  };
  /**
   * Sets up the integrations
   */


  BaseClient.prototype.setupIntegrations = function () {
    if (this._isEnabled()) {
      this._integrations = (0, _integration.setupIntegrations)(this._options);
    }
  };
  /**
   * @inheritDoc
   */


  BaseClient.prototype.getIntegration = function (integration) {
    try {
      return this._integrations[integration.id] || null;
    } catch (_oO) {
      _utils.logger.warn("Cannot retrieve integration " + integration.id + " from the current Client");

      return null;
    }
  };
  /** Waits for the client to be done with processing. */


  BaseClient.prototype._isClientProcessing = function (timeout) {
    var _this = this;

    return new _utils.SyncPromise(function (resolve) {
      var ticked = 0;
      var tick = 1;
      var interval = 0;
      clearInterval(interval);
      interval = setInterval(function () {
        if (!_this._processing) {
          resolve({
            interval: interval,
            ready: true
          });
        } else {
          ticked += tick;

          if (timeout && ticked >= timeout) {
            resolve({
              interval: interval,
              ready: false
            });
          }
        }
      }, tick);
    });
  };
  /** Returns the current backend. */


  BaseClient.prototype._getBackend = function () {
    return this._backend;
  };
  /** Determines whether this SDK is enabled and a valid Dsn is present. */


  BaseClient.prototype._isEnabled = function () {
    return this.getOptions().enabled !== false && this._dsn !== undefined;
  };
  /**
   * Adds common information to events.
   *
   * The information includes release and environment from `options`,
   * breadcrumbs and context (extra, tags and user) from the scope.
   *
   * Information that is already present in the event is never overwritten. For
   * nested objects, such as the context, keys are merged.
   *
   * @param event The original event.
   * @param hint May contain additional information about the original exception.
   * @param scope A scope containing event metadata.
   * @returns A new event with more information.
   */


  BaseClient.prototype._prepareEvent = function (event, scope, hint) {
    var _this = this;

    var _a = this.getOptions().normalizeDepth,
        normalizeDepth = _a === void 0 ? 3 : _a;
    var prepared = (0, _tslib.__assign)((0, _tslib.__assign)({}, event), {
      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : (0, _utils.uuid4)()),
      timestamp: event.timestamp || (0, _utils.timestampWithMs)()
    });

    this._applyClientOptions(prepared);

    this._applyIntegrationsMetadata(prepared); // If we have scope given to us, use it as the base for further modifications.
    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.


    var finalScope = scope;

    if (hint && hint.captureContext) {
      finalScope = _hub.Scope.clone(finalScope).update(hint.captureContext);
    } // We prepare the result here with a resolved Event.


    var result = _utils.SyncPromise.resolve(prepared); // This should be the last thing called, since we want that
    // {@link Hub.addEventProcessor} gets the finished prepared event.


    if (finalScope) {
      // In case we have a hub we reassign it.
      result = finalScope.applyToEvent(prepared, hint);
    }

    return result.then(function (evt) {
      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {
        return _this._normalizeEvent(evt, normalizeDepth);
      }

      return evt;
    });
  };
  /**
   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.
   * Normalized keys:
   * - `breadcrumbs.data`
   * - `user`
   * - `contexts`
   * - `extra`
   * @param event Event
   * @returns Normalized event
   */


  BaseClient.prototype._normalizeEvent = function (event, depth) {
    if (!event) {
      return null;
    }

    var normalized = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, event), event.breadcrumbs && {
      breadcrumbs: event.breadcrumbs.map(function (b) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, b), b.data && {
          data: (0, _utils.normalize)(b.data, depth)
        });
      })
    }), event.user && {
      user: (0, _utils.normalize)(event.user, depth)
    }), event.contexts && {
      contexts: (0, _utils.normalize)(event.contexts, depth)
    }), event.extra && {
      extra: (0, _utils.normalize)(event.extra, depth)
    }); // event.contexts.trace stores information about a Transaction. Similarly,
    // event.spans[] stores information about child Spans. Given that a
    // Transaction is conceptually a Span, normalization should apply to both
    // Transactions and Spans consistently.
    // For now the decision is to skip normalization of Transactions and Spans,
    // so this block overwrites the normalized event to add back the original
    // Transaction information prior to normalization.

    if (event.contexts && event.contexts.trace) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      normalized.contexts.trace = event.contexts.trace;
    }

    return normalized;
  };
  /**
   *  Enhances event using the client configuration.
   *  It takes care of all "static" values like environment, release and `dist`,
   *  as well as truncating overly long values.
   * @param event event instance to be enhanced
   */


  BaseClient.prototype._applyClientOptions = function (event) {
    var _a = this.getOptions(),
        environment = _a.environment,
        release = _a.release,
        dist = _a.dist,
        _b = _a.maxValueLength,
        maxValueLength = _b === void 0 ? 250 : _b;

    if (event.environment === undefined && environment !== undefined) {
      event.environment = environment;
    }

    if (event.release === undefined && release !== undefined) {
      event.release = release;
    }

    if (event.dist === undefined && dist !== undefined) {
      event.dist = dist;
    }

    if (event.message) {
      event.message = (0, _utils.truncate)(event.message, maxValueLength);
    }

    var exception = event.exception && event.exception.values && event.exception.values[0];

    if (exception && exception.value) {
      exception.value = (0, _utils.truncate)(exception.value, maxValueLength);
    }

    var request = event.request;

    if (request && request.url) {
      request.url = (0, _utils.truncate)(request.url, maxValueLength);
    }
  };
  /**
   * This function adds all used integrations to the SDK info in the event.
   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.
   */


  BaseClient.prototype._applyIntegrationsMetadata = function (event) {
    var sdkInfo = event.sdk;
    var integrationsArray = Object.keys(this._integrations);

    if (sdkInfo && integrationsArray.length > 0) {
      sdkInfo.integrations = integrationsArray;
    }
  };
  /**
   * Tells the backend to send this event
   * @param event The Sentry event to send
   */


  BaseClient.prototype._sendEvent = function (event) {
    this._getBackend().sendEvent(event);
  };
  /**
   * Processes an event (either error or message) and sends it to Sentry.
   *
   * This also adds breadcrumbs and context information to the event. However,
   * platform specific meta data (such as the User's IP address) must be added
   * by the SDK implementor.
   *
   *
   * @param event The event to send to Sentry.
   * @param hint May contain additional information about the original exception.
   * @param scope A scope containing event metadata.
   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
   */


  BaseClient.prototype._processEvent = function (event, hint, scope) {
    var _this = this; // eslint-disable-next-line @typescript-eslint/unbound-method


    var _a = this.getOptions(),
        beforeSend = _a.beforeSend,
        sampleRate = _a.sampleRate;

    if (!this._isEnabled()) {
      return _utils.SyncPromise.reject('SDK not enabled, will not send event.');
    }

    var isTransaction = event.type === 'transaction'; // 1.0 === 100% events are sent
    // 0.0 === 0% events are sent
    // Sampling for transaction happens somewhere else

    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {
      return _utils.SyncPromise.reject('This event has been sampled, will not send event.');
    }

    return new _utils.SyncPromise(function (resolve, reject) {
      _this._prepareEvent(event, scope, hint).then(function (prepared) {
        if (prepared === null) {
          reject('An event processor returned null, will not send event.');
          return;
        }

        var finalEvent = prepared;
        var isInternalException = hint && hint.data && hint.data.__sentry__ === true; // We skip beforeSend in case of transactions

        if (isInternalException || !beforeSend || isTransaction) {
          _this._sendEvent(finalEvent);

          resolve(finalEvent);
          return;
        }

        var beforeSendResult = beforeSend(prepared, hint);

        if (typeof beforeSendResult === 'undefined') {
          _utils.logger.error('`beforeSend` method has to return `null` or a valid event.');
        } else if ((0, _utils.isThenable)(beforeSendResult)) {
          _this._handleAsyncBeforeSend(beforeSendResult, resolve, reject);
        } else {
          finalEvent = beforeSendResult;

          if (finalEvent === null) {
            _utils.logger.log('`beforeSend` returned `null`, will not send event.');

            resolve(null);
            return;
          } // From here on we are really async


          _this._sendEvent(finalEvent);

          resolve(finalEvent);
        }
      }).then(null, function (reason) {
        _this.captureException(reason, {
          data: {
            __sentry__: true
          },
          originalException: reason
        });

        reject("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: " + reason);
      });
    });
  };
  /**
   * Resolves before send Promise and calls resolve/reject on parent SyncPromise.
   */


  BaseClient.prototype._handleAsyncBeforeSend = function (beforeSend, resolve, reject) {
    var _this = this;

    beforeSend.then(function (processedEvent) {
      if (processedEvent === null) {
        reject('`beforeSend` returned `null`, will not send event.');
        return;
      } // From here on we are really async


      _this._sendEvent(processedEvent);

      resolve(processedEvent);
    }).then(null, function (e) {
      reject("beforeSend rejected with " + e);
    });
  };

  return BaseClient;
}();

exports.BaseClient = BaseClient;
},{"tslib":"vCxL","@sentry/hub":"U9M5","@sentry/utils":"vnUD","./integration":"am9d"}],"fec3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopTransport = void 0;

var _types = require("@sentry/types");

var _utils = require("@sentry/utils");

/** Noop transport */
var NoopTransport =
/** @class */
function () {
  function NoopTransport() {}
  /**
   * @inheritDoc
   */


  NoopTransport.prototype.sendEvent = function (_) {
    return _utils.SyncPromise.resolve({
      reason: "NoopTransport: Event has been skipped because no Dsn is configured.",
      status: _types.Status.Skipped
    });
  };
  /**
   * @inheritDoc
   */


  NoopTransport.prototype.close = function (_) {
    return _utils.SyncPromise.resolve(true);
  };

  return NoopTransport;
}();

exports.NoopTransport = NoopTransport;
},{"@sentry/types":"vYhp","@sentry/utils":"vnUD"}],"BMjl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseBackend = void 0;

var _utils = require("@sentry/utils");

var _noop = require("./transports/noop");

/**
 * This is the base implemention of a Backend.
 * @hidden
 */
var BaseBackend =
/** @class */
function () {
  /** Creates a new backend instance. */
  function BaseBackend(options) {
    this._options = options;

    if (!this._options.dsn) {
      _utils.logger.warn('No DSN provided, backend will not do anything.');
    }

    this._transport = this._setupTransport();
  }
  /**
   * @inheritDoc
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types


  BaseBackend.prototype.eventFromException = function (_exception, _hint) {
    throw new _utils.SentryError('Backend has to implement `eventFromException` method');
  };
  /**
   * @inheritDoc
   */


  BaseBackend.prototype.eventFromMessage = function (_message, _level, _hint) {
    throw new _utils.SentryError('Backend has to implement `eventFromMessage` method');
  };
  /**
   * @inheritDoc
   */


  BaseBackend.prototype.sendEvent = function (event) {
    this._transport.sendEvent(event).then(null, function (reason) {
      _utils.logger.error("Error while sending event: " + reason);
    });
  };
  /**
   * @inheritDoc
   */


  BaseBackend.prototype.getTransport = function () {
    return this._transport;
  };
  /**
   * Sets up the transport so it can be used later to send requests.
   */


  BaseBackend.prototype._setupTransport = function () {
    return new _noop.NoopTransport();
  };

  return BaseBackend;
}();

exports.BaseBackend = BaseBackend;
},{"@sentry/utils":"vnUD","./transports/noop":"fec3"}],"dMBM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eventToSentryRequest = eventToSentryRequest;

var _utils = require("@sentry/utils");

/** Creates a SentryRequest from an event. */
function eventToSentryRequest(event, api) {
  var useEnvelope = event.type === 'transaction';
  var req = {
    body: JSON.stringify(event),
    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth()
  }; // https://develop.sentry.dev/sdk/envelopes/
  // Since we don't need to manipulate envelopes nor store them, there is no
  // exported concept of an Envelope with operations including serialization and
  // deserialization. Instead, we only implement a minimal subset of the spec to
  // serialize events inline here.

  if (useEnvelope) {
    var envelopeHeaders = JSON.stringify({
      event_id: event.event_id,
      // We need to add * 1000 since we divide it by 1000 by default but JS works with ms precision
      // The reason we use timestampWithMs here is that all clocks across the SDK use the same clock
      sent_at: new Date((0, _utils.timestampWithMs)() * 1000).toISOString()
    });
    var itemHeaders = JSON.stringify({
      type: event.type
    }); // The trailing newline is optional. We intentionally don't send it to avoid
    // sending unnecessary bytes.
    //
    // const envelope = `${envelopeHeaders}\n${itemHeaders}\n${req.body}\n`;

    var envelope = envelopeHeaders + "\n" + itemHeaders + "\n" + req.body;
    req.body = envelope;
  }

  return req;
}
},{"@sentry/utils":"vnUD"}],"Bvms":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAndBind = initAndBind;

var _hub = require("@sentry/hub");

var _utils = require("@sentry/utils");

/**
 * Internal function to create a new SDK client instance. The client is
 * installed and then bound to the current scope.
 *
 * @param clientClass The client class to instanciate.
 * @param options Options to pass to the client.
 */
function initAndBind(clientClass, options) {
  if (options.debug === true) {
    _utils.logger.enable();
  }

  var hub = (0, _hub.getCurrentHub)();
  var client = new clientClass(options);
  hub.bindClient(client);
}
},{"@sentry/hub":"U9M5","@sentry/utils":"vnUD"}],"ON5N":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FunctionToString = void 0;
var originalFunctionToString;
/** Patch toString calls to return proper name for wrapped functions */

var FunctionToString =
/** @class */
function () {
  function FunctionToString() {
    /**
     * @inheritDoc
     */
    this.name = FunctionToString.id;
  }
  /**
   * @inheritDoc
   */


  FunctionToString.prototype.setupOnce = function () {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    originalFunctionToString = Function.prototype.toString; // eslint-disable-next-line @typescript-eslint/no-explicit-any

    Function.prototype.toString = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var context = this.__sentry_original__ || this;
      return originalFunctionToString.apply(context, args);
    };
  };
  /**
   * @inheritDoc
   */


  FunctionToString.id = 'FunctionToString';
  return FunctionToString;
}();

exports.FunctionToString = FunctionToString;
},{}],"PwYX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InboundFilters = void 0;

var _tslib = require("tslib");

var _hub = require("@sentry/hub");

var _utils = require("@sentry/utils");

// "Script error." is hard coded into browsers for errors that it can't read.
// this is the result of a script being pulled in from an external domain and CORS.
var DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/];
/** Inbound filters configurable by the user */

var InboundFilters =
/** @class */
function () {
  function InboundFilters(_options) {
    if (_options === void 0) {
      _options = {};
    }

    this._options = _options;
    /**
     * @inheritDoc
     */

    this.name = InboundFilters.id;
  }
  /**
   * @inheritDoc
   */


  InboundFilters.prototype.setupOnce = function () {
    (0, _hub.addGlobalEventProcessor)(function (event) {
      var hub = (0, _hub.getCurrentHub)();

      if (!hub) {
        return event;
      }

      var self = hub.getIntegration(InboundFilters);

      if (self) {
        var client = hub.getClient();
        var clientOptions = client ? client.getOptions() : {};

        var options = self._mergeOptions(clientOptions);

        if (self._shouldDropEvent(event, options)) {
          return null;
        }
      }

      return event;
    });
  };
  /** JSDoc */


  InboundFilters.prototype._shouldDropEvent = function (event, options) {
    if (this._isSentryError(event, options)) {
      _utils.logger.warn("Event dropped due to being internal Sentry Error.\nEvent: " + (0, _utils.getEventDescription)(event));

      return true;
    }

    if (this._isIgnoredError(event, options)) {
      _utils.logger.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: " + (0, _utils.getEventDescription)(event));

      return true;
    }

    if (this._isDeniedUrl(event, options)) {
      _utils.logger.warn("Event dropped due to being matched by `denyUrls` option.\nEvent: " + (0, _utils.getEventDescription)(event) + ".\nUrl: " + this._getEventFilterUrl(event));

      return true;
    }

    if (!this._isAllowedUrl(event, options)) {
      _utils.logger.warn("Event dropped due to not being matched by `allowUrls` option.\nEvent: " + (0, _utils.getEventDescription)(event) + ".\nUrl: " + this._getEventFilterUrl(event));

      return true;
    }

    return false;
  };
  /** JSDoc */


  InboundFilters.prototype._isSentryError = function (event, options) {
    if (!options.ignoreInternal) {
      return false;
    }

    try {
      return event && event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].type === 'SentryError' || false;
    } catch (_oO) {
      return false;
    }
  };
  /** JSDoc */


  InboundFilters.prototype._isIgnoredError = function (event, options) {
    if (!options.ignoreErrors || !options.ignoreErrors.length) {
      return false;
    }

    return this._getPossibleEventMessages(event).some(function (message) {
      // Not sure why TypeScript complains here...
      return options.ignoreErrors.some(function (pattern) {
        return (0, _utils.isMatchingPattern)(message, pattern);
      });
    });
  };
  /** JSDoc */


  InboundFilters.prototype._isDeniedUrl = function (event, options) {
    // TODO: Use Glob instead?
    if (!options.denyUrls || !options.denyUrls.length) {
      return false;
    }

    var url = this._getEventFilterUrl(event);

    return !url ? false : options.denyUrls.some(function (pattern) {
      return (0, _utils.isMatchingPattern)(url, pattern);
    });
  };
  /** JSDoc */


  InboundFilters.prototype._isAllowedUrl = function (event, options) {
    // TODO: Use Glob instead?
    if (!options.allowUrls || !options.allowUrls.length) {
      return true;
    }

    var url = this._getEventFilterUrl(event);

    return !url ? true : options.allowUrls.some(function (pattern) {
      return (0, _utils.isMatchingPattern)(url, pattern);
    });
  };
  /** JSDoc */


  InboundFilters.prototype._mergeOptions = function (clientOptions) {
    if (clientOptions === void 0) {
      clientOptions = {};
    }

    return {
      allowUrls: (0, _tslib.__spread)(this._options.whitelistUrls || [], this._options.allowUrls || [], clientOptions.whitelistUrls || [], clientOptions.allowUrls || []),
      denyUrls: (0, _tslib.__spread)(this._options.blacklistUrls || [], this._options.denyUrls || [], clientOptions.blacklistUrls || [], clientOptions.denyUrls || []),
      ignoreErrors: (0, _tslib.__spread)(this._options.ignoreErrors || [], clientOptions.ignoreErrors || [], DEFAULT_IGNORE_ERRORS),
      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true
    };
  };
  /** JSDoc */


  InboundFilters.prototype._getPossibleEventMessages = function (event) {
    if (event.message) {
      return [event.message];
    }

    if (event.exception) {
      try {
        var _a = event.exception.values && event.exception.values[0] || {},
            _b = _a.type,
            type = _b === void 0 ? '' : _b,
            _c = _a.value,
            value = _c === void 0 ? '' : _c;

        return ["" + value, type + ": " + value];
      } catch (oO) {
        _utils.logger.error("Cannot extract message for event " + (0, _utils.getEventDescription)(event));

        return [];
      }
    }

    return [];
  };
  /** JSDoc */


  InboundFilters.prototype._getEventFilterUrl = function (event) {
    try {
      if (event.stacktrace) {
        var frames_1 = event.stacktrace.frames;
        return frames_1 && frames_1[frames_1.length - 1].filename || null;
      }

      if (event.exception) {
        var frames_2 = event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;
        return frames_2 && frames_2[frames_2.length - 1].filename || null;
      }

      return null;
    } catch (oO) {
      _utils.logger.error("Cannot extract url for event " + (0, _utils.getEventDescription)(event));

      return null;
    }
  };
  /**
   * @inheritDoc
   */


  InboundFilters.id = 'InboundFilters';
  return InboundFilters;
}();

exports.InboundFilters = InboundFilters;
},{"tslib":"vCxL","@sentry/hub":"U9M5","@sentry/utils":"vnUD"}],"t1vy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FunctionToString", {
  enumerable: true,
  get: function () {
    return _functiontostring.FunctionToString;
  }
});
Object.defineProperty(exports, "InboundFilters", {
  enumerable: true,
  get: function () {
    return _inboundfilters.InboundFilters;
  }
});

var _functiontostring = require("./functiontostring");

var _inboundfilters = require("./inboundfilters");
},{"./functiontostring":"ON5N","./inboundfilters":"PwYX"}],"TZM3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "addBreadcrumb", {
  enumerable: true,
  get: function () {
    return _minimal.addBreadcrumb;
  }
});
Object.defineProperty(exports, "captureException", {
  enumerable: true,
  get: function () {
    return _minimal.captureException;
  }
});
Object.defineProperty(exports, "captureEvent", {
  enumerable: true,
  get: function () {
    return _minimal.captureEvent;
  }
});
Object.defineProperty(exports, "captureMessage", {
  enumerable: true,
  get: function () {
    return _minimal.captureMessage;
  }
});
Object.defineProperty(exports, "configureScope", {
  enumerable: true,
  get: function () {
    return _minimal.configureScope;
  }
});
Object.defineProperty(exports, "startTransaction", {
  enumerable: true,
  get: function () {
    return _minimal.startTransaction;
  }
});
Object.defineProperty(exports, "setContext", {
  enumerable: true,
  get: function () {
    return _minimal.setContext;
  }
});
Object.defineProperty(exports, "setExtra", {
  enumerable: true,
  get: function () {
    return _minimal.setExtra;
  }
});
Object.defineProperty(exports, "setExtras", {
  enumerable: true,
  get: function () {
    return _minimal.setExtras;
  }
});
Object.defineProperty(exports, "setTag", {
  enumerable: true,
  get: function () {
    return _minimal.setTag;
  }
});
Object.defineProperty(exports, "setTags", {
  enumerable: true,
  get: function () {
    return _minimal.setTags;
  }
});
Object.defineProperty(exports, "setUser", {
  enumerable: true,
  get: function () {
    return _minimal.setUser;
  }
});
Object.defineProperty(exports, "withScope", {
  enumerable: true,
  get: function () {
    return _minimal.withScope;
  }
});
Object.defineProperty(exports, "addGlobalEventProcessor", {
  enumerable: true,
  get: function () {
    return _hub.addGlobalEventProcessor;
  }
});
Object.defineProperty(exports, "getCurrentHub", {
  enumerable: true,
  get: function () {
    return _hub.getCurrentHub;
  }
});
Object.defineProperty(exports, "getHubFromCarrier", {
  enumerable: true,
  get: function () {
    return _hub.getHubFromCarrier;
  }
});
Object.defineProperty(exports, "Hub", {
  enumerable: true,
  get: function () {
    return _hub.Hub;
  }
});
Object.defineProperty(exports, "makeMain", {
  enumerable: true,
  get: function () {
    return _hub.makeMain;
  }
});
Object.defineProperty(exports, "Scope", {
  enumerable: true,
  get: function () {
    return _hub.Scope;
  }
});
Object.defineProperty(exports, "API", {
  enumerable: true,
  get: function () {
    return _api.API;
  }
});
Object.defineProperty(exports, "BaseClient", {
  enumerable: true,
  get: function () {
    return _baseclient.BaseClient;
  }
});
Object.defineProperty(exports, "BaseBackend", {
  enumerable: true,
  get: function () {
    return _basebackend.BaseBackend;
  }
});
Object.defineProperty(exports, "eventToSentryRequest", {
  enumerable: true,
  get: function () {
    return _request.eventToSentryRequest;
  }
});
Object.defineProperty(exports, "initAndBind", {
  enumerable: true,
  get: function () {
    return _sdk.initAndBind;
  }
});
Object.defineProperty(exports, "NoopTransport", {
  enumerable: true,
  get: function () {
    return _noop.NoopTransport;
  }
});
exports.Integrations = void 0;

var _minimal = require("@sentry/minimal");

var _hub = require("@sentry/hub");

var _api = require("./api");

var _baseclient = require("./baseclient");

var _basebackend = require("./basebackend");

var _request = require("./request");

var _sdk = require("./sdk");

var _noop = require("./transports/noop");

var Integrations = _interopRequireWildcard(require("./integrations"));

exports.Integrations = Integrations;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"@sentry/minimal":"uQ1D","@sentry/hub":"U9M5","./api":"DsIj","./baseclient":"AQrL","./basebackend":"BMjl","./request":"dMBM","./sdk":"Bvms","./transports/noop":"fec3","./integrations":"t1vy"}],"EptK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeStackTrace = computeStackTrace;

var _tslib = require("tslib");

/**
 * This was originally forked from https://github.com/occ/TraceKit, but has since been
 * largely modified and is now maintained as part of Sentry JS SDK.
 */
// global reference to slice
var UNKNOWN_FUNCTION = '?'; // Chromium based browsers: Chrome, Brave, new Opera, new Edge

var chrome = /^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i; // gecko regex: `(?:bundle|\d+\.js)`: `bundle` is for react native, `\d+\.js` also but specifically for ram bundles because it
// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js
// We need this specific case for now because we want no other regex to match.

var gecko = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js))(?::(\d+))?(?::(\d+))?\s*$/i;
var winjs = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
var geckoEval = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
var chromeEval = /\((\S*)(?::(\d+))(?::(\d+))\)/; // Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108

var reactMinifiedRegexp = /Minified React error #\d+;/i;
/** JSDoc */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types

function computeStackTrace(ex) {
  var stack = null;
  var popSize = 0;

  if (ex) {
    if (typeof ex.framesToPop === 'number') {
      popSize = ex.framesToPop;
    } else if (reactMinifiedRegexp.test(ex.message)) {
      popSize = 1;
    }
  }

  try {
    // This must be tried first because Opera 10 *destroys*
    // its stacktrace property if you try to access the stack
    // property first!!
    stack = computeStackTraceFromStacktraceProp(ex);

    if (stack) {
      return popFrames(stack, popSize);
    }
  } catch (e) {// no-empty
  }

  try {
    stack = computeStackTraceFromStackProp(ex);

    if (stack) {
      return popFrames(stack, popSize);
    }
  } catch (e) {// no-empty
  }

  return {
    message: extractMessage(ex),
    name: ex && ex.name,
    stack: [],
    failed: true
  };
}
/** JSDoc */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity


function computeStackTraceFromStackProp(ex) {
  if (!ex || !ex.stack) {
    return null;
  }

  var stack = [];
  var lines = ex.stack.split('\n');
  var isEval;
  var submatch;
  var parts;
  var element;

  for (var i = 0; i < lines.length; ++i) {
    if (parts = chrome.exec(lines[i])) {
      var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line

      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line

      if (isEval && (submatch = chromeEval.exec(parts[2]))) {
        // throw out eval line/column and use top-most line/column number
        parts[2] = submatch[1]; // url

        parts[3] = submatch[2]; // line

        parts[4] = submatch[3]; // column
      }

      element = {
        // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `
        // prefix here seems like the quickest solution for now.
        url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],
        func: parts[1] || UNKNOWN_FUNCTION,
        args: isNative ? [parts[2]] : [],
        line: parts[3] ? +parts[3] : null,
        column: parts[4] ? +parts[4] : null
      };
    } else if (parts = winjs.exec(lines[i])) {
      element = {
        url: parts[2],
        func: parts[1] || UNKNOWN_FUNCTION,
        args: [],
        line: +parts[3],
        column: parts[4] ? +parts[4] : null
      };
    } else if (parts = gecko.exec(lines[i])) {
      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;

      if (isEval && (submatch = geckoEval.exec(parts[3]))) {
        // throw out eval line/column and use top-most line number
        parts[1] = parts[1] || "eval";
        parts[3] = submatch[1];
        parts[4] = submatch[2];
        parts[5] = ''; // no column when eval
      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {
        // FireFox uses this awesome columnNumber property for its top frame
        // Also note, Firefox's column number is 0-based and everything else expects 1-based,
        // so adding 1
        // NOTE: this hack doesn't work if top-most frame is eval
        stack[0].column = ex.columnNumber + 1;
      }

      element = {
        url: parts[3],
        func: parts[1] || UNKNOWN_FUNCTION,
        args: parts[2] ? parts[2].split(',') : [],
        line: parts[4] ? +parts[4] : null,
        column: parts[5] ? +parts[5] : null
      };
    } else {
      continue;
    }

    if (!element.func && element.line) {
      element.func = UNKNOWN_FUNCTION;
    }

    stack.push(element);
  }

  if (!stack.length) {
    return null;
  }

  return {
    message: extractMessage(ex),
    name: ex.name,
    stack: stack
  };
}
/** JSDoc */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function computeStackTraceFromStacktraceProp(ex) {
  if (!ex || !ex.stacktrace) {
    return null;
  } // Access and store the stacktrace property before doing ANYTHING
  // else to it because Opera is not very good at providing it
  // reliably in other circumstances.


  var stacktrace = ex.stacktrace;
  var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i;
  var opera11Regex = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\((.*)\))? in (.*):\s*$/i;
  var lines = stacktrace.split('\n');
  var stack = [];
  var parts;

  for (var line = 0; line < lines.length; line += 2) {
    var element = null;

    if (parts = opera10Regex.exec(lines[line])) {
      element = {
        url: parts[2],
        func: parts[3],
        args: [],
        line: +parts[1],
        column: null
      };
    } else if (parts = opera11Regex.exec(lines[line])) {
      element = {
        url: parts[6],
        func: parts[3] || parts[4],
        args: parts[5] ? parts[5].split(',') : [],
        line: +parts[1],
        column: +parts[2]
      };
    }

    if (element) {
      if (!element.func && element.line) {
        element.func = UNKNOWN_FUNCTION;
      }

      stack.push(element);
    }
  }

  if (!stack.length) {
    return null;
  }

  return {
    message: extractMessage(ex),
    name: ex.name,
    stack: stack
  };
}
/** Remove N number of frames from the stack */


function popFrames(stacktrace, popSize) {
  try {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, stacktrace), {
      stack: stacktrace.stack.slice(popSize)
    });
  } catch (e) {
    return stacktrace;
  }
}
/**
 * There are cases where stacktrace.message is an Event object
 * https://github.com/getsentry/sentry-javascript/issues/1949
 * In this specific case we try to extract stacktrace.message.error.message
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function extractMessage(ex) {
  var message = ex && ex.message;

  if (!message) {
    return 'No error message';
  }

  if (message.error && typeof message.error.message === 'string') {
    return message.error.message;
  }

  return message;
}
},{"tslib":"vCxL"}],"kAUL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exceptionFromStacktrace = exceptionFromStacktrace;
exports.eventFromPlainObject = eventFromPlainObject;
exports.eventFromStacktrace = eventFromStacktrace;
exports.prepareFramesForEvent = prepareFramesForEvent;

var _utils = require("@sentry/utils");

var _tracekit = require("./tracekit");

var STACKTRACE_LIMIT = 50;
/**
 * This function creates an exception from an TraceKitStackTrace
 * @param stacktrace TraceKitStackTrace that will be converted to an exception
 * @hidden
 */

function exceptionFromStacktrace(stacktrace) {
  var frames = prepareFramesForEvent(stacktrace.stack);
  var exception = {
    type: stacktrace.name,
    value: stacktrace.message
  };

  if (frames && frames.length) {
    exception.stacktrace = {
      frames: frames
    };
  }

  if (exception.type === undefined && exception.value === '') {
    exception.value = 'Unrecoverable error caught';
  }

  return exception;
}
/**
 * @hidden
 */


function eventFromPlainObject(exception, syntheticException, rejection) {
  var event = {
    exception: {
      values: [{
        type: (0, _utils.isEvent)(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',
        value: "Non-Error " + (rejection ? 'promise rejection' : 'exception') + " captured with keys: " + (0, _utils.extractExceptionKeysForMessage)(exception)
      }]
    },
    extra: {
      __serialized__: (0, _utils.normalizeToSize)(exception)
    }
  };

  if (syntheticException) {
    var stacktrace = (0, _tracekit.computeStackTrace)(syntheticException);
    var frames_1 = prepareFramesForEvent(stacktrace.stack);
    event.stacktrace = {
      frames: frames_1
    };
  }

  return event;
}
/**
 * @hidden
 */


function eventFromStacktrace(stacktrace) {
  var exception = exceptionFromStacktrace(stacktrace);
  return {
    exception: {
      values: [exception]
    }
  };
}
/**
 * @hidden
 */


function prepareFramesForEvent(stack) {
  if (!stack || !stack.length) {
    return [];
  }

  var localStack = stack;
  var firstFrameFunction = localStack[0].func || '';
  var lastFrameFunction = localStack[localStack.length - 1].func || ''; // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)

  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {
    localStack = localStack.slice(1);
  } // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)


  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {
    localStack = localStack.slice(0, -1);
  } // The frame where the crash happened, should be the last entry in the array


  return localStack.slice(0, STACKTRACE_LIMIT).map(function (frame) {
    return {
      colno: frame.column === null ? undefined : frame.column,
      filename: frame.url || localStack[0].url,
      function: frame.func || '?',
      in_app: true,
      lineno: frame.line === null ? undefined : frame.line
    };
  }).reverse();
}
},{"@sentry/utils":"vnUD","./tracekit":"EptK"}],"yGRZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eventFromException = eventFromException;
exports.eventFromMessage = eventFromMessage;
exports.eventFromUnknownInput = eventFromUnknownInput;
exports.eventFromString = eventFromString;

var _types = require("@sentry/types");

var _utils = require("@sentry/utils");

var _parsers = require("./parsers");

var _tracekit = require("./tracekit");

/**
 * Builds and Event from a Exception
 * @hidden
 */
function eventFromException(options, exception, hint) {
  var syntheticException = hint && hint.syntheticException || undefined;
  var event = eventFromUnknownInput(exception, syntheticException, {
    attachStacktrace: options.attachStacktrace
  });
  (0, _utils.addExceptionMechanism)(event, {
    handled: true,
    type: 'generic'
  });
  event.level = _types.Severity.Error;

  if (hint && hint.event_id) {
    event.event_id = hint.event_id;
  }

  return _utils.SyncPromise.resolve(event);
}
/**
 * Builds and Event from a Message
 * @hidden
 */


function eventFromMessage(options, message, level, hint) {
  if (level === void 0) {
    level = _types.Severity.Info;
  }

  var syntheticException = hint && hint.syntheticException || undefined;
  var event = eventFromString(message, syntheticException, {
    attachStacktrace: options.attachStacktrace
  });
  event.level = level;

  if (hint && hint.event_id) {
    event.event_id = hint.event_id;
  }

  return _utils.SyncPromise.resolve(event);
}
/**
 * @hidden
 */


function eventFromUnknownInput(exception, syntheticException, options) {
  if (options === void 0) {
    options = {};
  }

  var event;

  if ((0, _utils.isErrorEvent)(exception) && exception.error) {
    // If it is an ErrorEvent with `error` property, extract it to get actual Error
    var errorEvent = exception; // eslint-disable-next-line no-param-reassign

    exception = errorEvent.error;
    event = (0, _parsers.eventFromStacktrace)((0, _tracekit.computeStackTrace)(exception));
    return event;
  }

  if ((0, _utils.isDOMError)(exception) || (0, _utils.isDOMException)(exception)) {
    // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)
    // then we just extract the name and message, as they don't provide anything else
    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError
    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException
    var domException = exception;
    var name_1 = domException.name || ((0, _utils.isDOMError)(domException) ? 'DOMError' : 'DOMException');
    var message = domException.message ? name_1 + ": " + domException.message : name_1;
    event = eventFromString(message, syntheticException, options);
    (0, _utils.addExceptionTypeValue)(event, message);
    return event;
  }

  if ((0, _utils.isError)(exception)) {
    // we have a real Error object, do nothing
    event = (0, _parsers.eventFromStacktrace)((0, _tracekit.computeStackTrace)(exception));
    return event;
  }

  if ((0, _utils.isPlainObject)(exception) || (0, _utils.isEvent)(exception)) {
    // If it is plain Object or Event, serialize it manually and extract options
    // This will allow us to group events based on top-level keys
    // which is much better than creating new group when any key/value change
    var objectException = exception;
    event = (0, _parsers.eventFromPlainObject)(objectException, syntheticException, options.rejection);
    (0, _utils.addExceptionMechanism)(event, {
      synthetic: true
    });
    return event;
  } // If none of previous checks were valid, then it means that it's not:
  // - an instance of DOMError
  // - an instance of DOMException
  // - an instance of Event
  // - an instance of Error
  // - a valid ErrorEvent (one with an error property)
  // - a plain Object
  //
  // So bail out and capture it as a simple message:


  event = eventFromString(exception, syntheticException, options);
  (0, _utils.addExceptionTypeValue)(event, "" + exception, undefined);
  (0, _utils.addExceptionMechanism)(event, {
    synthetic: true
  });
  return event;
}
/**
 * @hidden
 */


function eventFromString(input, syntheticException, options) {
  if (options === void 0) {
    options = {};
  }

  var event = {
    message: input
  };

  if (options.attachStacktrace && syntheticException) {
    var stacktrace = (0, _tracekit.computeStackTrace)(syntheticException);
    var frames_1 = (0, _parsers.prepareFramesForEvent)(stacktrace.stack);
    event.stacktrace = {
      frames: frames_1
    };
  }

  return event;
}
},{"@sentry/types":"vYhp","@sentry/utils":"vnUD","./parsers":"kAUL","./tracekit":"EptK"}],"TRJV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseTransport = void 0;

var _core = require("@sentry/core");

var _utils = require("@sentry/utils");

/** Base Transport class implementation */
var BaseTransport =
/** @class */
function () {
  function BaseTransport(options) {
    this.options = options;
    /** A simple buffer holding all requests. */

    this._buffer = new _utils.PromiseBuffer(30);
    this._api = new _core.API(this.options.dsn); // eslint-disable-next-line deprecation/deprecation

    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();
  }
  /**
   * @inheritDoc
   */


  BaseTransport.prototype.sendEvent = function (_) {
    throw new _utils.SentryError('Transport Class has to implement `sendEvent` method');
  };
  /**
   * @inheritDoc
   */


  BaseTransport.prototype.close = function (timeout) {
    return this._buffer.drain(timeout);
  };

  return BaseTransport;
}();

exports.BaseTransport = BaseTransport;
},{"@sentry/core":"TZM3","@sentry/utils":"vnUD"}],"HQW2":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FetchTransport = void 0;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _types = require("@sentry/types");

var _utils = require("@sentry/utils");

var _base = require("./base");

var global = (0, _utils.getGlobalObject)();
/** `fetch` based transport */

var FetchTransport =
/** @class */
function (_super) {
  (0, _tslib.__extends)(FetchTransport, _super);

  function FetchTransport() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    /** Locks transport after receiving 429 response */


    _this._disabledUntil = new Date(Date.now());
    return _this;
  }
  /**
   * @inheritDoc
   */


  FetchTransport.prototype.sendEvent = function (event) {
    var _this = this;

    if (new Date(Date.now()) < this._disabledUntil) {
      return Promise.reject({
        event: event,
        reason: "Transport locked till " + this._disabledUntil + " due to too many requests.",
        status: 429
      });
    }

    var sentryReq = (0, _core.eventToSentryRequest)(event, this._api);
    var options = {
      body: sentryReq.body,
      method: 'POST',
      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default
      // https://caniuse.com/#feat=referrer-policy
      // It doesn't. And it throw exception instead of ignoring this parameter...
      // REF: https://github.com/getsentry/raven-js/issues/1233
      referrerPolicy: (0, _utils.supportsReferrerPolicy)() ? 'origin' : ''
    };

    if (this.options.fetchParameters !== undefined) {
      Object.assign(options, this.options.fetchParameters);
    }

    if (this.options.headers !== undefined) {
      options.headers = this.options.headers;
    }

    return this._buffer.add(new _utils.SyncPromise(function (resolve, reject) {
      global.fetch(sentryReq.url, options).then(function (response) {
        var status = _types.Status.fromHttpCode(response.status);

        if (status === _types.Status.Success) {
          resolve({
            status: status
          });
          return;
        }

        if (status === _types.Status.RateLimit) {
          var now = Date.now();
          /**
           * "The name is case-insensitive."
           * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get
           */

          var retryAfterHeader = response.headers.get('Retry-After');
          _this._disabledUntil = new Date(now + (0, _utils.parseRetryAfterHeader)(now, retryAfterHeader));

          _utils.logger.warn("Too many requests, backing off till: " + _this._disabledUntil);
        }

        reject(response);
      }).catch(reject);
    }));
  };

  return FetchTransport;
}(_base.BaseTransport);

exports.FetchTransport = FetchTransport;
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/types":"vYhp","@sentry/utils":"vnUD","./base":"TRJV"}],"mwwI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XHRTransport = void 0;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _types = require("@sentry/types");

var _utils = require("@sentry/utils");

var _base = require("./base");

/** `XHR` based transport */
var XHRTransport =
/** @class */
function (_super) {
  (0, _tslib.__extends)(XHRTransport, _super);

  function XHRTransport() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    /** Locks transport after receiving 429 response */


    _this._disabledUntil = new Date(Date.now());
    return _this;
  }
  /**
   * @inheritDoc
   */


  XHRTransport.prototype.sendEvent = function (event) {
    var _this = this;

    if (new Date(Date.now()) < this._disabledUntil) {
      return Promise.reject({
        event: event,
        reason: "Transport locked till " + this._disabledUntil + " due to too many requests.",
        status: 429
      });
    }

    var sentryReq = (0, _core.eventToSentryRequest)(event, this._api);
    return this._buffer.add(new _utils.SyncPromise(function (resolve, reject) {
      var request = new XMLHttpRequest();

      request.onreadystatechange = function () {
        if (request.readyState !== 4) {
          return;
        }

        var status = _types.Status.fromHttpCode(request.status);

        if (status === _types.Status.Success) {
          resolve({
            status: status
          });
          return;
        }

        if (status === _types.Status.RateLimit) {
          var now = Date.now();
          /**
           * "The search for the header name is case-insensitive."
           * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader
           */

          var retryAfterHeader = request.getResponseHeader('Retry-After');
          _this._disabledUntil = new Date(now + (0, _utils.parseRetryAfterHeader)(now, retryAfterHeader));

          _utils.logger.warn("Too many requests, backing off till: " + _this._disabledUntil);
        }

        reject(request);
      };

      request.open('POST', sentryReq.url);

      for (var header in _this.options.headers) {
        if (_this.options.headers.hasOwnProperty(header)) {
          request.setRequestHeader(header, _this.options.headers[header]);
        }
      }

      request.send(sentryReq.body);
    }));
  };

  return XHRTransport;
}(_base.BaseTransport);

exports.XHRTransport = XHRTransport;
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/types":"vYhp","@sentry/utils":"vnUD","./base":"TRJV"}],"iexI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BaseTransport", {
  enumerable: true,
  get: function () {
    return _base.BaseTransport;
  }
});
Object.defineProperty(exports, "FetchTransport", {
  enumerable: true,
  get: function () {
    return _fetch.FetchTransport;
  }
});
Object.defineProperty(exports, "XHRTransport", {
  enumerable: true,
  get: function () {
    return _xhr.XHRTransport;
  }
});

var _base = require("./base");

var _fetch = require("./fetch");

var _xhr = require("./xhr");
},{"./base":"TRJV","./fetch":"HQW2","./xhr":"mwwI"}],"V30D":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrowserBackend = void 0;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _types = require("@sentry/types");

var _utils = require("@sentry/utils");

var _eventbuilder = require("./eventbuilder");

var _transports = require("./transports");

/**
 * The Sentry Browser SDK Backend.
 * @hidden
 */
var BrowserBackend =
/** @class */
function (_super) {
  (0, _tslib.__extends)(BrowserBackend, _super);

  function BrowserBackend() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * @inheritDoc
   */


  BrowserBackend.prototype.eventFromException = function (exception, hint) {
    return (0, _eventbuilder.eventFromException)(this._options, exception, hint);
  };
  /**
   * @inheritDoc
   */


  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {
    if (level === void 0) {
      level = _types.Severity.Info;
    }

    return (0, _eventbuilder.eventFromMessage)(this._options, message, level, hint);
  };
  /**
   * @inheritDoc
   */


  BrowserBackend.prototype._setupTransport = function () {
    if (!this._options.dsn) {
      // We return the noop transport here in case there is no Dsn.
      return _super.prototype._setupTransport.call(this);
    }

    var transportOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, this._options.transportOptions), {
      dsn: this._options.dsn
    });

    if (this._options.transport) {
      return new this._options.transport(transportOptions);
    }

    if ((0, _utils.supportsFetch)()) {
      return new _transports.FetchTransport(transportOptions);
    }

    return new _transports.XHRTransport(transportOptions);
  };

  return BrowserBackend;
}(_core.BaseBackend);

exports.BrowserBackend = BrowserBackend;
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/types":"vYhp","@sentry/utils":"vnUD","./eventbuilder":"yGRZ","./transports":"iexI"}],"PuX9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldIgnoreOnError = shouldIgnoreOnError;
exports.ignoreNextOnError = ignoreNextOnError;
exports.wrap = wrap;
exports.injectReportDialog = injectReportDialog;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _utils = require("@sentry/utils");

var ignoreOnError = 0;
/**
 * @hidden
 */

function shouldIgnoreOnError() {
  return ignoreOnError > 0;
}
/**
 * @hidden
 */


function ignoreNextOnError() {
  // onerror should trigger before setTimeout
  ignoreOnError += 1;
  setTimeout(function () {
    ignoreOnError -= 1;
  });
}
/**
 * Instruments the given function and sends an event to Sentry every time the
 * function throws an exception.
 *
 * @param fn A function to wrap.
 * @returns The wrapped function.
 * @hidden
 */


function wrap(fn, options, before) {
  if (options === void 0) {
    options = {};
  }

  if (typeof fn !== 'function') {
    return fn;
  }

  try {
    // We don't wanna wrap it twice
    if (fn.__sentry__) {
      return fn;
    } // If this has already been wrapped in the past, return that wrapped function


    if (fn.__sentry_wrapped__) {
      return fn.__sentry_wrapped__;
    }
  } catch (e) {
    // Just accessing custom props in some Selenium environments
    // can cause a "Permission denied" exception (see raven-js#495).
    // Bail on wrapping and return the function as-is (defers to window.onerror).
    return fn;
  }
  /* eslint-disable prefer-rest-params */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  var sentryWrapped = function () {
    var args = Array.prototype.slice.call(arguments);

    try {
      if (before && typeof before === 'function') {
        before.apply(this, arguments);
      } // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access


      var wrappedArguments = args.map(function (arg) {
        return wrap(arg, options);
      });

      if (fn.handleEvent) {
        // Attempt to invoke user-land function
        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
        //       means the sentry.javascript SDK caught an error invoking your application code. This
        //       is expected behavior and NOT indicative of a bug with sentry.javascript.
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        return fn.handleEvent.apply(this, wrappedArguments);
      } // Attempt to invoke user-land function
      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
      //       means the sentry.javascript SDK caught an error invoking your application code. This
      //       is expected behavior and NOT indicative of a bug with sentry.javascript.


      return fn.apply(this, wrappedArguments);
    } catch (ex) {
      ignoreNextOnError();
      (0, _core.withScope)(function (scope) {
        scope.addEventProcessor(function (event) {
          var processedEvent = (0, _tslib.__assign)({}, event);

          if (options.mechanism) {
            (0, _utils.addExceptionTypeValue)(processedEvent, undefined, undefined);
            (0, _utils.addExceptionMechanism)(processedEvent, options.mechanism);
          }

          processedEvent.extra = (0, _tslib.__assign)((0, _tslib.__assign)({}, processedEvent.extra), {
            arguments: args
          });
          return processedEvent;
        });
        (0, _core.captureException)(ex);
      });
      throw ex;
    }
  };
  /* eslint-enable prefer-rest-params */
  // Accessing some objects may throw
  // ref: https://github.com/getsentry/sentry-javascript/issues/1168


  try {
    for (var property in fn) {
      if (Object.prototype.hasOwnProperty.call(fn, property)) {
        sentryWrapped[property] = fn[property];
      }
    }
  } catch (_oO) {} // eslint-disable-line no-empty


  fn.prototype = fn.prototype || {};
  sentryWrapped.prototype = fn.prototype;
  Object.defineProperty(fn, '__sentry_wrapped__', {
    enumerable: false,
    value: sentryWrapped
  }); // Signal that this function has been wrapped/filled already
  // for both debugging and to prevent it to being wrapped/filled twice

  Object.defineProperties(sentryWrapped, {
    __sentry__: {
      enumerable: false,
      value: true
    },
    __sentry_original__: {
      enumerable: false,
      value: fn
    }
  }); // Restore original function name (not all browsers allow that)

  try {
    var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');

    if (descriptor.configurable) {
      Object.defineProperty(sentryWrapped, 'name', {
        get: function () {
          return fn.name;
        }
      });
    } // eslint-disable-next-line no-empty

  } catch (_oO) {}

  return sentryWrapped;
}
/**
 * Injects the Report Dialog script
 * @hidden
 */


function injectReportDialog(options) {
  if (options === void 0) {
    options = {};
  }

  if (!options.eventId) {
    _utils.logger.error("Missing eventId option in showReportDialog call");

    return;
  }

  if (!options.dsn) {
    _utils.logger.error("Missing dsn option in showReportDialog call");

    return;
  }

  var script = document.createElement('script');
  script.async = true;
  script.src = new _core.API(options.dsn).getReportDialogEndpoint(options);

  if (options.onLoad) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    script.onload = options.onLoad;
  }

  (document.head || document.body).appendChild(script);
}
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/utils":"vnUD"}],"l5aE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlobalHandlers = void 0;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _types = require("@sentry/types");

var _utils = require("@sentry/utils");

var _eventbuilder = require("../eventbuilder");

var _helpers = require("../helpers");

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/** Global handlers */
var GlobalHandlers =
/** @class */
function () {
  /** JSDoc */
  function GlobalHandlers(options) {
    /**
     * @inheritDoc
     */
    this.name = GlobalHandlers.id;
    /** JSDoc */

    this._onErrorHandlerInstalled = false;
    /** JSDoc */

    this._onUnhandledRejectionHandlerInstalled = false;
    this._options = (0, _tslib.__assign)({
      onerror: true,
      onunhandledrejection: true
    }, options);
  }
  /**
   * @inheritDoc
   */


  GlobalHandlers.prototype.setupOnce = function () {
    Error.stackTraceLimit = 50;

    if (this._options.onerror) {
      _utils.logger.log('Global Handler attached: onerror');

      this._installGlobalOnErrorHandler();
    }

    if (this._options.onunhandledrejection) {
      _utils.logger.log('Global Handler attached: onunhandledrejection');

      this._installGlobalOnUnhandledRejectionHandler();
    }
  };
  /** JSDoc */


  GlobalHandlers.prototype._installGlobalOnErrorHandler = function () {
    var _this = this;

    if (this._onErrorHandlerInstalled) {
      return;
    }

    (0, _utils.addInstrumentationHandler)({
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      callback: function (data) {
        var error = data.error;
        var currentHub = (0, _core.getCurrentHub)();
        var hasIntegration = currentHub.getIntegration(GlobalHandlers);
        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;

        if (!hasIntegration || (0, _helpers.shouldIgnoreOnError)() || isFailedOwnDelivery) {
          return;
        }

        var client = currentHub.getClient();
        var event = (0, _utils.isPrimitive)(error) ? _this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column) : _this._enhanceEventWithInitialFrame((0, _eventbuilder.eventFromUnknownInput)(error, undefined, {
          attachStacktrace: client && client.getOptions().attachStacktrace,
          rejection: false
        }), data.url, data.line, data.column);
        (0, _utils.addExceptionMechanism)(event, {
          handled: false,
          type: 'onerror'
        });
        currentHub.captureEvent(event, {
          originalException: error
        });
      },
      type: 'error'
    });
    this._onErrorHandlerInstalled = true;
  };
  /** JSDoc */


  GlobalHandlers.prototype._installGlobalOnUnhandledRejectionHandler = function () {
    var _this = this;

    if (this._onUnhandledRejectionHandlerInstalled) {
      return;
    }

    (0, _utils.addInstrumentationHandler)({
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      callback: function (e) {
        var error = e; // dig the object of the rejection out of known event types

        try {
          // PromiseRejectionEvents store the object of the rejection under 'reason'
          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
          if ('reason' in e) {
            error = e.reason;
          } // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents
          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into
          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec
          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and
          // https://github.com/getsentry/sentry-javascript/issues/2380
          else if ('detail' in e && 'reason' in e.detail) {
              error = e.detail.reason;
            }
        } catch (_oO) {// no-empty
        }

        var currentHub = (0, _core.getCurrentHub)();
        var hasIntegration = currentHub.getIntegration(GlobalHandlers);
        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;

        if (!hasIntegration || (0, _helpers.shouldIgnoreOnError)() || isFailedOwnDelivery) {
          return true;
        }

        var client = currentHub.getClient();
        var event = (0, _utils.isPrimitive)(error) ? _this._eventFromIncompleteRejection(error) : (0, _eventbuilder.eventFromUnknownInput)(error, undefined, {
          attachStacktrace: client && client.getOptions().attachStacktrace,
          rejection: true
        });
        event.level = _types.Severity.Error;
        (0, _utils.addExceptionMechanism)(event, {
          handled: false,
          type: 'onunhandledrejection'
        });
        currentHub.captureEvent(event, {
          originalException: error
        });
        return;
      },
      type: 'unhandledrejection'
    });
    this._onUnhandledRejectionHandlerInstalled = true;
  };
  /**
   * This function creates a stack from an old, error-less onerror handler.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  GlobalHandlers.prototype._eventFromIncompleteOnError = function (msg, url, line, column) {
    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i; // If 'message' is ErrorEvent, get real message from inside

    var message = (0, _utils.isErrorEvent)(msg) ? msg.message : msg;
    var name;

    if ((0, _utils.isString)(message)) {
      var groups = message.match(ERROR_TYPES_RE);

      if (groups) {
        name = groups[1];
        message = groups[2];
      }
    }

    var event = {
      exception: {
        values: [{
          type: name || 'Error',
          value: message
        }]
      }
    };
    return this._enhanceEventWithInitialFrame(event, url, line, column);
  };
  /**
   * This function creates an Event from an TraceKitStackTrace that has part of it missing.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  GlobalHandlers.prototype._eventFromIncompleteRejection = function (error) {
    return {
      exception: {
        values: [{
          type: 'UnhandledRejection',
          value: "Non-Error promise rejection captured with value: " + error
        }]
      }
    };
  };
  /** JSDoc */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  GlobalHandlers.prototype._enhanceEventWithInitialFrame = function (event, url, line, column) {
    event.exception = event.exception || {};
    event.exception.values = event.exception.values || [];
    event.exception.values[0] = event.exception.values[0] || {};
    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};
    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];
    var colno = isNaN(parseInt(column, 10)) ? undefined : column;
    var lineno = isNaN(parseInt(line, 10)) ? undefined : line;
    var filename = (0, _utils.isString)(url) && url.length > 0 ? url : (0, _utils.getLocationHref)();

    if (event.exception.values[0].stacktrace.frames.length === 0) {
      event.exception.values[0].stacktrace.frames.push({
        colno: colno,
        filename: filename,
        function: '?',
        in_app: true,
        lineno: lineno
      });
    }

    return event;
  };
  /**
   * @inheritDoc
   */


  GlobalHandlers.id = 'GlobalHandlers';
  return GlobalHandlers;
}();

exports.GlobalHandlers = GlobalHandlers;
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/types":"vYhp","@sentry/utils":"vnUD","../eventbuilder":"yGRZ","../helpers":"PuX9"}],"Q7DM":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TryCatch = void 0;

var _tslib = require("tslib");

var _utils = require("@sentry/utils");

var _helpers = require("../helpers");

var DEFAULT_EVENT_TARGET = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];
/** Wrap timer functions and event targets to catch errors and provide better meta data */

var TryCatch =
/** @class */
function () {
  /**
   * @inheritDoc
   */
  function TryCatch(options) {
    /**
     * @inheritDoc
     */
    this.name = TryCatch.id;
    this._options = (0, _tslib.__assign)({
      XMLHttpRequest: true,
      eventTarget: true,
      requestAnimationFrame: true,
      setInterval: true,
      setTimeout: true
    }, options);
  }
  /**
   * Wrap timer functions and event targets to catch errors
   * and provide better metadata.
   */


  TryCatch.prototype.setupOnce = function () {
    var global = (0, _utils.getGlobalObject)();

    if (this._options.setTimeout) {
      (0, _utils.fill)(global, 'setTimeout', this._wrapTimeFunction.bind(this));
    }

    if (this._options.setInterval) {
      (0, _utils.fill)(global, 'setInterval', this._wrapTimeFunction.bind(this));
    }

    if (this._options.requestAnimationFrame) {
      (0, _utils.fill)(global, 'requestAnimationFrame', this._wrapRAF.bind(this));
    }

    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {
      (0, _utils.fill)(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));
    }

    if (this._options.eventTarget) {
      var eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;
      eventTarget.forEach(this._wrapEventTarget.bind(this));
    }
  };
  /** JSDoc */


  TryCatch.prototype._wrapTimeFunction = function (original) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var originalCallback = args[0];
      args[0] = (0, _helpers.wrap)(originalCallback, {
        mechanism: {
          data: {
            function: (0, _utils.getFunctionName)(original)
          },
          handled: true,
          type: 'instrument'
        }
      });
      return original.apply(this, args);
    };
  };
  /** JSDoc */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  TryCatch.prototype._wrapRAF = function (original) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function (callback) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      return original.call(this, (0, _helpers.wrap)(callback, {
        mechanism: {
          data: {
            function: 'requestAnimationFrame',
            handler: (0, _utils.getFunctionName)(original)
          },
          handled: true,
          type: 'instrument'
        }
      }));
    };
  };
  /** JSDoc */


  TryCatch.prototype._wrapEventTarget = function (target) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var global = (0, _utils.getGlobalObject)(); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

    var proto = global[target] && global[target].prototype; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
      return;
    }

    (0, _utils.fill)(proto, 'addEventListener', function (original) {
      return function (eventName, fn, options) {
        try {
          if (typeof fn.handleEvent === 'function') {
            fn.handleEvent = (0, _helpers.wrap)(fn.handleEvent.bind(fn), {
              mechanism: {
                data: {
                  function: 'handleEvent',
                  handler: (0, _utils.getFunctionName)(fn),
                  target: target
                },
                handled: true,
                type: 'instrument'
              }
            });
          }
        } catch (err) {// can sometimes get 'Permission denied to access property "handle Event'
        }

        return original.call(this, eventName, // eslint-disable-next-line @typescript-eslint/no-explicit-any
        (0, _helpers.wrap)(fn, {
          mechanism: {
            data: {
              function: 'addEventListener',
              handler: (0, _utils.getFunctionName)(fn),
              target: target
            },
            handled: true,
            type: 'instrument'
          }
        }), options);
      };
    });
    (0, _utils.fill)(proto, 'removeEventListener', function (original) {
      return function (eventName, fn, options) {
        /**
         * There are 2 possible scenarios here:
         *
         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified
         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function
         * as a pass-through, and call original `removeEventListener` with it.
         *
         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using
         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.
         * This helper "wraps" whole callback inside a try/catch statement, and attached appropriate metadata to it,
         * in order for us to make a distinction between wrapped/non-wrapped functions possible.
         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.
         *
         * When someone adds a handler prior to initialization, and then do it again, but after,
         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible
         * to get rid of the initial handler and it'd stick there forever.
         */
        try {
          original.call(this, eventName, fn.__sentry_wrapped__, options);
        } catch (e) {// ignore, accessing __sentry_wrapped__ will throw in some Selenium environments
        }

        return original.call(this, eventName, fn, options);
      };
    });
  };
  /** JSDoc */


  TryCatch.prototype._wrapXHR = function (originalSend) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      } // eslint-disable-next-line @typescript-eslint/no-this-alias


      var xhr = this;
      var xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];
      xmlHttpRequestProps.forEach(function (prop) {
        if (prop in xhr && typeof xhr[prop] === 'function') {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (0, _utils.fill)(xhr, prop, function (original) {
            var wrapOptions = {
              mechanism: {
                data: {
                  function: prop,
                  handler: (0, _utils.getFunctionName)(original)
                },
                handled: true,
                type: 'instrument'
              }
            }; // If Instrument integration has been called before TryCatch, get the name of original function

            if (original.__sentry_original__) {
              wrapOptions.mechanism.data.handler = (0, _utils.getFunctionName)(original.__sentry_original__);
            } // Otherwise wrap directly


            return (0, _helpers.wrap)(original, wrapOptions);
          });
        }
      });
      return originalSend.apply(this, args);
    };
  };
  /**
   * @inheritDoc
   */


  TryCatch.id = 'TryCatch';
  return TryCatch;
}();

exports.TryCatch = TryCatch;
},{"tslib":"vCxL","@sentry/utils":"vnUD","../helpers":"PuX9"}],"YFxN":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Breadcrumbs = void 0;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _types = require("@sentry/types");

var _utils = require("@sentry/utils");

/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/* eslint-disable max-lines */

/**
 * Default Breadcrumbs instrumentations
 * TODO: Deprecated - with v6, this will be renamed to `Instrument`
 */
var Breadcrumbs =
/** @class */
function () {
  /**
   * @inheritDoc
   */
  function Breadcrumbs(options) {
    /**
     * @inheritDoc
     */
    this.name = Breadcrumbs.id;
    this._options = (0, _tslib.__assign)({
      console: true,
      dom: true,
      fetch: true,
      history: true,
      sentry: true,
      xhr: true
    }, options);
  }
  /**
   * Create a breadcrumb of `sentry` from the events themselves
   */


  Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {
    if (!this._options.sentry) {
      return;
    }

    (0, _core.getCurrentHub)().addBreadcrumb({
      category: "sentry." + (event.type === 'transaction' ? 'transaction' : 'event'),
      event_id: event.event_id,
      level: event.level,
      message: (0, _utils.getEventDescription)(event)
    }, {
      event: event
    });
  };
  /**
   * Instrument browser built-ins w/ breadcrumb capturing
   *  - Console API
   *  - DOM API (click/typing)
   *  - XMLHttpRequest API
   *  - Fetch API
   *  - History API
   */


  Breadcrumbs.prototype.setupOnce = function () {
    var _this = this;

    if (this._options.console) {
      (0, _utils.addInstrumentationHandler)({
        callback: function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          _this._consoleBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
        },
        type: 'console'
      });
    }

    if (this._options.dom) {
      (0, _utils.addInstrumentationHandler)({
        callback: function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          _this._domBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
        },
        type: 'dom'
      });
    }

    if (this._options.xhr) {
      (0, _utils.addInstrumentationHandler)({
        callback: function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          _this._xhrBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
        },
        type: 'xhr'
      });
    }

    if (this._options.fetch) {
      (0, _utils.addInstrumentationHandler)({
        callback: function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          _this._fetchBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
        },
        type: 'fetch'
      });
    }

    if (this._options.history) {
      (0, _utils.addInstrumentationHandler)({
        callback: function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          _this._historyBreadcrumb.apply(_this, (0, _tslib.__spread)(args));
        },
        type: 'history'
      });
    }
  };
  /**
   * Creates breadcrumbs from console API calls
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Breadcrumbs.prototype._consoleBreadcrumb = function (handlerData) {
    var breadcrumb = {
      category: 'console',
      data: {
        arguments: handlerData.args,
        logger: 'console'
      },
      level: _types.Severity.fromString(handlerData.level),
      message: (0, _utils.safeJoin)(handlerData.args, ' ')
    };

    if (handlerData.level === 'assert') {
      if (handlerData.args[0] === false) {
        breadcrumb.message = "Assertion failed: " + ((0, _utils.safeJoin)(handlerData.args.slice(1), ' ') || 'console.assert');
        breadcrumb.data.arguments = handlerData.args.slice(1);
      } else {
        // Don't capture a breadcrumb for passed assertions
        return;
      }
    }

    (0, _core.getCurrentHub)().addBreadcrumb(breadcrumb, {
      input: handlerData.args,
      level: handlerData.level
    });
  };
  /**
   * Creates breadcrumbs from DOM API calls
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Breadcrumbs.prototype._domBreadcrumb = function (handlerData) {
    var target; // Accessing event.target can throw (see getsentry/raven-js#838, #768)

    try {
      target = handlerData.event.target ? (0, _utils.htmlTreeAsString)(handlerData.event.target) : (0, _utils.htmlTreeAsString)(handlerData.event);
    } catch (e) {
      target = '<unknown>';
    }

    if (target.length === 0) {
      return;
    }

    (0, _core.getCurrentHub)().addBreadcrumb({
      category: "ui." + handlerData.name,
      message: target
    }, {
      event: handlerData.event,
      name: handlerData.name
    });
  };
  /**
   * Creates breadcrumbs from XHR API calls
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Breadcrumbs.prototype._xhrBreadcrumb = function (handlerData) {
    if (handlerData.endTimestamp) {
      // We only capture complete, non-sentry requests
      if (handlerData.xhr.__sentry_own_request__) {
        return;
      }

      (0, _core.getCurrentHub)().addBreadcrumb({
        category: 'xhr',
        data: handlerData.xhr.__sentry_xhr__,
        type: 'http'
      }, {
        xhr: handlerData.xhr
      });
      return;
    }
  };
  /**
   * Creates breadcrumbs from fetch API calls
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Breadcrumbs.prototype._fetchBreadcrumb = function (handlerData) {
    // We only capture complete fetch requests
    if (!handlerData.endTimestamp) {
      return;
    }

    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {
      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)
      return;
    }

    if (handlerData.error) {
      (0, _core.getCurrentHub)().addBreadcrumb({
        category: 'fetch',
        data: handlerData.fetchData,
        level: _types.Severity.Error,
        type: 'http'
      }, {
        data: handlerData.error,
        input: handlerData.args
      });
    } else {
      (0, _core.getCurrentHub)().addBreadcrumb({
        category: 'fetch',
        data: (0, _tslib.__assign)((0, _tslib.__assign)({}, handlerData.fetchData), {
          status_code: handlerData.response.status
        }),
        type: 'http'
      }, {
        input: handlerData.args,
        response: handlerData.response
      });
    }
  };
  /**
   * Creates breadcrumbs from history API calls
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  Breadcrumbs.prototype._historyBreadcrumb = function (handlerData) {
    var global = (0, _utils.getGlobalObject)();
    var from = handlerData.from;
    var to = handlerData.to;
    var parsedLoc = (0, _utils.parseUrl)(global.location.href);
    var parsedFrom = (0, _utils.parseUrl)(from);
    var parsedTo = (0, _utils.parseUrl)(to); // Initial pushState doesn't provide `from` information

    if (!parsedFrom.path) {
      parsedFrom = parsedLoc;
    } // Use only the path component of the URL if the URL matches the current
    // document (almost all the time when using pushState)


    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
      to = parsedTo.relative;
    }

    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
      from = parsedFrom.relative;
    }

    (0, _core.getCurrentHub)().addBreadcrumb({
      category: 'navigation',
      data: {
        from: from,
        to: to
      }
    });
  };
  /**
   * @inheritDoc
   */


  Breadcrumbs.id = 'Breadcrumbs';
  return Breadcrumbs;
}();

exports.Breadcrumbs = Breadcrumbs;
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/types":"vYhp","@sentry/utils":"vnUD"}],"KquI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkedErrors = void 0;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _utils = require("@sentry/utils");

var _parsers = require("../parsers");

var _tracekit = require("../tracekit");

var DEFAULT_KEY = 'cause';
var DEFAULT_LIMIT = 5;
/** Adds SDK info to an event. */

var LinkedErrors =
/** @class */
function () {
  /**
   * @inheritDoc
   */
  function LinkedErrors(options) {
    if (options === void 0) {
      options = {};
    }
    /**
     * @inheritDoc
     */


    this.name = LinkedErrors.id;
    this._key = options.key || DEFAULT_KEY;
    this._limit = options.limit || DEFAULT_LIMIT;
  }
  /**
   * @inheritDoc
   */


  LinkedErrors.prototype.setupOnce = function () {
    (0, _core.addGlobalEventProcessor)(function (event, hint) {
      var self = (0, _core.getCurrentHub)().getIntegration(LinkedErrors);

      if (self) {
        return self._handler(event, hint);
      }

      return event;
    });
  };
  /**
   * @inheritDoc
   */


  LinkedErrors.prototype._handler = function (event, hint) {
    if (!event.exception || !event.exception.values || !hint || !(0, _utils.isInstanceOf)(hint.originalException, Error)) {
      return event;
    }

    var linkedErrors = this._walkErrorTree(hint.originalException, this._key);

    event.exception.values = (0, _tslib.__spread)(linkedErrors, event.exception.values);
    return event;
  };
  /**
   * @inheritDoc
   */


  LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {
    if (stack === void 0) {
      stack = [];
    }

    if (!(0, _utils.isInstanceOf)(error[key], Error) || stack.length + 1 >= this._limit) {
      return stack;
    }

    var stacktrace = (0, _tracekit.computeStackTrace)(error[key]);
    var exception = (0, _parsers.exceptionFromStacktrace)(stacktrace);
    return this._walkErrorTree(error[key], key, (0, _tslib.__spread)([exception], stack));
  };
  /**
   * @inheritDoc
   */


  LinkedErrors.id = 'LinkedErrors';
  return LinkedErrors;
}();

exports.LinkedErrors = LinkedErrors;
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/utils":"vnUD","../parsers":"kAUL","../tracekit":"EptK"}],"wEu1":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserAgent = void 0;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _utils = require("@sentry/utils");

var global = (0, _utils.getGlobalObject)();
/** UserAgent */

var UserAgent =
/** @class */
function () {
  function UserAgent() {
    /**
     * @inheritDoc
     */
    this.name = UserAgent.id;
  }
  /**
   * @inheritDoc
   */


  UserAgent.prototype.setupOnce = function () {
    (0, _core.addGlobalEventProcessor)(function (event) {
      if ((0, _core.getCurrentHub)().getIntegration(UserAgent)) {
        if (!global.navigator || !global.location) {
          return event;
        }

        var request = event.request || {};
        request.url = request.url || global.location.href;
        request.headers = request.headers || {};
        request.headers['User-Agent'] = global.navigator.userAgent;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, event), {
          request: request
        });
      }

      return event;
    });
  };
  /**
   * @inheritDoc
   */


  UserAgent.id = 'UserAgent';
  return UserAgent;
}();

exports.UserAgent = UserAgent;
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/utils":"vnUD"}],"vue0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GlobalHandlers", {
  enumerable: true,
  get: function () {
    return _globalhandlers.GlobalHandlers;
  }
});
Object.defineProperty(exports, "TryCatch", {
  enumerable: true,
  get: function () {
    return _trycatch.TryCatch;
  }
});
Object.defineProperty(exports, "Breadcrumbs", {
  enumerable: true,
  get: function () {
    return _breadcrumbs.Breadcrumbs;
  }
});
Object.defineProperty(exports, "LinkedErrors", {
  enumerable: true,
  get: function () {
    return _linkederrors.LinkedErrors;
  }
});
Object.defineProperty(exports, "UserAgent", {
  enumerable: true,
  get: function () {
    return _useragent.UserAgent;
  }
});

var _globalhandlers = require("./globalhandlers");

var _trycatch = require("./trycatch");

var _breadcrumbs = require("./breadcrumbs");

var _linkederrors = require("./linkederrors");

var _useragent = require("./useragent");
},{"./globalhandlers":"l5aE","./trycatch":"Q7DM","./breadcrumbs":"YFxN","./linkederrors":"KquI","./useragent":"wEu1"}],"Qr3a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SDK_VERSION = exports.SDK_NAME = void 0;
var SDK_NAME = 'sentry.javascript.browser';
exports.SDK_NAME = SDK_NAME;
var SDK_VERSION = '5.22.3';
exports.SDK_VERSION = SDK_VERSION;
},{}],"s6nm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BrowserClient = void 0;

var _tslib = require("tslib");

var _core = require("@sentry/core");

var _utils = require("@sentry/utils");

var _backend = require("./backend");

var _helpers = require("./helpers");

var _integrations = require("./integrations");

var _version = require("./version");

/**
 * The Sentry Browser SDK Client.
 *
 * @see BrowserOptions for documentation on configuration options.
 * @see SentryClient for usage documentation.
 */
var BrowserClient =
/** @class */
function (_super) {
  (0, _tslib.__extends)(BrowserClient, _super);
  /**
   * Creates a new Browser SDK instance.
   *
   * @param options Configuration options for this SDK.
   */

  function BrowserClient(options) {
    if (options === void 0) {
      options = {};
    }

    return _super.call(this, _backend.BrowserBackend, options) || this;
  }
  /**
   * Show a report dialog to the user to send feedback to a specific event.
   *
   * @param options Set individual options for the dialog
   */


  BrowserClient.prototype.showReportDialog = function (options) {
    if (options === void 0) {
      options = {};
    } // doesn't work without a document (React Native)


    var document = (0, _utils.getGlobalObject)().document;

    if (!document) {
      return;
    }

    if (!this._isEnabled()) {
      _utils.logger.error('Trying to call showReportDialog with Sentry Client disabled');

      return;
    }

    (0, _helpers.injectReportDialog)((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      dsn: options.dsn || this.getDsn()
    }));
  };
  /**
   * @inheritDoc
   */


  BrowserClient.prototype._prepareEvent = function (event, scope, hint) {
    event.platform = event.platform || 'javascript';
    event.sdk = (0, _tslib.__assign)((0, _tslib.__assign)({}, event.sdk), {
      name: _version.SDK_NAME,
      packages: (0, _tslib.__spread)(event.sdk && event.sdk.packages || [], [{
        name: 'npm:@sentry/browser',
        version: _version.SDK_VERSION
      }]),
      version: _version.SDK_VERSION
    });
    return _super.prototype._prepareEvent.call(this, event, scope, hint);
  };
  /**
   * @inheritDoc
   */


  BrowserClient.prototype._sendEvent = function (event) {
    var integration = this.getIntegration(_integrations.Breadcrumbs);

    if (integration) {
      integration.addSentryBreadcrumb(event);
    }

    _super.prototype._sendEvent.call(this, event);
  };

  return BrowserClient;
}(_core.BaseClient);

exports.BrowserClient = BrowserClient;
},{"tslib":"vCxL","@sentry/core":"TZM3","@sentry/utils":"vnUD","./backend":"V30D","./helpers":"PuX9","./integrations":"vue0","./version":"Qr3a"}],"nKpN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.showReportDialog = showReportDialog;
exports.lastEventId = lastEventId;
exports.forceLoad = forceLoad;
exports.onLoad = onLoad;
exports.flush = flush;
exports.close = close;
exports.wrap = wrap;
exports.defaultIntegrations = void 0;

var _core = require("@sentry/core");

var _utils = require("@sentry/utils");

var _client = require("./client");

var _helpers = require("./helpers");

var _integrations = require("./integrations");

var defaultIntegrations = [new _core.Integrations.InboundFilters(), new _core.Integrations.FunctionToString(), new _integrations.TryCatch(), new _integrations.Breadcrumbs(), new _integrations.GlobalHandlers(), new _integrations.LinkedErrors(), new _integrations.UserAgent()];
/**
 * The Sentry Browser SDK Client.
 *
 * To use this SDK, call the {@link init} function as early as possible when
 * loading the web page. To set context information or send manual events, use
 * the provided methods.
 *
 * @example
 *
 * ```
 *
 * import { init } from '@sentry/browser';
 *
 * init({
 *   dsn: '__DSN__',
 *   // ...
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { configureScope } from '@sentry/browser';
 * configureScope((scope: Scope) => {
 *   scope.setExtra({ battery: 0.7 });
 *   scope.setTag({ user_mode: 'admin' });
 *   scope.setUser({ id: '4711' });
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { addBreadcrumb } from '@sentry/browser';
 * addBreadcrumb({
 *   message: 'My Breadcrumb',
 *   // ...
 * });
 * ```
 *
 * @example
 *
 * ```
 *
 * import * as Sentry from '@sentry/browser';
 * Sentry.captureMessage('Hello, world!');
 * Sentry.captureException(new Error('Good bye'));
 * Sentry.captureEvent({
 *   message: 'Manual',
 *   stacktrace: [
 *     // ...
 *   ],
 * });
 * ```
 *
 * @see {@link BrowserOptions} for documentation on configuration options.
 */

exports.defaultIntegrations = defaultIntegrations;

function init(options) {
  if (options === void 0) {
    options = {};
  }

  if (options.defaultIntegrations === undefined) {
    options.defaultIntegrations = defaultIntegrations;
  }

  if (options.release === undefined) {
    var window_1 = (0, _utils.getGlobalObject)(); // This supports the variable that sentry-webpack-plugin injects

    if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {
      options.release = window_1.SENTRY_RELEASE.id;
    }
  }

  (0, _core.initAndBind)(_client.BrowserClient, options);
}
/**
 * Present the user with a report dialog.
 *
 * @param options Everything is optional, we try to fetch all info need from the global scope.
 */


function showReportDialog(options) {
  if (options === void 0) {
    options = {};
  }

  if (!options.eventId) {
    options.eventId = (0, _core.getCurrentHub)().lastEventId();
  }

  var client = (0, _core.getCurrentHub)().getClient();

  if (client) {
    client.showReportDialog(options);
  }
}
/**
 * This is the getter for lastEventId.
 *
 * @returns The last event id of a captured event.
 */


function lastEventId() {
  return (0, _core.getCurrentHub)().lastEventId();
}
/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */


function forceLoad() {} // Noop

/**
 * This function is here to be API compatible with the loader.
 * @hidden
 */


function onLoad(callback) {
  callback();
}
/**
 * A promise that resolves when all current events have been sent.
 * If you provide a timeout and the queue takes longer to drain the promise returns false.
 *
 * @param timeout Maximum time in ms the client should wait.
 */


function flush(timeout) {
  var client = (0, _core.getCurrentHub)().getClient();

  if (client) {
    return client.flush(timeout);
  }

  return _utils.SyncPromise.reject(false);
}
/**
 * A promise that resolves when all current events have been sent.
 * If you provide a timeout and the queue takes longer to drain the promise returns false.
 *
 * @param timeout Maximum time in ms the client should wait.
 */


function close(timeout) {
  var client = (0, _core.getCurrentHub)().getClient();

  if (client) {
    return client.close(timeout);
  }

  return _utils.SyncPromise.reject(false);
}
/**
 * Wrap code within a try/catch block so the SDK is able to capture errors.
 *
 * @param fn A function to wrap.
 *
 * @returns The result of wrapped function call.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function wrap(fn) {
  return (0, _helpers.wrap)(fn)();
}
},{"@sentry/core":"TZM3","@sentry/utils":"vnUD","./client":"s6nm","./helpers":"PuX9","./integrations":"vue0"}],"QNOP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Severity", {
  enumerable: true,
  get: function () {
    return _types.Severity;
  }
});
Object.defineProperty(exports, "Status", {
  enumerable: true,
  get: function () {
    return _types.Status;
  }
});
Object.defineProperty(exports, "addGlobalEventProcessor", {
  enumerable: true,
  get: function () {
    return _core.addGlobalEventProcessor;
  }
});
Object.defineProperty(exports, "addBreadcrumb", {
  enumerable: true,
  get: function () {
    return _core.addBreadcrumb;
  }
});
Object.defineProperty(exports, "captureException", {
  enumerable: true,
  get: function () {
    return _core.captureException;
  }
});
Object.defineProperty(exports, "captureEvent", {
  enumerable: true,
  get: function () {
    return _core.captureEvent;
  }
});
Object.defineProperty(exports, "captureMessage", {
  enumerable: true,
  get: function () {
    return _core.captureMessage;
  }
});
Object.defineProperty(exports, "configureScope", {
  enumerable: true,
  get: function () {
    return _core.configureScope;
  }
});
Object.defineProperty(exports, "getHubFromCarrier", {
  enumerable: true,
  get: function () {
    return _core.getHubFromCarrier;
  }
});
Object.defineProperty(exports, "getCurrentHub", {
  enumerable: true,
  get: function () {
    return _core.getCurrentHub;
  }
});
Object.defineProperty(exports, "Hub", {
  enumerable: true,
  get: function () {
    return _core.Hub;
  }
});
Object.defineProperty(exports, "makeMain", {
  enumerable: true,
  get: function () {
    return _core.makeMain;
  }
});
Object.defineProperty(exports, "Scope", {
  enumerable: true,
  get: function () {
    return _core.Scope;
  }
});
Object.defineProperty(exports, "startTransaction", {
  enumerable: true,
  get: function () {
    return _core.startTransaction;
  }
});
Object.defineProperty(exports, "setContext", {
  enumerable: true,
  get: function () {
    return _core.setContext;
  }
});
Object.defineProperty(exports, "setExtra", {
  enumerable: true,
  get: function () {
    return _core.setExtra;
  }
});
Object.defineProperty(exports, "setExtras", {
  enumerable: true,
  get: function () {
    return _core.setExtras;
  }
});
Object.defineProperty(exports, "setTag", {
  enumerable: true,
  get: function () {
    return _core.setTag;
  }
});
Object.defineProperty(exports, "setTags", {
  enumerable: true,
  get: function () {
    return _core.setTags;
  }
});
Object.defineProperty(exports, "setUser", {
  enumerable: true,
  get: function () {
    return _core.setUser;
  }
});
Object.defineProperty(exports, "withScope", {
  enumerable: true,
  get: function () {
    return _core.withScope;
  }
});
Object.defineProperty(exports, "BrowserClient", {
  enumerable: true,
  get: function () {
    return _client.BrowserClient;
  }
});
Object.defineProperty(exports, "injectReportDialog", {
  enumerable: true,
  get: function () {
    return _helpers.injectReportDialog;
  }
});
Object.defineProperty(exports, "eventFromException", {
  enumerable: true,
  get: function () {
    return _eventbuilder.eventFromException;
  }
});
Object.defineProperty(exports, "eventFromMessage", {
  enumerable: true,
  get: function () {
    return _eventbuilder.eventFromMessage;
  }
});
Object.defineProperty(exports, "defaultIntegrations", {
  enumerable: true,
  get: function () {
    return _sdk.defaultIntegrations;
  }
});
Object.defineProperty(exports, "forceLoad", {
  enumerable: true,
  get: function () {
    return _sdk.forceLoad;
  }
});
Object.defineProperty(exports, "init", {
  enumerable: true,
  get: function () {
    return _sdk.init;
  }
});
Object.defineProperty(exports, "lastEventId", {
  enumerable: true,
  get: function () {
    return _sdk.lastEventId;
  }
});
Object.defineProperty(exports, "onLoad", {
  enumerable: true,
  get: function () {
    return _sdk.onLoad;
  }
});
Object.defineProperty(exports, "showReportDialog", {
  enumerable: true,
  get: function () {
    return _sdk.showReportDialog;
  }
});
Object.defineProperty(exports, "flush", {
  enumerable: true,
  get: function () {
    return _sdk.flush;
  }
});
Object.defineProperty(exports, "close", {
  enumerable: true,
  get: function () {
    return _sdk.close;
  }
});
Object.defineProperty(exports, "wrap", {
  enumerable: true,
  get: function () {
    return _sdk.wrap;
  }
});
Object.defineProperty(exports, "SDK_NAME", {
  enumerable: true,
  get: function () {
    return _version.SDK_NAME;
  }
});
Object.defineProperty(exports, "SDK_VERSION", {
  enumerable: true,
  get: function () {
    return _version.SDK_VERSION;
  }
});

var _types = require("@sentry/types");

var _core = require("@sentry/core");

var _client = require("./client");

var _helpers = require("./helpers");

var _eventbuilder = require("./eventbuilder");

var _sdk = require("./sdk");

var _version = require("./version");
},{"@sentry/types":"vYhp","@sentry/core":"TZM3","./client":"s6nm","./helpers":"PuX9","./eventbuilder":"yGRZ","./sdk":"nKpN","./version":"Qr3a"}],"cUe8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  Integrations: true,
  Transports: true
};
exports.Transports = exports.Integrations = void 0;

var _tslib = require("tslib");

var _exports = require("./exports");

Object.keys(_exports).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _exports[key];
    }
  });
});

var _core = require("@sentry/core");

var _utils = require("@sentry/utils");

var BrowserIntegrations = _interopRequireWildcard(require("./integrations"));

var Transports = _interopRequireWildcard(require("./transports"));

exports.Transports = Transports;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var windowIntegrations = {}; // This block is needed to add compatibility with the integrations packages when used with a CDN

var _window = (0, _utils.getGlobalObject)();

if (_window.Sentry && _window.Sentry.Integrations) {
  windowIntegrations = _window.Sentry.Integrations;
}

var INTEGRATIONS = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, windowIntegrations), _core.Integrations), BrowserIntegrations);
exports.Integrations = INTEGRATIONS;
},{"tslib":"vCxL","./exports":"QNOP","@sentry/core":"TZM3","@sentry/utils":"vnUD","./integrations":"vue0","./transports":"iexI"}],"shls":[function(require,module,exports) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = void 0;

var Sentry = __importStar(require("@sentry/browser"));

var Logger =
/*#__PURE__*/
function () {
  function Logger(_ref) {
    var _this = this;

    var elixirChat = _ref.elixirChat;

    _classCallCheck(this, Logger);

    this.isDebug = false;
    this.isSentryInitialized = false;
    this.scopeClient = {};

    this.logInfo = function (text, data) {
      if (_this.isDebug) {
        _this.writeConsoleMessage(text, data);
      }
    };

    this.logError = function (text, data) {
      if (_this.isDebug) {
        _this.sendErrorToSentry(text, data);

        _this.writeConsoleMessage(text, data, '#EB3223');
      }
    };

    this.logEvent = function (text, data) {
      if (_this.isDebug) {
        var isErrorEvent = /_ERROR$/i.test(text);

        if (isErrorEvent) {
          _this.sendErrorToSentry(text, data);
        }

        _this.writeConsoleMessage(text, data, isErrorEvent ? '#EBA4A7' : '#5EE9EB');
      }
    };

    this.setClient = function (client) {
      _this.scopeClient = client;

      if (_this.isSentryInitialized) {
        var clientUsername = [client.firstName, client.lastName].filter(function (word) {
          return word;
        }).join(' ');
        Sentry.configureScope(function (scope) {
          scope.setUser({
            id: client.id,
            username: clientUsername
          });
        });
      }
    };

    var _elixirChat$config = elixirChat.config,
        sentryUrl = _elixirChat$config.sentryUrl,
        apiUrl = _elixirChat$config.apiUrl,
        debug = _elixirChat$config.debug;
    this.elixirChat = elixirChat;
    this.isDebug = debug;
    this.nodeEnv = "production";

    if (sentryUrl && debug && this.nodeEnv !== 'development') {
      var host = new URL(apiUrl).host;
      Sentry.init({
        dsn: sentryUrl
      });
      Sentry.configureScope(function (scope) {
        scope.setExtra('hostname', host);
      });
      this.isSentryInitialized = true;
    }
  }

  _createClass(Logger, [{
    key: "sendErrorToSentry",
    value: function sendErrorToSentry(message, data) {
      // TODO: squeeze large data before sending
      // TODO: send in chunks on interval, not immediately (use window.requestIdleCallback()?)
      if (this.isSentryInitialized) {
        Sentry.withScope(function (scope) {
          scope.setExtras(data);
          Sentry.captureMessage(message);
        });
      }
    }
  }, {
    key: "getTimestamp",
    value: function getTimestamp() {
      var now = new Date();
      return [now.getHours().toString().padStart(2, '0'), now.getMinutes().toString().padStart(2, '0'), now.getSeconds().toString().padStart(2, '0')].join(':');
    }
  }, {
    key: "writeConsoleMessage",
    value: function writeConsoleMessage(message, data) {
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var messageConsoleStyle = "font-weight: bold; color: ".concat(color, ";");
      var infoButtonConsoleStyle = "font-weight: normal; text-decoration: underline; color: ".concat(color, ";");
      var arrowConsoleStyle = "font: 10px Arial; padding-left: 3px; color: ".concat(color, ";");
      var additionalDataConsoleStyle = "font-weight: bold;";
      console.groupCollapsed("%c".concat(this.getTimestamp(), " ").concat(message, " %cInfo%c\u25BE"), messageConsoleStyle, infoButtonConsoleStyle, arrowConsoleStyle);

      if (data && _typeof(data) === 'object' && !(data instanceof Array)) {
        for (var key in data) {
          console.log("%c".concat(key, ":\n"), additionalDataConsoleStyle, data[key], '\n');
        }
      } else {
        console.log('%c\nData:\n', additionalDataConsoleStyle, data);
      }

      console.log('%c\nStacktrace:', additionalDataConsoleStyle);
      console.trace();
      console.groupEnd();
    }
  }]);

  return Logger;
}();

exports.Logger = Logger;
},{"@sentry/browser":"cUe8"}],"zWqG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FONTS_EXTRACTED = exports.IMAGE_PREVIEW_CLOSE = exports.IMAGE_PREVIEW_OPEN = exports.TEXTAREA_VERTICAL_RESIZE = exports.REPLY_MESSAGE = exports.SCREENSHOT_REQUEST_ERROR = exports.SCREENSHOT_REQUEST_SUCCESS = exports.WIDGET_DATA_SET = exports.WIDGET_NAVIGATE_TO = exports.WIDGET_MUTE_TOGGLE = exports.WIDGET_POPUP_TOGGLE = exports.WIDGET_IFRAME_READY = void 0;
exports.WIDGET_IFRAME_READY = 'WIDGET_IFRAME_READY'; // export const WIDGET_RENDERED = 'WIDGET_RENDERED';

exports.WIDGET_POPUP_TOGGLE = 'WIDGET_POPUP_TOGGLE';
exports.WIDGET_MUTE_TOGGLE = 'WIDGET_MUTE_TOGGLE';
exports.WIDGET_NAVIGATE_TO = 'WIDGET_NAVIGATE_TO';
exports.WIDGET_DATA_SET = 'WIDGET_DATA_SET';
exports.SCREENSHOT_REQUEST_SUCCESS = 'SCREENSHOT_REQUEST_SUCCESS';
exports.SCREENSHOT_REQUEST_ERROR = 'SCREENSHOT_REQUEST_ERROR';
exports.REPLY_MESSAGE = 'REPLY_MESSAGE';
exports.TEXTAREA_VERTICAL_RESIZE = 'TEXTAREA_VERTICAL_RESIZE';
exports.IMAGE_PREVIEW_OPEN = 'IMAGE_PREVIEW_OPEN';
exports.IMAGE_PREVIEW_CLOSE = 'IMAGE_PREVIEW_CLOSE';
exports.FONTS_EXTRACTED = 'PARENT_WINDOW_FONTS_EXTRACTED';
},{}],"CLsL":[function(require,module,exports) {
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScreenshotCompatibilityFallback = exports.ScreenshotTaker = void 0;

var utilsCommon_1 = require("../utilsCommon");

var ElixirChatWidgetEventTypes_1 = require("../widget/ElixirChatWidgetEventTypes");

var ScreenshotTaker =
/*#__PURE__*/
function () {
  function ScreenshotTaker(_ref) {
    var _this = this;

    var elixirChat = _ref.elixirChat;

    _classCallCheck(this, ScreenshotTaker);

    this.mediaOptions = {
      video: {
        width: screen.width * window.devicePixelRatio,
        height: screen.height * window.devicePixelRatio
      }
    };
    this.width = 0;
    this.height = 0;

    this.takeScreenshot = function () {
      var triggerEvent = _this.elixirChat.triggerEvent;
      return new Promise(function (resolve, reject) {
        _this.getMediaStream().then(function (stream) {
          _this.stream = stream;
          _this.video.srcObject = _this.stream;

          _this.video.oncanplay = function () {
            _this.setVideoCanvasSize();

            setTimeout(function () {
              var screenshot = _this.captureVideoFrame();

              _this.stopMediaStream();

              triggerEvent(ElixirChatWidgetEventTypes_1.SCREENSHOT_REQUEST_SUCCESS, screenshot);
              resolve(screenshot);
            }, 500);
          };

          _this.video.play();
        }).catch(function (error) {
          triggerEvent(ElixirChatWidgetEventTypes_1.SCREENSHOT_REQUEST_ERROR, error);
          reject(error);
        });
      });
    };

    this.elixirChat = elixirChat;
    this.initialize();
  }

  _createClass(ScreenshotTaker, [{
    key: "initialize",
    value: function initialize() {
      this.width = screen.width * window.devicePixelRatio;
      this.canvas = document.createElement('canvas');
      this.video = document.createElement('video');
    }
  }, {
    key: "setVideoCanvasSize",
    value: function setVideoCanvasSize() {
      var video = this.video,
          canvas = this.canvas,
          width = this.width;
      this.height = video.videoHeight / (video.videoWidth / width);
      video.width = width;
      video.height = this.height;
      canvas.width = width;
      canvas.height = this.height;
    }
  }, {
    key: "captureVideoFrame",
    value: function captureVideoFrame() {
      var canvas = this.canvas,
          width = this.width,
          height = this.height,
          video = this.video;
      var context = canvas.getContext('2d');
      context.drawImage(video, 0, 0, width, height);
      var dataUrl = canvas.toDataURL('image/png');
      var file = this.base64ToFile(dataUrl);
      return {
        dataUrl: dataUrl,
        file: file
      };
    }
  }, {
    key: "stopMediaStream",
    value: function stopMediaStream() {
      this.stream.getTracks()[0].stop();
    }
  }, {
    key: "getMediaStream",
    value: function getMediaStream() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        try {
          var mediaDevices = navigator.mediaDevices;
          mediaDevices.getDisplayMedia(_this2.mediaOptions).then(resolve).catch(reject);
        } catch (e) {
          reject({
            message: 'MediaDevices.getDisplayMedia is not supported in this browser'
          });
        }
      });
    }
  }, {
    key: "base64ToFile",
    value: function base64ToFile(dataUrl) {
      var blobBin = atob(dataUrl.split(',')[1]);
      var blobArray = [];

      for (var i = 0; i < blobBin.length; i++) {
        blobArray.push(blobBin.charCodeAt(i));
      }

      var blob = new Blob([new Uint8Array(blobArray)]);
      var fileName = "Screenshot ".concat(new Date().toLocaleString(), ".png");
      return new File([blob], fileName, {
        type: 'image/png'
      });
    }
  }]);

  return ScreenshotTaker;
}();

exports.ScreenshotTaker = ScreenshotTaker;

function getScreenshotCompatibilityFallback() {
  var getDisplayMedia;

  try {
    getDisplayMedia = navigator.mediaDevices.getDisplayMedia;
  } catch (e) {}

  if (getDisplayMedia) {
    return null;
  } else {
    var platform = utilsCommon_1.detectPlatform();

    if (platform.isMac) {
      return {
        pressKey: 'Cmd+Control+Shift+3'
      };
    } else if (platform.isWindows) {
      return {
        pressKey: 'PrtSc',
        pressKeySecondary: 'Fn+PrtSc'
      };
    } else {
      return {
        pressKey: null
      };
    }
  }
}

exports.getScreenshotCompatibilityFallback = getScreenshotCompatibilityFallback;
},{"../utilsCommon":"EjGt","../widget/ElixirChatWidgetEventTypes":"zWqG"}],"XFqm":[function(require,module,exports) {
var define;
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Phoenix=t():e.Phoenix=t()}(this,(function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){(function(t){e.exports=t.Phoenix=n(2)}).call(this,n(1))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function i(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||s(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=e[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return n}(e,t)||s(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){if(e){if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(e,t):void 0}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function h(e,t,n){return t&&u(e.prototype,t),n&&u(e,n),e}n.r(t),n.d(t,"Channel",(function(){return A})),n.d(t,"Serializer",(function(){return M})),n.d(t,"Socket",(function(){return J})),n.d(t,"LongPoll",(function(){return H})),n.d(t,"Ajax",(function(){return D})),n.d(t,"Presence",(function(){return B}));var l="undefined"!=typeof self?self:null,f="undefined"!=typeof window?window:null,d=l||f||void 0,p=0,v=1,y=2,m=3,g="closed",k="errored",b="joined",j="joining",C="leaving",R="phx_close",S="phx_error",T="phx_join",w="phx_reply",E="phx_leave",x=[R,S,T,w,E],O="longpoll",P="websocket",L=function(e){if("function"==typeof e)return e;return function(){return e}},_=function(){function e(t,n,i,o){c(this,e),this.channel=t,this.event=n,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=o,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}return h(e,[{key:"resend",value:function(e){this.timeout=e,this.reset(),this.send()}},{key:"send",value:function(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}},{key:"receive",value:function(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}},{key:"reset",value:function(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}},{key:"matchReceive",value:function(e){var t=e.status,n=e.response;e.ref;this.recHooks.filter((function(e){return e.status===t})).forEach((function(e){return e.callback(n)}))}},{key:"cancelRefEvent",value:function(){this.refEvent&&this.channel.off(this.refEvent)}},{key:"cancelTimeout",value:function(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}},{key:"startTimeout",value:function(){var e=this;this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,(function(t){e.cancelRefEvent(),e.cancelTimeout(),e.receivedResp=t,e.matchReceive(t)})),this.timeoutTimer=setTimeout((function(){e.trigger("timeout",{})}),this.timeout)}},{key:"hasReceived",value:function(e){return this.receivedResp&&this.receivedResp.status===e}},{key:"trigger",value:function(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}}]),e}(),A=function(){function e(t,n,i){var o=this;c(this,e),this.state=g,this.topic=t,this.params=L(n||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new _(this,T,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new I((function(){o.socket.isConnected()&&o.rejoin()}),this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError((function(){return o.rejoinTimer.reset()}))),this.stateChangeRefs.push(this.socket.onOpen((function(){o.rejoinTimer.reset(),o.isErrored()&&o.rejoin()}))),this.joinPush.receive("ok",(function(){o.state=b,o.rejoinTimer.reset(),o.pushBuffer.forEach((function(e){return e.send()})),o.pushBuffer=[]})),this.joinPush.receive("error",(function(){o.state=k,o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()})),this.onClose((function(){o.rejoinTimer.reset(),o.socket.hasLogger()&&o.socket.log("channel","close ".concat(o.topic," ").concat(o.joinRef())),o.state=g,o.socket.remove(o)})),this.onError((function(e){o.socket.hasLogger()&&o.socket.log("channel","error ".concat(o.topic),e),o.isJoining()&&o.joinPush.reset(),o.state=k,o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()})),this.joinPush.receive("timeout",(function(){o.socket.hasLogger()&&o.socket.log("channel","timeout ".concat(o.topic," (").concat(o.joinRef(),")"),o.joinPush.timeout),new _(o,E,L({}),o.timeout).send(),o.state=k,o.joinPush.reset(),o.socket.isConnected()&&o.rejoinTimer.scheduleTimeout()})),this.on(w,(function(e,t){o.trigger(o.replyEventName(t),e)}))}return h(e,[{key:"join",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}},{key:"onClose",value:function(e){this.on(R,e)}},{key:"onError",value:function(e){return this.on(S,(function(t){return e(t)}))}},{key:"on",value:function(e,t){var n=this.bindingRef++;return this.bindings.push({event:e,ref:n,callback:t}),n}},{key:"off",value:function(e,t){this.bindings=this.bindings.filter((function(n){return!(n.event===e&&(void 0===t||t===n.ref))}))}},{key:"canPush",value:function(){return this.socket.isConnected()&&this.isJoined()}},{key:"push",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.timeout;if(!this.joinedOnce)throw new Error("tried to push '".concat(e,"' to '").concat(this.topic,"' before joining. Use channel.join() before pushing events"));var i=new _(this,e,(function(){return t}),n);return this.canPush()?i.send():(i.startTimeout(),this.pushBuffer.push(i)),i}},{key:"leave",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=C;var n=function(){e.socket.hasLogger()&&e.socket.log("channel","leave ".concat(e.topic)),e.trigger(R,"leave")},i=new _(this,E,L({}),t);return i.receive("ok",(function(){return n()})).receive("timeout",(function(){return n()})),i.send(),this.canPush()||i.trigger("ok",{}),i}},{key:"onMessage",value:function(e,t,n){return t}},{key:"isLifecycleEvent",value:function(e){return x.indexOf(e)>=0}},{key:"isMember",value:function(e,t,n,i){return this.topic===e&&(!i||i===this.joinRef()||!this.isLifecycleEvent(t)||(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:n,joinRef:i}),!1))}},{key:"joinRef",value:function(){return this.joinPush.ref}},{key:"rejoin",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=j,this.joinPush.resend(e))}},{key:"trigger",value:function(e,t,n,i){var o=this.onMessage(e,t,n,i);if(t&&!o)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");for(var r=this.bindings.filter((function(t){return t.event===e})),s=0;s<r.length;s++){r[s].callback(o,n,i||this.joinRef())}}},{key:"replyEventName",value:function(e){return"chan_reply_".concat(e)}},{key:"isClosed",value:function(){return this.state===g}},{key:"isErrored",value:function(){return this.state===k}},{key:"isJoined",value:function(){return this.state===b}},{key:"isJoining",value:function(){return this.state===j}},{key:"isLeaving",value:function(){return this.state===C}}]),e}(),M={encode:function(e,t){var n=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(n))},decode:function(e,t){var n=r(JSON.parse(e),5);return t({join_ref:n[0],ref:n[1],topic:n[2],event:n[3],payload:n[4]})}},J=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};c(this,e),this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=i.timeout||1e4,this.transport=i.transport||d.WebSocket||H,this.defaultEncoder=M.encode,this.defaultDecoder=M.decode,this.closeWasClean=!1,this.unloaded=!1,this.binaryType=i.binaryType||"arraybuffer",this.transport!==H?(this.encode=i.encode||this.defaultEncoder,this.decode=i.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder),f&&f.addEventListener&&f.addEventListener("unload",(function(e){n.conn&&(n.unloaded=!0,n.abnormalClose("unloaded"))})),this.heartbeatIntervalMs=i.heartbeatIntervalMs||3e4,this.rejoinAfterMs=function(e){return i.rejoinAfterMs?i.rejoinAfterMs(e):[1e3,2e3,5e3][e-1]||1e4},this.reconnectAfterMs=function(e){return n.unloaded?100:i.reconnectAfterMs?i.reconnectAfterMs(e):[10,50,100,150,200,250,500,1e3,2e3][e-1]||5e3},this.logger=i.logger||null,this.longpollerTimeout=i.longpollerTimeout||2e4,this.params=L(i.params||{}),this.endPoint="".concat(t,"/").concat(P),this.vsn=i.vsn||"2.0.0",this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new I((function(){n.teardown((function(){return n.connect()}))}),this.reconnectAfterMs)}return h(e,[{key:"protocol",value:function(){return location.protocol.match(/^https/)?"wss":"ws"}},{key:"endPointURL",value:function(){var e=D.appendParams(D.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return"/"!==e.charAt(0)?e:"/"===e.charAt(1)?"".concat(this.protocol(),":").concat(e):"".concat(this.protocol(),"://").concat(location.host).concat(e)}},{key:"disconnect",value:function(e,t,n){this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,n)}},{key:"connect",value:function(e){var t=this;e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=L(e)),this.conn||(this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=function(){return t.onConnOpen()},this.conn.onerror=function(e){return t.onConnError(e)},this.conn.onmessage=function(e){return t.onConnMessage(e)},this.conn.onclose=function(e){return t.onConnClose(e)})}},{key:"log",value:function(e,t,n){this.logger(e,t,n)}},{key:"hasLogger",value:function(){return null!==this.logger}},{key:"onOpen",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}},{key:"onClose",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}},{key:"onError",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}},{key:"onMessage",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}},{key:"onConnOpen",value:function(){this.hasLogger()&&this.log("transport","connected to ".concat(this.endPointURL())),this.unloaded=!1,this.closeWasClean=!1,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach((function(e){return(0,r(e,2)[1])()}))}},{key:"resetHeartbeat",value:function(){var e=this;this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval((function(){return e.sendHeartbeat()}),this.heartbeatIntervalMs))}},{key:"teardown",value:function(e,t,n){var i=this;if(!this.conn)return e&&e();this.waitForBufferDone((function(){i.conn&&(t?i.conn.close(t,n||""):i.conn.close()),i.waitForSocketClosed((function(){i.conn&&(i.conn.onclose=function(){},i.conn=null),e&&e()}))}))}},{key:"waitForBufferDone",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;5!==n&&this.conn&&this.conn.bufferedAmount?setTimeout((function(){t.waitForBufferDone(e,n+1)}),150*n):e()}},{key:"waitForSocketClosed",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;5!==n&&this.conn&&this.conn.readyState!==m?setTimeout((function(){t.waitForSocketClosed(e,n+1)}),150*n):e()}},{key:"onConnClose",value:function(e){this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),clearInterval(this.heartbeatTimer),this.closeWasClean||this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach((function(t){return(0,r(t,2)[1])(e)}))}},{key:"onConnError",value:function(e){this.hasLogger()&&this.log("transport",e),this.triggerChanError(),this.stateChangeCallbacks.error.forEach((function(t){return(0,r(t,2)[1])(e)}))}},{key:"triggerChanError",value:function(){this.channels.forEach((function(e){e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(S)}))}},{key:"connectionState",value:function(){switch(this.conn&&this.conn.readyState){case p:return"connecting";case v:return"open";case y:return"closing";default:return"closed"}}},{key:"isConnected",value:function(){return"open"===this.connectionState()}},{key:"remove",value:function(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter((function(t){return t.joinRef()!==e.joinRef()}))}},{key:"off",value:function(e){for(var t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter((function(t){var n=r(t,1)[0];return-1===e.indexOf(n)}))}},{key:"channel",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new A(e,t,this);return this.channels.push(n),n}},{key:"push",value:function(e){var t=this;if(this.hasLogger()){var n=e.topic,i=e.event,o=e.payload,r=e.ref,s=e.join_ref;this.log("push","".concat(n," ").concat(i," (").concat(s,", ").concat(r,")"),o)}this.isConnected()?this.encode(e,(function(e){return t.conn.send(e)})):this.sendBuffer.push((function(){return t.encode(e,(function(e){return t.conn.send(e)}))}))}},{key:"makeRef",value:function(){var e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}},{key:"sendHeartbeat",value:function(){if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),void this.abnormalClose("heartbeat timeout");this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef})}}},{key:"abnormalClose",value:function(e){this.closeWasClean=!1,this.conn.close(1e3,e)}},{key:"flushSendBuffer",value:function(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach((function(e){return e()})),this.sendBuffer=[])}},{key:"onConnMessage",value:function(e){var t=this;this.decode(e.data,(function(e){var n=e.topic,i=e.event,o=e.payload,s=e.ref,a=e.join_ref;s&&s===t.pendingHeartbeatRef&&(t.pendingHeartbeatRef=null),t.hasLogger()&&t.log("receive","".concat(o.status||""," ").concat(n," ").concat(i," ").concat(s&&"("+s+")"||""),o);for(var c=0;c<t.channels.length;c++){var u=t.channels[c];u.isMember(n,i,o,a)&&u.trigger(i,o,s,a)}for(var h=0;h<t.stateChangeCallbacks.message.length;h++){(0,r(t.stateChangeCallbacks.message[h],2)[1])(e)}}))}},{key:"leaveOpenTopic",value:function(e){var t=this.channels.find((function(t){return t.topic===e&&(t.isJoined()||t.isJoining())}));t&&(this.hasLogger()&&this.log("transport",'leaving duplicate topic "'.concat(e,'"')),t.leave())}}]),e}(),H=function(){function e(t){c(this,e),this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(t),this.readyState=p,this.poll()}return h(e,[{key:"normalizeEndpoint",value:function(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+P),"$1/"+O)}},{key:"endpointURL",value:function(){return D.appendParams(this.pollEndpoint,{token:this.token})}},{key:"closeAndRetry",value:function(){this.close(),this.readyState=p}},{key:"ontimeout",value:function(){this.onerror("timeout"),this.closeAndRetry()}},{key:"poll",value:function(){var e=this;this.readyState!==v&&this.readyState!==p||D.request("GET",this.endpointURL(),"application/json",null,this.timeout,this.ontimeout.bind(this),(function(t){if(t){var n=t.status,i=t.token,o=t.messages;e.token=i}else n=0;switch(n){case 200:o.forEach((function(t){return e.onmessage({data:t})})),e.poll();break;case 204:e.poll();break;case 410:e.readyState=v,e.onopen(),e.poll();break;case 403:e.onerror(),e.close();break;case 0:case 500:e.onerror(),e.closeAndRetry();break;default:throw new Error("unhandled poll status ".concat(n))}}))}},{key:"send",value:function(e){var t=this;D.request("POST",this.endpointURL(),"application/json",e,this.timeout,this.onerror.bind(this,"timeout"),(function(e){e&&200===e.status||(t.onerror(e&&e.status),t.closeAndRetry())}))}},{key:"close",value:function(e,t){this.readyState=m,this.onclose()}}]),e}(),D=function(){function e(){c(this,e)}return h(e,null,[{key:"request",value:function(e,t,n,i,o,r,s){if(d.XDomainRequest){var a=new XDomainRequest;this.xdomainRequest(a,e,t,i,o,r,s)}else{var c=new d.XMLHttpRequest;this.xhrRequest(c,e,t,n,i,o,r,s)}}},{key:"xdomainRequest",value:function(e,t,n,i,o,r,s){var a=this;e.timeout=o,e.open(t,n),e.onload=function(){var t=a.parseJSON(e.responseText);s&&s(t)},r&&(e.ontimeout=r),e.onprogress=function(){},e.send(i)}},{key:"xhrRequest",value:function(e,t,n,i,o,r,s,a){var c=this;e.open(t,n,!0),e.timeout=r,e.setRequestHeader("Content-Type",i),e.onerror=function(){a&&a(null)},e.onreadystatechange=function(){if(e.readyState===c.states.complete&&a){var t=c.parseJSON(e.responseText);a(t)}},s&&(e.ontimeout=s),e.send(o)}},{key:"parseJSON",value:function(e){if(!e||""===e)return null;try{return JSON.parse(e)}catch(t){return console&&console.log("failed to parse JSON response",e),null}}},{key:"serialize",value:function(e,t){var n=[];for(var i in e)if(e.hasOwnProperty(i)){var r=t?"".concat(t,"[").concat(i,"]"):i,s=e[i];"object"===o(s)?n.push(this.serialize(s,r)):n.push(encodeURIComponent(r)+"="+encodeURIComponent(s))}return n.join("&")}},{key:"appendParams",value:function(e,t){if(0===Object.keys(t).length)return e;var n=e.match(/\?/)?"&":"?";return"".concat(e).concat(n).concat(this.serialize(t))}}]),e}();D.states={complete:4};var B=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};c(this,e);var o=i.events||{state:"presence_state",diff:"presence_diff"};this.state={},this.pendingDiffs=[],this.channel=t,this.joinRef=null,this.caller={onJoin:function(){},onLeave:function(){},onSync:function(){}},this.channel.on(o.state,(function(t){var i=n.caller,o=i.onJoin,r=i.onLeave,s=i.onSync;n.joinRef=n.channel.joinRef(),n.state=e.syncState(n.state,t,o,r),n.pendingDiffs.forEach((function(t){n.state=e.syncDiff(n.state,t,o,r)})),n.pendingDiffs=[],s()})),this.channel.on(o.diff,(function(t){var i=n.caller,o=i.onJoin,r=i.onLeave,s=i.onSync;n.inPendingSyncState()?n.pendingDiffs.push(t):(n.state=e.syncDiff(n.state,t,o,r),s())}))}return h(e,[{key:"onJoin",value:function(e){this.caller.onJoin=e}},{key:"onLeave",value:function(e){this.caller.onLeave=e}},{key:"onSync",value:function(e){this.caller.onSync=e}},{key:"list",value:function(t){return e.list(this.state,t)}},{key:"inPendingSyncState",value:function(){return!this.joinRef||this.joinRef!==this.channel.joinRef()}}],[{key:"syncState",value:function(e,t,n,i){var o=this,r=this.clone(e),s={},a={};return this.map(r,(function(e,n){t[e]||(a[e]=n)})),this.map(t,(function(e,t){var n=r[e];if(n){var i=t.metas.map((function(e){return e.phx_ref})),c=n.metas.map((function(e){return e.phx_ref})),u=t.metas.filter((function(e){return c.indexOf(e.phx_ref)<0})),h=n.metas.filter((function(e){return i.indexOf(e.phx_ref)<0}));u.length>0&&(s[e]=t,s[e].metas=u),h.length>0&&(a[e]=o.clone(n),a[e].metas=h)}else s[e]=t})),this.syncDiff(r,{joins:s,leaves:a},n,i)}},{key:"syncDiff",value:function(e,t,n,o){var r=t.joins,s=t.leaves,a=this.clone(e);return n||(n=function(){}),o||(o=function(){}),this.map(r,(function(e,t){var o=a[e];if(a[e]=t,o){var r,s=a[e].metas.map((function(e){return e.phx_ref})),c=o.metas.filter((function(e){return s.indexOf(e.phx_ref)<0}));(r=a[e].metas).unshift.apply(r,i(c))}n(e,o,t)})),this.map(s,(function(e,t){var n=a[e];if(n){var i=t.metas.map((function(e){return e.phx_ref}));n.metas=n.metas.filter((function(e){return i.indexOf(e.phx_ref)<0})),o(e,n,t),0===n.metas.length&&delete a[e]}})),a}},{key:"list",value:function(e,t){return t||(t=function(e,t){return t}),this.map(e,(function(e,n){return t(e,n)}))}},{key:"map",value:function(e,t){return Object.getOwnPropertyNames(e).map((function(n){return t(n,e[n])}))}},{key:"clone",value:function(e){return JSON.parse(JSON.stringify(e))}}]),e}(),I=function(){function e(t,n){c(this,e),this.callback=t,this.timerCalc=n,this.timer=null,this.tries=0}return h(e,[{key:"reset",value:function(){this.tries=0,clearTimeout(this.timer)}},{key:"scheduleTimeout",value:function(){var e=this;clearTimeout(this.timer),this.timer=setTimeout((function(){e.tries=e.tries+1,e.callback()}),this.timerCalc(this.tries+1))}}]),e}()}])}));
},{}],"Cteb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ONLINE_STATUS_CHANGE = exports.UPDATE_MESSAGES_CHANGE = exports.LAST_READ_MESSAGE_CHANGE = exports.UNREAD_REPLIES_CHANGE = exports.UNREAD_MESSAGES_CHANGE = exports.TYPING_STATUS_SUBSCRIBE_ERROR = exports.TYPING_STATUS_SUBSCRIBE_SUCCESS = exports.TYPING_STATUS_CHANGE = exports.MESSAGES_RECEIVE = exports.MESSAGES_CHANGE = exports.JOIN_ROOM_ERROR = exports.JOIN_ROOM_SUCCESS = void 0;
exports.JOIN_ROOM_SUCCESS = 'JOIN_ROOM_SUCCESS';
exports.JOIN_ROOM_ERROR = 'JOIN_ROOM_ERROR';
exports.MESSAGES_CHANGE = 'MESSAGES_CHANGE';
exports.MESSAGES_RECEIVE = 'MESSAGES_RECEIVE'; ///
// export const MESSAGES_HISTORY_SET = 'MESSAGES_HISTORY_SET';
// export const MESSAGES_HISTORY_APPEND_ONE = 'MESSAGES_HISTORY_APPEND_ONE';
//
// export const MESSAGES_HISTORY_PREPEND_MANY = 'MESSAGES_HISTORY_PREPEND_MANY';
// export const MESSAGES_HISTORY_CHANGE_MANY = 'MESSAGES_HISTORY_CHANGE_MANY';
// export const MESSAGES_FETCH_HISTORY_INITIAL_SUCCESS = 'MESSAGES_FETCH_HISTORY_INITIAL_SUCCESS';
// export const MESSAGES_FETCH_HISTORY_INITIAL_ERROR = 'MESSAGES_FETCH_HISTORY_INITIAL_ERROR';
///

exports.TYPING_STATUS_CHANGE = 'TYPING_STATUS_CHANGE';
exports.TYPING_STATUS_SUBSCRIBE_SUCCESS = 'TYPING_STATUS_SUBSCRIBE_SUCCESS';
exports.TYPING_STATUS_SUBSCRIBE_ERROR = 'TYPING_STATUS_SUBSCRIBE_ERROR';
exports.UNREAD_MESSAGES_CHANGE = 'UNREAD_MESSAGES_CHANGE';
exports.UNREAD_REPLIES_CHANGE = 'UNREAD_REPLIES_CHANGE';
exports.LAST_READ_MESSAGE_CHANGE = 'LAST_READ_MESSAGE_CHANGE';
exports.UPDATE_MESSAGES_CHANGE = 'UPDATE_MESSAGES_CHANGE';
exports.ONLINE_STATUS_CHANGE = 'ONLINE_STATUS_CHANGE';
},{}],"QERd":[function(require,module,exports) {
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypingStatusSubscription = void 0;

var Phoenix = __importStar(require("phoenix"));

var ElixirChatEventTypes_1 = require("./ElixirChatEventTypes");

var utilsCommon_1 = require("../utilsCommon");

var TypingStatusSubscription =
/*#__PURE__*/
function () {
  function TypingStatusSubscription(_ref) {
    var _this = this;

    var elixirChat = _ref.elixirChat;

    _classCallCheck(this, TypingStatusSubscription);

    this.currentlyTypingUsers = [];
    this.typingTimeouts = {};
    this.typedText = '';

    this.subscribe = function () {
      _this.initializeSocket();
    };

    this.unsubscribe = function () {
      var debug = _this.elixirChat.debug;
      utilsCommon_1.logEvent(debug, 'Unsubscribing from typing status change...');

      _this.channel.leave();

      _this.channel = null;
      _this.phoenixSocket = null;
      _this.currentlyTypingUsers = [];
      Object.values(_this.typingTimeouts).forEach(function (timeout) {
        return clearTimeout(timeout);
      });
      _this.typingTimeouts = [];
      _this.typedText = '';
    };

    this.dispatchTypedText = function (typedText) {
      var dispatchForcefully = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (_this.channel) {
        var text = typeof typedText === 'string' ? typedText.trim() : '';
        var typing = Boolean(text);

        if (_this.typedText !== text || dispatchForcefully) {
          _this.typedText = text;

          _this.channel.push('typing', {
            typing: typing,
            text: text
          });
        }
      }
    };

    this.onPresenceDiff = function (diff) {
      var elixirChatClientId = _this.elixirChat.elixirChatClientId; // TODO: fix (joinRoomData)

      var userId;
      var userData;
      var userMeta;

      try {
        userId = Object.keys(diff.joins)[0];
        userData = Object.values(diff.joins)[0];
        userMeta = userData.metas[0];
      } catch (e) {}

      if (!userMeta || userId === elixirChatClientId) {
        return;
      }

      var currentlyTypingUserIds = _this.currentlyTypingUsers.map(function (user) {
        return user.id;
      });

      var userFullName = userData.first_name + ' ' + userData.last_name;
      var serializedUserData = {
        id: userId,
        firstName: userData.first_name,
        lastName: userData.last_name,
        avatar: {
          url: userData.avatar
        }
      };

      if (userMeta.typing) {
        _this.removeFromCurrentlyTypingUsersAfterTimeout(userId, userFullName);
      }

      if (userMeta.typing && !currentlyTypingUserIds.includes(userId)) {
        _this.triggerOnChangeEvent([].concat(_toConsumableArray(_this.currentlyTypingUsers), [serializedUserData]));
      } else if (!userMeta.typing && currentlyTypingUserIds.includes(userId)) {
        _this.triggerOnChangeEvent(_this.currentlyTypingUsers.filter(function (user) {
          return user.id !== userId;
        }));
      }
    };

    this.elixirChat = elixirChat;
  }

  _createClass(TypingStatusSubscription, [{
    key: "initializeSocket",
    value: function initializeSocket() {
      var _this2 = this;

      var _this$elixirChat = this.elixirChat,
          triggerEvent = _this$elixirChat.triggerEvent,
          debug = _this$elixirChat.debug,
          socketUrl = _this$elixirChat.socketUrl,
          authToken = _this$elixirChat.authToken;
      this.phoenixSocket = new Phoenix.Socket(socketUrl, {
        params: {
          token: authToken
        }
      });
      this.phoenixSocket.onError(function (error) {
        var message = 'Failed to subscribe to typing status change: could not open connection via Phoenix.Socket';
        utilsCommon_1.logEvent(debug, message, error, 'error');
        triggerEvent(ElixirChatEventTypes_1.TYPING_STATUS_SUBSCRIBE_ERROR, error);
      });
      this.phoenixSocket.onOpen(function () {
        _this2.joinChannel();
      });
      this.phoenixSocket.connect();
    }
  }, {
    key: "joinChannel",
    value: function joinChannel() {
      var _this3 = this;

      var _this$elixirChat2 = this.elixirChat,
          triggerEvent = _this$elixirChat2.triggerEvent,
          debug = _this$elixirChat2.debug,
          elixirChatRoomId = _this$elixirChat2.elixirChatRoomId; // TODO: fix (joinRoomData)

      if (this.channel) {
        this.channel.leave();
      }

      this.channel = this.phoenixSocket.channel('public:room:' + elixirChatRoomId, {});
      this.channel.join().receive('error', function (error) {
        utilsCommon_1.logEvent(debug, 'Failed to subscribe to typing status change: channel received error', error, 'error');
        triggerEvent(ElixirChatEventTypes_1.TYPING_STATUS_SUBSCRIBE_ERROR, error);
      }).receive('timeout', function () {
        utilsCommon_1.logEvent(debug, 'Failed to subscribe to typing status change: channel received timeout', null, 'error');
        triggerEvent(ElixirChatEventTypes_1.TYPING_STATUS_SUBSCRIBE_ERROR);
      }).receive('ok', function (data) {
        _this3.channel.on('presence_diff', _this3.onPresenceDiff);

        _this3.dispatchTypedText(_this3.typedText, true);

        utilsCommon_1.logEvent(debug, 'Successfully subscribed to typing status change', data);
        setTimeout(function () {
          return triggerEvent(ElixirChatEventTypes_1.TYPING_STATUS_SUBSCRIBE_SUCCESS, data);
        });
      });
    }
  }, {
    key: "removeFromCurrentlyTypingUsersAfterTimeout",
    value: function removeFromCurrentlyTypingUsersAfterTimeout(userId) {
      var _this4 = this;

      clearTimeout(this.typingTimeouts[userId]);
      this.typingTimeouts[userId] = setTimeout(function () {
        _this4.triggerOnChangeEvent(_this4.currentlyTypingUsers.filter(function (user) {
          return user.id !== userId;
        }));
      }, 2000);
    }
  }, {
    key: "triggerOnChangeEvent",
    value: function triggerOnChangeEvent(updatedTypingUsers) {
      var _this$elixirChat3 = this.elixirChat,
          triggerEvent = _this$elixirChat3.triggerEvent,
          debug = _this$elixirChat3.debug;

      if (updatedTypingUsers.length || this.currentlyTypingUsers.length) {
        var didStopTyping = this.currentlyTypingUsers.length > updatedTypingUsers.length;
        this.currentlyTypingUsers = updatedTypingUsers;
        utilsCommon_1.logEvent(debug, "Some users ".concat(didStopTyping ? 'stopped' : 'started', " typing"), this.currentlyTypingUsers);
        triggerEvent(ElixirChatEventTypes_1.TYPING_STATUS_CHANGE, this.currentlyTypingUsers);
      }
    }
  }]);

  return TypingStatusSubscription;
}();

exports.TypingStatusSubscription = TypingStatusSubscription;
},{"phoenix":"XFqm","./ElixirChatEventTypes":"Cteb","../utilsCommon":"EjGt"}],"ZEl5":[function(require,module,exports) {
"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  fragment fragmentMessage on Message {\n    id\n    text\n    timestamp\n    isUnread\n    isSystem\n    \n    ... on ManualMessage {\n      tempId\n      isDeleted\n      mustOpenWidget\n      sender { ...fragmentUser }\n      attachments { ...fragmentFile }\n      mentions {\n        value\n        client { ...fragmentUser }\n      }\n      responseToMessage {\n        id\n        text\n        isDeleted\n        sender { ...fragmentUser }\n      }\n    }\n    \n    ... on ScreenshotRequestedMessage {\n      __typename\n      sender { ...fragmentUser }\n    }\n\n    ... on NobodyWorkingMessage {\n      __typename\n      workHoursStartAt\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeMessage = exports.fragmentMessage = void 0;

var GraphQLClient_1 = require("../GraphQLClient");

var serializeUser_1 = require("./serializeUser");

var serializeFile_1 = require("./serializeFile");

var utilsCommon_1 = require("../../utilsCommon");

exports.fragmentMessage = GraphQLClient_1.insertGraphQlFragments(GraphQLClient_1.gql(_templateObject()), {
  fragmentUser: serializeUser_1.fragmentUser,
  fragmentFile: serializeFile_1.fragmentFile
});

function serializeMessage(data, elixirChat) {
  var _ref = data || {},
      sender = _ref.sender,
      responseToMessage = _ref.responseToMessage,
      attachments = _ref.attachments,
      mentions = _ref.mentions;

  return Object.assign(Object.assign({}, utilsCommon_1.extractSerializedData(data, {
    id: null,
    tempId: null,
    cursor: null,
    text: '',
    timestamp: '',
    mustOpenWidget: false,
    submissionErrorCode: null,
    isSubmitting: false,
    isUnread: false,
    isSystem: false,
    isDeleted: false
  })), {
    sender: serializeUser_1.serializeUser(sender, elixirChat),
    attachments: (attachments || []).map(function (attachment) {
      return serializeFile_1.serializeFile(attachment, elixirChat);
    }),
    responseToMessage: Object.assign(Object.assign({}, utilsCommon_1.extractSerializedData(responseToMessage, {
      id: null,
      text: '',
      isDeleted: false
    })), {
      sender: serializeUser_1.serializeUser(responseToMessage === null || responseToMessage === void 0 ? void 0 : responseToMessage.sender, elixirChat)
    }),
    mentions: (mentions || []).map(function (mention) {
      return {
        client: serializeUser_1.serializeUser(mention.client, elixirChat),
        value: mention.value
      };
    }),
    systemData: {
      type: (data === null || data === void 0 ? void 0 : data.__typename) || null,
      workHoursStartAt: (data === null || data === void 0 ? void 0 : data.workHoursStartAt) || null
    }
  });
}

exports.serializeMessage = serializeMessage;
},{"../GraphQLClient":"fvSB","./serializeUser":"lqyB","./serializeFile":"sQAQ","../../utilsCommon":"EjGt"}],"AgKM":[function(require,module,exports) {
"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    subscription {\n      updateMessage {\n        ...fragmentMessage\n      }\n    }\n  "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpdateMessageSubscription = void 0;

var ElixirChatEventTypes_1 = require("./ElixirChatEventTypes");

var serializeMessage_1 = require("./serializers/serializeMessage");

var GraphQLClient_1 = require("./GraphQLClient");

var UpdateMessageSubscription = function UpdateMessageSubscription(_ref) {
  var _this = this;

  var elixirChat = _ref.elixirChat;

  _classCallCheck(this, UpdateMessageSubscription);

  this.subscriptionQuery = GraphQLClient_1.insertGraphQlFragments(GraphQLClient_1.gql(_templateObject()), {
    fragmentMessage: serializeMessage_1.fragmentMessage
  });

  this.subscribe = function () {
    var _this$elixirChat = _this.elixirChat,
        graphQLClientSocket = _this$elixirChat.graphQLClientSocket,
        triggerEvent = _this$elixirChat.triggerEvent,
        logInfo = _this$elixirChat.logInfo,
        logError = _this$elixirChat.logError;
    graphQLClientSocket.subscribe({
      query: _this.subscriptionQuery,
      onAbort: function onAbort(error) {
        logError('UpdateMessageSubscription: Failed to subscribe', {
          error: error
        });
      },
      onStart: function onStart() {
        logInfo('UpdateMessageSubscription: Subscribed');
      },
      onResult: function onResult(response) {
        var _a;

        var data = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.updateMessage;

        if (data) {
          var updatedMessage = serializeMessage_1.serializeMessage(data, _this.elixirChat);
          triggerEvent(ElixirChatEventTypes_1.UPDATE_MESSAGES_CHANGE, updatedMessage);
        }
      }
    });
  };

  this.unsubscribe = function () {
    var _this$elixirChat2 = _this.elixirChat,
        graphQLClientSocket = _this$elixirChat2.graphQLClientSocket,
        logInfo = _this$elixirChat2.logInfo;
    logInfo('UpdateMessageSubscription: Unsubscribing...');
    graphQLClientSocket.unsubscribe(_this.subscriptionQuery);
  };

  this.elixirChat = elixirChat;
};

exports.UpdateMessageSubscription = UpdateMessageSubscription;
},{"./ElixirChatEventTypes":"Cteb","./serializers/serializeMessage":"ZEl5","./GraphQLClient":"fvSB"}],"XLSb":[function(require,module,exports) {
"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    subscription {\n      updateCompanyWorking {\n        isWorking\n        workHoursStartAt\n      }\n    }\n  "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OnlineStatusSubscription = void 0;

var GraphQLClient_1 = require("./GraphQLClient");

var ElixirChatEventTypes_1 = require("./ElixirChatEventTypes");

var OnlineStatusSubscription =
/*#__PURE__*/
function () {
  function OnlineStatusSubscription(_ref) {
    var _this = this;

    var elixirChat = _ref.elixirChat;

    _classCallCheck(this, OnlineStatusSubscription);

    this.onlineStatus = {
      isOnline: false,
      workHoursStartAt: null
    };
    this.subscriptionQuery = GraphQLClient_1.gql(_templateObject());

    this.subscribe = function (params) {
      var _this$elixirChat = _this.elixirChat,
          graphQLClientSocket = _this$elixirChat.graphQLClientSocket,
          logInfo = _this$elixirChat.logInfo,
          logError = _this$elixirChat.logError;

      var _ref2 = params || {},
          isOnline = _ref2.isOnline,
          workHoursStartAt = _ref2.workHoursStartAt; // TODO: remove mock
      // this.onStatusChange({
      //   isOnline: false,
      //   workHoursStartAt: '2020-09-02T13:30:00Z',
      // });


      _this.onStatusChange({
        isOnline: isOnline,
        workHoursStartAt: workHoursStartAt
      });

      graphQLClientSocket.subscribe({
        query: _this.subscriptionQuery,
        onAbort: function onAbort(error) {
          logError('OnlineStatusSubscription: Failed to subscribe', {
            error: error
          });
        },
        onStart: function onStart() {
          logInfo('OnlineStatusSubscription: Subscribed');
        },
        onResult: function onResult(_ref3) {
          var data = _ref3.data;
          var updateCompanyWorking = data.updateCompanyWorking;

          _this.onStatusChange({
            isOnline: updateCompanyWorking === null || updateCompanyWorking === void 0 ? void 0 : updateCompanyWorking.isWorking,
            workHoursStartAt: updateCompanyWorking === null || updateCompanyWorking === void 0 ? void 0 : updateCompanyWorking.workHoursStartAt
          });
        }
      });
    };

    this.unsubscribe = function () {
      var _this$elixirChat2 = _this.elixirChat,
          graphQLClientSocket = _this$elixirChat2.graphQLClientSocket,
          logInfo = _this$elixirChat2.logInfo;
      logInfo('OnlineStatusSubscription: Unsubscribing...');
      graphQLClientSocket.unsubscribe(_this.subscriptionQuery);
    };

    this.elixirChat = elixirChat;
  }

  _createClass(OnlineStatusSubscription, [{
    key: "onStatusChange",
    value: function onStatusChange(params) {
      var triggerEvent = this.elixirChat.triggerEvent;

      var _ref4 = params || {},
          isOnline = _ref4.isOnline,
          workHoursStartAt = _ref4.workHoursStartAt;

      var serialized = {
        isOnline: Boolean(isOnline),
        workHoursStartAt: workHoursStartAt || null
      };

      if (serialized.isOnline !== this.onlineStatus.isOnline || serialized.workHoursStartAt !== this.onlineStatus.workHoursStartAt) {
        this.onlineStatus = serialized;
        triggerEvent(ElixirChatEventTypes_1.ONLINE_STATUS_CHANGE, serialized);
      }
    }
  }]);

  return OnlineStatusSubscription;
}();

exports.OnlineStatusSubscription = OnlineStatusSubscription;
},{"./GraphQLClient":"fvSB","./ElixirChatEventTypes":"Cteb"}],"xY1B":[function(require,module,exports) {
"use strict";

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    mutation ($messageId: ID!) {\n      updateLastReadMessage(messageId: $messageId) {\n        unreadMessagesCount,\n        unreadRepliesCount,\n      }\n    }\n  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    subscription {\n      updateReadMessages {\n        unreadMessagesCount\n        unreadRepliesCount\n        lastReadMessageId\n      }\n    }\n  "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnreadMessagesCounter = void 0;

var GraphQLClient_1 = require("./GraphQLClient");

var ElixirChatEventTypes_1 = require("./ElixirChatEventTypes");

var UnreadMessagesCounter =
/*#__PURE__*/
function () {
  function UnreadMessagesCounter(_ref) {
    var _this = this;

    var elixirChat = _ref.elixirChat;

    _classCallCheck(this, UnreadMessagesCounter);

    this.unreadMessagesCount = 0;
    this.unreadRepliesCount = 0;
    this.lastReadMessageId = null;
    this.subscriptionQuery = GraphQLClient_1.gql(_templateObject());
    this.setLastReadMessageQuery = GraphQLClient_1.gql(_templateObject2());

    this.subscribe = function (params) {
      // TODO: remove mock
      // this.onUnreadCountsUpdate({
      //   unreadMessagesCount: 2,
      //   unreadRepliesCount: 0,
      // });
      _this.onUnreadCountsUpdate(params);

      _this.initializeSocketClient();
    };

    this.setLastReadMessage = function (messageId) {
      var sendAPIRequest = _this.elixirChat.sendAPIRequest;
      return sendAPIRequest(_this.setLastReadMessageQuery, {
        messageId: messageId
      });
    };

    this.unsubscribe = function () {
      var _this$elixirChat = _this.elixirChat,
          graphQLClientSocket = _this$elixirChat.graphQLClientSocket,
          logInfo = _this$elixirChat.logInfo;
      logInfo('UnreadMessagesCounter: Unsubscribing...');
      graphQLClientSocket.unsubscribe(_this.subscriptionQuery);

      _this.onUnreadCountsUpdate({
        unreadMessagesCount: 0,
        unreadRepliesCount: 0
      });
    };

    this.elixirChat = elixirChat;
  }

  _createClass(UnreadMessagesCounter, [{
    key: "initializeSocketClient",
    value: function initializeSocketClient() {
      var _this2 = this;

      var _this$elixirChat2 = this.elixirChat,
          graphQLClientSocket = _this$elixirChat2.graphQLClientSocket,
          logInfo = _this$elixirChat2.logInfo,
          logError = _this$elixirChat2.logError;
      graphQLClientSocket.subscribe({
        query: this.subscriptionQuery,
        onAbort: function onAbort(error) {
          logError('UnreadMessagesCounter: Failed to subscribe', {
            error: error
          });
        },
        onStart: function onStart() {
          logInfo('UnreadMessagesCounter: Subscribed');
        },
        onResult: function onResult(response) {
          var _a;

          var data = ((_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.updateReadMessages) || {};

          _this2.onUnreadCountsUpdate(data);
        }
      });
    }
  }, {
    key: "onUnreadCountsUpdate",
    value: function onUnreadCountsUpdate(data) {
      var _this$elixirChat3 = this.elixirChat,
          triggerEvent = _this$elixirChat3.triggerEvent,
          logInfo = _this$elixirChat3.logInfo;
      var unreadMessagesCount = data.unreadMessagesCount,
          unreadRepliesCount = data.unreadRepliesCount,
          lastReadMessageId = data.lastReadMessageId;
      var normalizedLastReadMessageId = (lastReadMessageId || '').toString().trim();

      if (unreadMessagesCount !== this.unreadMessagesCount) {
        this.unreadMessagesCount = unreadMessagesCount;
        logInfo('Unread messages count changed to ' + unreadMessagesCount);
        triggerEvent(ElixirChatEventTypes_1.UNREAD_MESSAGES_CHANGE, unreadMessagesCount);
      }

      if (unreadRepliesCount !== this.unreadRepliesCount) {
        this.unreadRepliesCount = unreadRepliesCount;
        logInfo('Unread replies count changed to ' + unreadRepliesCount);
        triggerEvent(ElixirChatEventTypes_1.UNREAD_REPLIES_CHANGE, unreadRepliesCount);
      }

      if (normalizedLastReadMessageId !== this.lastReadMessageId) {
        this.lastReadMessageId = normalizedLastReadMessageId;
        logInfo('Last message marked as read changed to ID: ' + normalizedLastReadMessageId);
        triggerEvent(ElixirChatEventTypes_1.LAST_READ_MESSAGE_CHANGE, normalizedLastReadMessageId);
      }
    }
  }]);

  return UnreadMessagesCounter;
}();

exports.UnreadMessagesCounter = UnreadMessagesCounter;
},{"./GraphQLClient":"fvSB","./ElixirChatEventTypes":"Cteb"}],"jRw6":[function(require,module,exports) {
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n    query ($first: Int, $last: Int, $before: String, $after: String) {\n      messages(first: $first, last: $last, before: $before, after: $after) {\n        edges {\n          cursor\n          node {\n            ...fragmentMessage\n          }\n        }\n      }\n    }\n  "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    mutation ($text: String!, $responseToMessageId: ID, $attachments: [Upload!], $tempId: ID) {\n      sendMessage(text: $text, responseToMessageId: $responseToMessageId, attachments: $attachments, tempId: $tempId) {\n        ...fragmentMessage\n      }\n    }\n  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    subscription {\n      newMessage {\n        ...fragmentMessage\n      }\n    }\n  "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageSubscription = void 0;

var ElixirChatEventTypes_1 = require("./ElixirChatEventTypes");

var serializeMessage_1 = require("./serializers/serializeMessage");

var utilsCommon_1 = require("../utilsCommon");

var GraphQLClient_1 = require("./GraphQLClient");

var MessageSubscription =
/*#__PURE__*/
function () {
  function MessageSubscription(_ref) {
    var _this = this;

    var elixirChat = _ref.elixirChat;

    _classCallCheck(this, MessageSubscription);

    // protected graphQLClient: GraphQLClient;
    // protected graphQLClientSocket: GraphQLClientSocket;
    this.messageHistory = [];
    this.hasMessageHistoryBeenEverFetched = false;
    this.temporaryMessageTempIds = [];
    this.latestMessageHistoryCursorsCache = [];
    this.reachedBeginningOfMessageHistory = false;
    this.messageHistoryRequestInterval = null;
    this.MESSAGE_HISTORY_REQUEST_INTERVAL = 30 * 1000;
    this.subscriptionQuery = GraphQLClient_1.insertGraphQlFragments(GraphQLClient_1.gql(_templateObject()), {
      fragmentMessage: serializeMessage_1.fragmentMessage
    });
    this.sendMessageQuery = GraphQLClient_1.insertGraphQlFragments(GraphQLClient_1.gql(_templateObject2()), {
      fragmentMessage: serializeMessage_1.fragmentMessage
    });
    this.messageHistoryQuery = GraphQLClient_1.insertGraphQlFragments(GraphQLClient_1.gql(_templateObject3()), {
      fragmentMessage: serializeMessage_1.fragmentMessage
    });

    this.subscribe = function () {
      var _this$elixirChat = _this.elixirChat,
          graphQLClientSocket = _this$elixirChat.graphQLClientSocket,
          logInfo = _this$elixirChat.logInfo,
          logError = _this$elixirChat.logError;

      _this.updateMessageHistoryOnInterval();

      graphQLClientSocket.subscribe({
        query: _this.subscriptionQuery,
        onAbort: function onAbort(error) {
          logError('MessageSubscription: Failed to subscribe', {
            error: error
          });
        },
        onStart: function onStart() {
          logInfo('MessageSubscription: Subscribed');
        },
        onResult: _this.onMessageReceive
      });
    };

    this.changeMessageBy = function (query, diff) {
      var triggerEvent = _this.elixirChat.triggerEvent;
      _this.messageHistory = _this.messageHistory.map(function (message) {
        var _a;

        var updatedMessage = Object.assign({}, message);

        if (_this.doesMessageMatchQuery(message, query)) {
          updatedMessage = Object.assign(Object.assign({}, updatedMessage), diff);
        }

        if (((_a = message.responseToMessage) === null || _a === void 0 ? void 0 : _a.id) && _this.doesMessageMatchQuery(message.responseToMessage, query)) {
          updatedMessage.responseToMessage = Object.assign(Object.assign({}, updatedMessage.responseToMessage), diff);
        }

        return updatedMessage;
      });
      triggerEvent(ElixirChatEventTypes_1.MESSAGES_CHANGE, _this.messageHistory);
    };

    this.sendMessage = function (textareaParams) {
      var _this$elixirChat2 = _this.elixirChat,
          logInfo = _this$elixirChat2.logInfo,
          logError = _this$elixirChat2.logError,
          sendAPIRequest = _this$elixirChat2.sendAPIRequest;

      var _this$serializeSendMe = _this.serializeSendMessageParams(textareaParams),
          variables = _this$serializeSendMe.variables,
          binaries = _this$serializeSendMe.binaries;

      var tempId;

      if (!variables.text && !variables.attachments.length) {
        var errorMessage = 'MessageSubscription: Either "text" or "attachments" parameter must not be empty';
        logError(errorMessage, variables);
        return Promise.reject({
          message: errorMessage
        });
      } else if (textareaParams.appendConditionally) {
        tempId = utilsCommon_1.randomDigitStringId(6);
        variables.tempId = tempId;

        var temporaryMessage = _this.generateTemporaryMessage(textareaParams, {
          tempId: tempId
        });

        _this.appendMessageConditionally(temporaryMessage);
      } else if (textareaParams.retrySubmissionByTempId) {
        tempId = textareaParams.retrySubmissionByTempId;
        variables.tempId = tempId;

        _this.changeMessageBy({
          tempId: tempId
        }, {
          isSubmitting: true,
          submissionErrorCode: null
        });
      }

      return sendAPIRequest(_this.sendMessageQuery, variables, binaries).then(function (data) {
        var sentMessage = serializeMessage_1.serializeMessage(data, _this.elixirChat);
        var tempId = sentMessage.tempId;

        if (tempId) {
          logInfo('MessageSubscription: Enriched temporary message with actual one', {
            sentMessage: sentMessage
          });

          _this.changeMessageBy({
            tempId: tempId
          }, sentMessage);
        } else {
          logInfo('MessageSubscription: Sent message', {
            textareaParams: textareaParams,
            variables: variables,
            sentMessage: sentMessage
          });
        }

        return sentMessage;
      }).catch(function (e) {
        var submissionErrorCode = _this.getSubmissionErrorCode(e);

        _this.changeMessageBy({
          tempId: tempId
        }, {
          isSubmitting: false,
          submissionErrorCode: submissionErrorCode
        });

        throw e;
      });
    };

    this.retrySendMessage = function (message) {
      var _a;

      return _this.sendMessage({
        text: message.text,
        attachments: message.attachments,
        responseToMessageId: (_a = message === null || message === void 0 ? void 0 : message.responseToMessage) === null || _a === void 0 ? void 0 : _a.id,
        retrySubmissionByTempId: message.tempId
      });
    };

    this.fetchMessageHistory = function (limit) {
      return _this.getMessageHistoryByCursor({
        limit: limit
      }).then(function (messageHistory) {
        return _this.onMessageHistoryChange(messageHistory);
      });
    };

    this.fetchPrecedingMessageHistory = function (limit) {
      var _a;

      var logError = _this.elixirChat.logError;
      var latestCursor = (_a = _this.messageHistory[0]) === null || _a === void 0 ? void 0 : _a.cursor;

      if (!latestCursor) {
        var errorMessage = 'MessageSubscription: Failed to fetch previous message history - cursors not found';
        logError(errorMessage);
        return Promise.reject({
          message: errorMessage
        });
      }

      return _this.getMessageHistoryByCursor({
        limit: limit,
        beforeCursor: latestCursor
      }).then(function (messageHistory) {
        var updatedMessageHistory = utilsCommon_1._uniqBy([].concat(_toConsumableArray(messageHistory), _toConsumableArray(_this.messageHistory)));

        return _this.onMessageHistoryChange(updatedMessageHistory);
      });
    };

    this.markPrecedingMessagesRead = function (lastReadMessageId) {
      var messageIds = _this.messageHistory.map(function (message) {
        return message.id;
      });

      var lastReadMessageIndex = messageIds.indexOf(lastReadMessageId);

      _this.messageHistory.forEach(function (message, index) {
        if (lastReadMessageIndex >= index) {
          message.isUnread = false;
        }
      });

      _this.onMessageHistoryChange(_this.messageHistory);
    };

    this.unsubscribe = function () {
      var _this$elixirChat3 = _this.elixirChat,
          graphQLClientSocket = _this$elixirChat3.graphQLClientSocket,
          logInfo = _this$elixirChat3.logInfo;
      _this.messageHistory = [];
      _this.temporaryMessageTempIds = [];
      _this.reachedBeginningOfMessageHistory = false;
      clearInterval(_this.messageHistoryRequestInterval);
      logInfo('MessageSubscription: Unsubscribing...');
      graphQLClientSocket.unsubscribe(_this.companyMessageSubscription);
    };

    this.elixirChat = elixirChat;
  }

  _createClass(MessageSubscription, [{
    key: "updateMessageHistoryOnInterval",
    value: function updateMessageHistoryOnInterval() {
      var _this2 = this;

      this.messageHistoryRequestInterval = setInterval(function () {
        var _a;

        var limit = 20;
        var afterCursor = ((_a = utilsCommon_1._last(_this2.messageHistory)) === null || _a === void 0 ? void 0 : _a.cursor) || null;

        _this2.getMessageHistoryByCursor({
          limit: limit,
          afterCursor: afterCursor
        }).then(function (missedMessages) {
          missedMessages.forEach(function (message) {
            return _this2.onMessageReceive(message);
          });
        });
      }, this.MESSAGE_HISTORY_REQUEST_INTERVAL);
    }
  }, {
    key: "onMessageReceive",
    value: function onMessageReceive(response) {
      var _a;

      var _this$elixirChat4 = this.elixirChat,
          triggerEvent = _this$elixirChat4.triggerEvent,
          logInfo = _this$elixirChat4.logInfo;
      var data = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.newMessage;

      if (!data) {
        return;
      }

      var message = serializeMessage_1.serializeMessage(data, this.elixirChat);

      if (this.temporaryMessageTempIds.includes(message.tempId)) {
        this.forgetTemporaryMessage(message.tempId);
      } else {
        this.messageHistory.push(message);
        logInfo('Received new message', {
          message: message
        });
        triggerEvent(ElixirChatEventTypes_1.MESSAGES_RECEIVE, message);
      }
    }
  }, {
    key: "forgetTemporaryMessage",
    value: function forgetTemporaryMessage(temporaryMessageTempId) {
      this.temporaryMessageTempIds = this.temporaryMessageTempIds.filter(function (id) {
        return id !== temporaryMessageTempId;
      });
    }
  }, {
    key: "doesMessageMatchQuery",
    value: function doesMessageMatchQuery(message, query) {
      for (var queryKey in query) {
        if (query[queryKey] !== message[queryKey]) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "getSubmissionErrorCode",
    value: function getSubmissionErrorCode(e) {
      var _a, _b, _c;

      var defaultErrorCode = 400;
      var submissionErrorCode = ((_c = (_b = (_a = e.rawError) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.status) || defaultErrorCode;

      if (!navigator.onLine) {
        submissionErrorCode = 503;
      }

      return submissionErrorCode;
    }
  }, {
    key: "serializeSendMessageParams",
    value: function serializeSendMessageParams(params) {
      var text = typeof params.text === 'string' ? params.text.trim() : '';
      var tempId = params.tempId;
      var responseToMessageId = typeof params.responseToMessageId === 'string' ? params.responseToMessageId : null;
      var attachments = [];
      var binaries = {};

      try {
        params.attachments.forEach(function (_ref2) {
          var file = _ref2.file;
          attachments.push(file.name);
          binaries[file.name] = file;
        });
      } catch (e) {}

      return {
        variables: {
          text: text,
          tempId: tempId,
          attachments: attachments,
          responseToMessageId: responseToMessageId
        },
        binaries: binaries
      };
    }
  }, {
    key: "generateTemporaryMessage",
    // TODO: fix?
    value: function generateTemporaryMessage(textareaParams, customData) {
      var text = textareaParams.text,
          attachments = textareaParams.attachments,
          responseToMessageId = textareaParams.responseToMessageId;
      var serializedResponseToMessage = this.messageHistory.filter(function (message) {
        return message.id === responseToMessageId;
      })[0];
      var serializedAttachments = attachments.map(function (attachment) {
        var id = attachment.id,
            file = attachment.file,
            width = attachment.width,
            height = attachment.height;
        var url = URL.createObjectURL(file);
        var thumbnails = [];

        if (utilsCommon_1.isWebImage(file.type) && width && height) {
          thumbnails = [{
            id: id,
            url: url
          }];
        }

        return Object.assign(Object.assign({}, attachment), {
          url: url,
          thumbnails: thumbnails,
          contentType: file.type,
          bytesSize: file.size
        });
      });
      return serializeMessage_1.serializeMessage(Object.assign({
        id: utilsCommon_1.randomDigitStringId(6),
        text: text.trim() || '',
        timestamp: new Date().toISOString(),
        responseToMessage: serializedResponseToMessage || {},
        attachments: serializedAttachments,
        isSubmitting: true,
        sender: {
          __typename: 'Client',
          foreignId: this.elixirChat.client.id
        }
      }, customData), this.elixirChat); // return {
      //   tempId,
      //   id: randomDigitStringId(6),
      //   text: text.trim() || '',
      //   timestamp: new Date().toISOString(),
      //   sender: {
      //     isOperator: false,
      //     isCurrentClient: true,
      //   },
      //   responseToMessage: serializedResponseToMessage || {},
      //   attachments: serializedAttachments,
      //   isSubmitting: true,
      // };
    }
  }, {
    key: "appendMessageConditionally",
    value: function appendMessageConditionally(message) {
      var _this$elixirChat5 = this.elixirChat,
          triggerEvent = _this$elixirChat5.triggerEvent,
          logInfo = _this$elixirChat5.logInfo;
      this.messageHistory.push(message);
      this.temporaryMessageTempIds.push(message.tempId);
      logInfo('Conditionally appended message', {
        message: message
      });
      triggerEvent(ElixirChatEventTypes_1.MESSAGES_RECEIVE, message);
    }
  }, {
    key: "getMessageHistoryByCursor",
    // TODO: insert into history? Fix bug
    // private generateNewClientPlaceholderMessage(messageHistory: Array<IMessage>): IMessage {
    //   const firstMessageTimestamp = messageHistory?.[0]?.timestamp;
    //   const timestamp = firstMessageTimestamp || new Date().toISOString();
    //   return {
    //     timestamp,
    //     id: randomDigitStringId(6),
    //     isSystem: true,
    //     sender: {},
    //     attachments: [],
    //     responseToMessage: {},
    //     systemType: 'NewClientPlaceholderMessage',
    //   };
    // };
    value: function getMessageHistoryByCursor(params) {
      var _this3 = this;

      var sendAPIRequest = this.elixirChat.sendAPIRequest;
      var limit = params.limit,
          beforeCursor = params.beforeCursor,
          afterCursor = params.afterCursor;
      var variables;

      if (this.reachedBeginningOfMessageHistory && !afterCursor) {
        return Promise.resolve([]);
      }

      if (beforeCursor) {
        variables = {
          last: limit,
          before: beforeCursor
        };
      } else if (afterCursor) {
        variables = {
          first: limit,
          after: afterCursor
        };
      } else {
        variables = {
          last: limit
        };
      }

      return sendAPIRequest(this.messageHistoryQuery, variables).then(function (messages) {
        var processedMessageHistory = GraphQLClient_1.simplifyGraphQLJSON(messages).map(function (message) {
          return serializeMessage_1.serializeMessage(message, _this3.elixirChat);
        });
        _this3.reachedBeginningOfMessageHistory = processedMessageHistory.length < limit;
        return processedMessageHistory;
      });
    }
  }, {
    key: "onMessageHistoryChange",
    value: function onMessageHistoryChange(messageHistory) {
      var triggerEvent = this.elixirChat.triggerEvent;
      this.messageHistory = messageHistory;
      triggerEvent(ElixirChatEventTypes_1.MESSAGES_CHANGE, messageHistory);
      return messageHistory;
    }
  }]);

  return MessageSubscription;
}();

exports.MessageSubscription = MessageSubscription;
},{"./ElixirChatEventTypes":"Cteb","./serializers/serializeMessage":"ZEl5","../utilsCommon":"EjGt","./GraphQLClient":"fvSB"}],"qf4T":[function(require,module,exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],"ss9A":[function(require,module,exports) {
var core = module.exports = { version: '2.6.0' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],"M7z6":[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"eT53":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":"M7z6"}],"BXiR":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],"P9Ib":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":"BXiR"}],"vZ6E":[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_is-object":"M7z6","./_global":"qf4T"}],"o6Gq":[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":"P9Ib","./_fails":"BXiR","./_dom-create":"vZ6E"}],"y37I":[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":"M7z6"}],"nw8e":[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":"eT53","./_ie8-dom-define":"o6Gq","./_to-primitive":"y37I","./_descriptors":"P9Ib"}],"uJ6d":[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],"NXbe":[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_object-dp":"nw8e","./_property-desc":"uJ6d","./_descriptors":"P9Ib"}],"uHgd":[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],"U49f":[function(require,module,exports) {
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],"PHot":[function(require,module,exports) {

var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_global":"qf4T","./_hide":"NXbe","./_has":"uHgd","./_uid":"U49f","./_core":"ss9A"}],"kYjc":[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],"E3Kh":[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":"kYjc"}],"izCb":[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":"qf4T","./_core":"ss9A","./_hide":"NXbe","./_redefine":"PHot","./_ctx":"E3Kh"}],"Z5df":[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],"nGau":[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":"Z5df"}],"BjjL":[function(require,module,exports) {
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],"rfVX":[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":"BjjL"}],"yjVO":[function(require,module,exports) {
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],"dJBs":[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":"yjVO"}],"JTrm":[function(require,module,exports) {
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":"Z5df"}],"H21C":[function(require,module,exports) {
module.exports = false;

},{}],"zGcK":[function(require,module,exports) {

var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":"ss9A","./_global":"qf4T","./_library":"H21C"}],"AIP1":[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_shared":"zGcK","./_uid":"U49f","./_global":"qf4T"}],"NNbH":[function(require,module,exports) {
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-object":"M7z6","./_is-array":"JTrm","./_wks":"AIP1"}],"igas":[function(require,module,exports) {
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":"NNbH"}],"AuPh":[function(require,module,exports) {
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_ctx":"E3Kh","./_iobject":"nGau","./_to-object":"rfVX","./_to-length":"dJBs","./_array-species-create":"igas"}],"Z7eD":[function(require,module,exports) {
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_wks":"AIP1","./_hide":"NXbe"}],"sVmK":[function(require,module,exports) {
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":"izCb","./_array-methods":"AuPh","./_add-to-unscopables":"Z7eD"}],"Qppk":[function(require,module,exports) {
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":"izCb","./_array-methods":"AuPh","./_add-to-unscopables":"Z7eD"}],"N3yi":[function(require,module,exports) {
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_object-dp":"nw8e","./_descriptors":"P9Ib"}],"EIvU":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

exports.default = function (innerThis, boundThis) {
  if (innerThis !== boundThis) {
    throw new TypeError("Cannot instantiate an arrow function");
  }
};
},{}],"o7wy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flip = flip;
exports.constant = constant;
exports.on = on;
exports.compose = compose;
exports.pipe = pipe;
exports.curry = curry;
// eslint-disable-line no-redeclare

// Flips the order of the arguments to a function of two arguments.
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare

// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare

// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
function flip(f) {
  return function (b, a) {
    return f(a, b);
  };
}

// Returns its first argument and ignores its second.
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare
// eslint-disable-line no-redeclare

function constant(a) {
  return function () {
    return a;
  };
}

// The `on` function is used to change the domain of a binary operator.
function on(o, f) {
  return function (x, y) {
    return o(f(x), f(y));
  };
}

function compose() {
  var _this = this;

  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  // eslint-disable-line no-redeclare
  var len = fns.length - 1;
  return function (x) {
    var y = x;
    for (var _i = len; _i > -1; _i--) {
      y = fns[_i].call(_this, y);
    }
    return y;
  };
}

function pipe() {
  var _this2 = this;

  for (var _len2 = arguments.length, fns = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    fns[_key2] = arguments[_key2];
  }

  // eslint-disable-line no-redeclare
  var len = fns.length - 1;
  return function (x) {
    var y = x;
    for (var _i2 = 0; _i2 <= len; _i2++) {
      y = fns[_i2].call(_this2, y);
    }
    return y;
  };
}

function curried(f, length, acc) {
  return function () {
    var combined = acc.concat(Array.prototype.slice.call(arguments));
    return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);
  };
}

function curry(f) {
  // eslint-disable-line no-redeclare
  return curried(f, f.length, []);
}
},{}],"lytE":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_to-integer":"yjVO","./_defined":"BjjL"}],"kq3x":[function(require,module,exports) {
module.exports = true;

},{}],"zRh1":[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":"kYjc"}],"zotD":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":"M7z6"}],"MLNE":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":"BXiR"}],"kxqa":[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_is-object":"M7z6","./_global":"qf4T"}],"R6c1":[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":"MLNE","./_fails":"BXiR","./_dom-create":"kxqa"}],"EKwp":[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":"M7z6"}],"Gfzd":[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":"zotD","./_ie8-dom-define":"R6c1","./_to-primitive":"EKwp","./_descriptors":"MLNE"}],"akPY":[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_object-dp":"Gfzd","./_property-desc":"uJ6d","./_descriptors":"MLNE"}],"vSO4":[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var has = require('./_has');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":"qf4T","./_core":"ss9A","./_ctx":"zRh1","./_hide":"akPY","./_has":"uHgd"}],"gojl":[function(require,module,exports) {
module.exports = require('./_hide');

},{"./_hide":"akPY"}],"dhak":[function(require,module,exports) {
module.exports = {};

},{}],"E5Ce":[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":"Z5df"}],"Wyka":[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_iobject":"E5Ce","./_defined":"BjjL"}],"S7IM":[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":"yjVO"}],"Zwq5":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":"yjVO"}],"LNnS":[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-iobject":"Wyka","./_to-length":"S7IM","./_to-absolute-index":"Zwq5"}],"NB7d":[function(require,module,exports) {

var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":"ss9A","./_global":"qf4T","./_library":"kq3x"}],"wuYm":[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":"NB7d","./_uid":"U49f"}],"B9Lq":[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_has":"uHgd","./_to-iobject":"Wyka","./_array-includes":"LNnS","./_shared-key":"wuYm"}],"KxjL":[function(require,module,exports) {
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],"knrM":[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":"B9Lq","./_enum-bug-keys":"KxjL"}],"gjjs":[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_object-dp":"Gfzd","./_an-object":"zotD","./_object-keys":"knrM","./_descriptors":"MLNE"}],"ebIA":[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":"qf4T"}],"TNJq":[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":"zotD","./_object-dps":"gjjs","./_enum-bug-keys":"KxjL","./_shared-key":"wuYm","./_dom-create":"kxqa","./_html":"ebIA"}],"Ug9I":[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_shared":"NB7d","./_uid":"U49f","./_global":"qf4T"}],"UtKM":[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_object-dp":"Gfzd","./_has":"uHgd","./_wks":"Ug9I"}],"b7Q2":[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":"TNJq","./_property-desc":"uJ6d","./_set-to-string-tag":"UtKM","./_hide":"akPY","./_wks":"Ug9I"}],"mbLO":[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":"BjjL"}],"HHE0":[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":"uHgd","./_to-object":"mbLO","./_shared-key":"wuYm"}],"uRfg":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_library":"kq3x","./_export":"vSO4","./_redefine":"gojl","./_hide":"akPY","./_iterators":"dhak","./_iter-create":"b7Q2","./_set-to-string-tag":"UtKM","./_object-gpo":"HHE0","./_wks":"Ug9I"}],"iUHQ":[function(require,module,exports) {
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_string-at":"lytE","./_iter-define":"uRfg"}],"ID6i":[function(require,module,exports) {
module.exports = function () { /* empty */ };

},{}],"xwDU":[function(require,module,exports) {
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],"OYXR":[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":"ID6i","./_iter-step":"xwDU","./_iterators":"dhak","./_to-iobject":"Wyka","./_iter-define":"uRfg"}],"COf8":[function(require,module,exports) {

require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

},{"./es6.array.iterator":"OYXR","./_global":"qf4T","./_hide":"akPY","./_iterators":"dhak","./_wks":"Ug9I"}],"ZxII":[function(require,module,exports) {
exports.f = require('./_wks');

},{"./_wks":"Ug9I"}],"nFDa":[function(require,module,exports) {
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');

},{"../../modules/es6.string.iterator":"iUHQ","../../modules/web.dom.iterable":"COf8","../../modules/_wks-ext":"ZxII"}],"t7tQ":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":"nFDa"}],"e8vu":[function(require,module,exports) {
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_uid":"U49f","./_is-object":"M7z6","./_has":"uHgd","./_object-dp":"Gfzd","./_fails":"BXiR"}],"c2zY":[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_global":"qf4T","./_core":"ss9A","./_library":"kq3x","./_wks-ext":"ZxII","./_object-dp":"Gfzd"}],"Ocr3":[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],"z7R8":[function(require,module,exports) {
exports.f = {}.propertyIsEnumerable;

},{}],"ycyv":[function(require,module,exports) {
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-keys":"knrM","./_object-gops":"Ocr3","./_object-pie":"z7R8"}],"ayXv":[function(require,module,exports) {
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":"Z5df"}],"Ni5N":[function(require,module,exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_object-keys-internal":"B9Lq","./_enum-bug-keys":"KxjL"}],"rMkZ":[function(require,module,exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_to-iobject":"Wyka","./_object-gopn":"Ni5N"}],"sxPs":[function(require,module,exports) {
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_object-pie":"z7R8","./_property-desc":"uJ6d","./_to-iobject":"Wyka","./_to-primitive":"EKwp","./_has":"uHgd","./_ie8-dom-define":"R6c1","./_descriptors":"MLNE"}],"Aa2f":[function(require,module,exports) {

'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_global":"qf4T","./_has":"uHgd","./_descriptors":"MLNE","./_export":"vSO4","./_redefine":"gojl","./_meta":"e8vu","./_fails":"BXiR","./_shared":"NB7d","./_set-to-string-tag":"UtKM","./_uid":"U49f","./_wks":"Ug9I","./_wks-ext":"ZxII","./_wks-define":"c2zY","./_enum-keys":"ycyv","./_is-array":"ayXv","./_an-object":"zotD","./_is-object":"M7z6","./_to-iobject":"Wyka","./_to-primitive":"EKwp","./_property-desc":"uJ6d","./_object-create":"TNJq","./_object-gopn-ext":"rMkZ","./_object-gopd":"sxPs","./_object-dp":"Gfzd","./_object-keys":"knrM","./_object-gopn":"Ni5N","./_object-pie":"z7R8","./_object-gops":"Ocr3","./_library":"kq3x","./_hide":"akPY"}],"tuDi":[function(require,module,exports) {

},{}],"c6mp":[function(require,module,exports) {
require('./_wks-define')('asyncIterator');

},{"./_wks-define":"c2zY"}],"mwfR":[function(require,module,exports) {
require('./_wks-define')('observable');

},{"./_wks-define":"c2zY"}],"Ky5l":[function(require,module,exports) {
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;

},{"../../modules/es6.symbol":"Aa2f","../../modules/es6.object.to-string":"tuDi","../../modules/es7.symbol.async-iterator":"c6mp","../../modules/es7.symbol.observable":"mwfR","../../modules/_core":"ss9A"}],"ibPW":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":"Ky5l"}],"GyBZ":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol/iterator":"t7tQ","../core-js/symbol":"ibPW"}],"hEIm":[function(require,module,exports) {
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":"zotD"}],"af0K":[function(require,module,exports) {
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":"dhak","./_wks":"Ug9I"}],"vUQk":[function(require,module,exports) {
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":"Gfzd","./_property-desc":"uJ6d"}],"ZHvQ":[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":"Z5df","./_wks":"Ug9I"}],"AqTK":[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":"ZHvQ","./_wks":"Ug9I","./_iterators":"dhak","./_core":"ss9A"}],"Lli7":[function(require,module,exports) {
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":"Ug9I"}],"N484":[function(require,module,exports) {
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_ctx":"zRh1","./_export":"vSO4","./_to-object":"mbLO","./_iter-call":"hEIm","./_is-array-iter":"af0K","./_to-length":"S7IM","./_create-property":"vUQk","./core.get-iterator-method":"AqTK","./_iter-detect":"Lli7"}],"O35A":[function(require,module,exports) {
require('../../modules/es6.string.iterator');
require('../../modules/es6.array.from');
module.exports = require('../../modules/_core').Array.from;

},{"../../modules/es6.string.iterator":"iUHQ","../../modules/es6.array.from":"N484","../../modules/_core":"ss9A"}],"VuZO":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
},{"core-js/library/fn/array/from":"O35A"}],"mYpx":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _from = require("../core-js/array/from");

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};
},{"../core-js/array/from":"VuZO"}],"uj5A":[function(require,module,exports) {
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_object-keys":"knrM","./_object-gops":"Ocr3","./_object-pie":"z7R8","./_to-object":"mbLO","./_iobject":"E5Ce","./_fails":"BXiR"}],"YD0x":[function(require,module,exports) {
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":"vSO4","./_object-assign":"uj5A"}],"vcHl":[function(require,module,exports) {
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;

},{"../../modules/es6.object.assign":"YD0x","../../modules/_core":"ss9A"}],"gc0D":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":"vcHl"}],"T4f3":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _assign = require("../core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
},{"../core-js/object/assign":"gc0D"}],"cOHw":[function(require,module,exports) {
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_export":"vSO4","./_core":"ss9A","./_fails":"BXiR"}],"PDcB":[function(require,module,exports) {
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_to-object":"mbLO","./_object-keys":"knrM","./_object-sap":"cOHw"}],"eOjq":[function(require,module,exports) {
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;

},{"../../modules/es6.object.keys":"PDcB","../../modules/_core":"ss9A"}],"FtNa":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":"eOjq"}],"Kpws":[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":"M7z6"}],"oDsm":[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":"vSO4","./_is-integer":"Kpws"}],"hCBp":[function(require,module,exports) {
require('../../modules/es6.number.is-integer');
module.exports = require('../../modules/_core').Number.isInteger;

},{"../../modules/es6.number.is-integer":"oDsm","../../modules/_core":"ss9A"}],"OPHC":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/number/is-integer"), __esModule: true };
},{"core-js/library/fn/number/is-integer":"hCBp"}],"zCAL":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

exports.default = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};
},{}],"YuTU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveIndex = exports.replace = exports.repeat = exports.remove = exports.reduceWhile = exports.reduceIf = exports.prepend = exports.isPossibleFromObject = exports.isLastIndex = exports.isKey = exports.insert = exports.fromObject = exports.cycleNext = exports.convertIfNot = exports.append = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("babel-runtime/helpers/toConsumableArray"));

var _newArrowCheck2 = _interopRequireDefault(require("babel-runtime/helpers/newArrowCheck"));

var _Fun = require("flow-static-land/lib/Fun");

var _extends2 = _interopRequireDefault(require("babel-runtime/helpers/extends"));

var _from = _interopRequireDefault(require("babel-runtime/core-js/array/from"));

var _keys = _interopRequireDefault(require("babel-runtime/core-js/object/keys"));

var _isInteger = _interopRequireDefault(require("babel-runtime/core-js/number/is-integer"));

var _objectWithoutProperties2 = _interopRequireDefault(require("babel-runtime/helpers/objectWithoutProperties"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _this = undefined;
/**
 * Returns a new Array with elements appended to the one given.
 */

var append = function (elements, array) {
  (0, _newArrowCheck2.default)(this, _this);
  return [].concat((0, _toConsumableArray2.default)(array), (0, _toConsumableArray2.default)(elements));
}.bind(undefined);

var append$1 = (0, _Fun.curry)(append);
exports.append = append$1;
var _this$1 = undefined;
/**
 * Returns input if it is an Array or returns a new Array with input inside if
 * it is not.
 */

var convertIfNot = function (input) {
  (0, _newArrowCheck2.default)(this, _this$1);
  return Array.isArray(input) ? input : [input];
}.bind(undefined);

exports.convertIfNot = convertIfNot;
var _this$3 = undefined;
/**
 * Returns true if given index is the last one or false otherwise.
 */

var isLastIndex = function (array, index) {
  (0, _newArrowCheck2.default)(this, _this$3);
  return index === array.length - 1;
}.bind(undefined);

var isLastIndex$1 = (0, _Fun.curry)(isLastIndex);
exports.isLastIndex = isLastIndex$1;
var _this$2 = undefined;
/**
 * Returns 0 if current index is the last one, or returns next if it is not.
 */

var cycleNext = function (array, currentIndex) {
  (0, _newArrowCheck2.default)(this, _this$2);
  return isLastIndex$1(array, currentIndex) ? 0 : currentIndex + 1;
}.bind(undefined);

var cycleNext$1 = (0, _Fun.curry)(cycleNext);
exports.cycleNext = cycleNext$1;
var _this$4 = undefined;

var getObjectLength = function (object) {
  (0, _newArrowCheck2.default)(this, _this$4);
  return Math.max.apply(Math, (0, _toConsumableArray2.default)((0, _keys.default)(object))) + 1;
}.bind(undefined);
/**
 * Creates a new array using the given object
 * If all of its entries are array keys.
 * 
 * (it could also have a property length with its size)
 */


var fromObject = function (object) {
  (0, _newArrowCheck2.default)(this, _this$4);
  return (0, _from.default)("length" in object ? object : (0, _extends2.default)({}, object, {
    length: getObjectLength(object)
  }));
}.bind(undefined);

exports.fromObject = fromObject;
var _this$5 = undefined;
/**
 * Returns a new Array with the result of having inserted the given elements at
 * the specified index.
 */

var insert = function (index, elements, array) {
  (0, _newArrowCheck2.default)(this, _this$5);
  return [].concat((0, _toConsumableArray2.default)(array.slice(0, index)), (0, _toConsumableArray2.default)(elements), (0, _toConsumableArray2.default)(array.slice(index + 1)));
}.bind(undefined);

var insert$1 = (0, _Fun.curry)(insert);
exports.insert = insert$1;
var _this$6 = undefined;

var isIntGreaterThan = function (number, other) {
  (0, _newArrowCheck2.default)(this, _this$6);
  return (0, _isInteger.default)(number) && number >= other;
}.bind(undefined);
/**
 * Returns true if the given string is an Array key or false otherwise.
 */


var isKey = function (string) {
  (0, _newArrowCheck2.default)(this, _this$6);
  return isIntGreaterThan(Number(string), 0);
}.bind(undefined);

exports.isKey = isKey;
var _this$7 = undefined;
/**
 * Returns true if an Array can be created from the given Object, or in other
 * words, if it has or not a length property, and the rest of its keys are Array
 * ones.
 */

var isPossibleFromObject = function (_ref) {
  var length = _ref.length,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["length"]);
  (0, _newArrowCheck2.default)(this, _this$7);
  return (0, _keys.default)(rest).every(isKey);
}.bind(undefined);

exports.isPossibleFromObject = isPossibleFromObject;
var _this$8 = undefined;
/**
 * Returns a new Array with elements prepended to the one given.
 */

var prepend = function (elements, array) {
  (0, _newArrowCheck2.default)(this, _this$8);
  return [].concat((0, _toConsumableArray2.default)(elements), (0, _toConsumableArray2.default)(array));
}.bind(undefined);

var prepend$1 = (0, _Fun.curry)(prepend);
exports.prepend = prepend$1;
var _this$9 = undefined;
/**
 * Reduce the given array applying reduce function only to elements filtered.
 */

var reduceIf = function (filter, reduce, resultInitial, array) {
  (0, _newArrowCheck2.default)(this, _this$9);
  return array.reduce(function (result, element, index) {
    (0, _newArrowCheck2.default)(this, _this$9);
    return filter(element, index, result) ? reduce(result, element, index) : result;
  }.bind(this), resultInitial);
}.bind(undefined);

var reduceIf$1 = (0, _Fun.curry)(reduceIf);
exports.reduceIf = reduceIf$1;
var _this$10 = undefined;
/**
 * Reduce the given array applying reduce function while shouldProceed function
 * returns true.
 */

var reduceWhile = function (shouldProceed, reduce, resultInitial, array) {
  (0, _newArrowCheck2.default)(this, _this$10);
  var result = resultInitial;
  array.every(function (element, index) {
    (0, _newArrowCheck2.default)(this, _this$10);
    var proceed = shouldProceed(element, index, result);

    if (proceed) {
      result = reduce(result, element, index);
    }

    return proceed;
  }.bind(this));
  return result;
}.bind(undefined);

var reduceWhile$1 = (0, _Fun.curry)(reduceWhile);
exports.reduceWhile = reduceWhile$1;
var _this$11 = undefined;
/**
 * Returns a new Array with the result of having removed the specified amount
 * (count) of elements at the given index.
 */

var remove = function (index, count, array) {
  (0, _newArrowCheck2.default)(this, _this$11);
  return [].concat((0, _toConsumableArray2.default)(array.slice(0, index)), (0, _toConsumableArray2.default)(array.slice(index + count)));
}.bind(undefined);

var remove$1 = (0, _Fun.curry)(remove);
exports.remove = remove$1;
var _this$12 = undefined;
/**
 * Returns a new Array with the given size (count) filled with the specified
 * element.
 */

var repeat = function (count, element) {
  (0, _newArrowCheck2.default)(this, _this$12);
  return [].concat((0, _toConsumableArray2.default)(Array(count))).map(function () {
    (0, _newArrowCheck2.default)(this, _this$12);
    return element;
  }.bind(this));
}.bind(undefined);

var repeat$1 = (0, _Fun.curry)(repeat);
exports.repeat = repeat$1;
var _this$13 = undefined;
/**
 * Returns a new Array with the result of having replaced the elements at the
 * given index with the ones specified.
 */

var replace = function (index, elements, array) {
  (0, _newArrowCheck2.default)(this, _this$13);
  return [].concat((0, _toConsumableArray2.default)(array.slice(0, index)), (0, _toConsumableArray2.default)(elements), (0, _toConsumableArray2.default)(array.slice(index + elements.length)));
}.bind(undefined);

var replace$1 = (0, _Fun.curry)(replace);
exports.replace = replace$1;
var _this$14 = undefined;
/**
 * Returns an absolute index from a relative one.
 * 
 * Relative indexes differ from absolute ones in that they can be negative and
 * in those cases it would be as simple as substracting them from the length of
 * the array from where they belong to obtain their absolute counterparts.
 */

var resolveIndex = function (array, relativeIndex) {
  (0, _newArrowCheck2.default)(this, _this$14);
  return relativeIndex < 0 ? array.length - relativeIndex : relativeIndex;
}.bind(undefined);

var resolveIndex$1 = (0, _Fun.curry)(resolveIndex);
exports.resolveIndex = resolveIndex$1;
},{"babel-runtime/helpers/toConsumableArray":"mYpx","babel-runtime/helpers/newArrowCheck":"EIvU","flow-static-land/lib/Fun":"o7wy","babel-runtime/helpers/extends":"T4f3","babel-runtime/core-js/array/from":"VuZO","babel-runtime/core-js/object/keys":"FtNa","babel-runtime/core-js/number/is-integer":"OPHC","babel-runtime/helpers/objectWithoutProperties":"zCAL"}],"jIGR":[function(require,module,exports) {
'use strict';

module.exports = function equal(a, b) {
  if (a === b) return true;

  var arrA = Array.isArray(a)
    , arrB = Array.isArray(b)
    , i;

  if (arrA && arrB) {
    if (a.length != b.length) return false;
    for (i = 0; i < a.length; i++)
      if (!equal(a[i], b[i])) return false;
    return true;
  }

  if (arrA != arrB) return false;

  if (a && b && typeof a === 'object' && typeof b === 'object') {
    var keys = Object.keys(a);
    if (keys.length !== Object.keys(b).length) return false;

    var dateA = a instanceof Date
      , dateB = b instanceof Date;
    if (dateA && dateB) return a.getTime() == b.getTime();
    if (dateA != dateB) return false;

    var regexpA = a instanceof RegExp
      , regexpB = b instanceof RegExp;
    if (regexpA && regexpB) return a.toString() == b.toString();
    if (regexpA != regexpB) return false;

    for (i = 0; i < keys.length; i++)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = 0; i < keys.length; i++)
      if(!equal(a[keys[i]], b[keys[i]])) return false;

    return true;
  }

  return false;
};

},{}],"htFH":[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_export":"vSO4","./_descriptors":"MLNE","./_object-dp":"Gfzd"}],"v7pm":[function(require,module,exports) {
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};

},{"../../modules/es6.object.define-property":"htFH","../../modules/_core":"ss9A"}],"FFZn":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":"v7pm"}],"Xos8":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};
},{"../core-js/object/define-property":"FFZn"}],"By4a":[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};

},{"./_classof":"ZHvQ","./_wks":"Ug9I","./_iterators":"dhak","./_core":"ss9A"}],"TEgB":[function(require,module,exports) {
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.is-iterable');

},{"../modules/web.dom.iterable":"COf8","../modules/es6.string.iterator":"iUHQ","../modules/core.is-iterable":"By4a"}],"gkZy":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
},{"core-js/library/fn/is-iterable":"TEgB"}],"ugM7":[function(require,module,exports) {
var anObject = require('./_an-object');
var get = require('./core.get-iterator-method');
module.exports = require('./_core').getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

},{"./_an-object":"zotD","./core.get-iterator-method":"AqTK","./_core":"ss9A"}],"Lvd3":[function(require,module,exports) {
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');

},{"../modules/web.dom.iterable":"COf8","../modules/es6.string.iterator":"iUHQ","../modules/core.get-iterator":"ugM7"}],"X9RM":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":"Lvd3"}],"m8OI":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _isIterable2 = require("../core-js/is-iterable");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = require("../core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
},{"../core-js/is-iterable":"gkZy","../core-js/get-iterator":"X9RM"}],"dAR4":[function(require,module,exports) {
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"./_object-keys":"knrM","./_to-iobject":"Wyka","./_object-pie":"z7R8"}],"Omhj":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":"vSO4","./_object-to-array":"dAR4"}],"lQ0T":[function(require,module,exports) {
require('../../modules/es7.object.entries');
module.exports = require('../../modules/_core').Object.entries;

},{"../../modules/es7.object.entries":"Omhj","../../modules/_core":"ss9A"}],"FgrW":[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/entries"), __esModule: true };
},{"core-js/library/fn/object/entries":"lQ0T"}],"Q0fQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateIn = exports.toUndefinedIfEmpty = exports.shallowEqual = exports.shallowCopy = exports.setIn = exports.set = exports.removeIn = exports.remove = exports.map = exports.isEmpty = exports.is = exports.haveSameProps = exports.hasKey = exports.hasIn = exports.getKeys = exports.getIn = exports.get = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("babel-runtime/helpers/newArrowCheck"));

var _Fun = require("flow-static-land/lib/Fun");

var _typeof2 = _interopRequireDefault(require("babel-runtime/helpers/typeof"));

var _utilsArray = require("@jumpn/utils-array");

var _keys = _interopRequireDefault(require("babel-runtime/core-js/object/keys"));

var _toConsumableArray2 = _interopRequireDefault(require("babel-runtime/helpers/toConsumableArray"));

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _defineProperty2 = _interopRequireDefault(require("babel-runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("babel-runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("babel-runtime/helpers/slicedToArray"));

var _entries = _interopRequireDefault(require("babel-runtime/core-js/object/entries"));

var _objectWithoutProperties2 = _interopRequireDefault(require("babel-runtime/helpers/objectWithoutProperties"));

var _symbol = _interopRequireDefault(require("babel-runtime/core-js/symbol"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _this = void 0,
    get = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this), r[e];
}.bind(void 0),
    get$1 = (0, _Fun.curry)(get),
    _this$2 = void 0,
    isObject = function (e) {
  return (0, _newArrowCheck2.default)(this, _this$2), null !== e && "object" === (void 0 === e ? "undefined" : (0, _typeof2.default)(e));
}.bind(void 0),
    is = function (e) {
  return (0, _newArrowCheck2.default)(this, _this$2), Array.isArray(e) || isObject(e);
}.bind(void 0),
    _this$1 = void 0,
    getInIfNeeded = function (e, r, t) {
  return (0, _newArrowCheck2.default)(this, _this$1), (0, _utilsArray.isLastIndex)(r, e) ? t : getInRecur(e + 1, r, t);
}.bind(void 0),
    getNotCompositeErrorMessage = function (e, r, t) {
  return (0, _newArrowCheck2.default)(this, _this$1), "Expected to find a composite at [" + String(r.join(", ")) + "][" + String(e) + "], but instead got: " + (void 0 === t ? "undefined" : (0, _typeof2.default)(t));
}.bind(void 0),
    ensureIsComposite = function (e, r, t) {
  if ((0, _newArrowCheck2.default)(this, _this$1), is(t)) return t;
  throw new Error(getNotCompositeErrorMessage(e, r, t));
}.bind(void 0),
    getInRecur = function (e, r, t) {
  return (0, _newArrowCheck2.default)(this, _this$1), void 0 === t ? void 0 : getInIfNeeded(e, r, get$1(r[e], ensureIsComposite(e, r, t)));
}.bind(void 0),
    getIn = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$1), 0 === e.length ? void 0 : getInRecur(0, e, r);
}.bind(void 0),
    getIn$1 = (0, _Fun.curry)(getIn),
    _this$3 = void 0,
    getKeys = function (e) {
  return (0, _newArrowCheck2.default)(this, _this$3), Array.isArray(e) ? [].concat((0, _toConsumableArray2.default)(e.keys())) : (0, _keys.default)(e);
}.bind(void 0),
    _this$4 = void 0,
    hasIn = function (e, r, t) {
  return (0, _newArrowCheck2.default)(this, _this$4), (0, _fastDeepEqual.default)(getIn$1(e, t), r);
}.bind(void 0),
    hasIn$1 = (0, _Fun.curry)(hasIn),
    _this$5 = void 0,
    hasKey = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$5), Object.prototype.hasOwnProperty.call(r, e);
}.bind(void 0),
    hasKey$1 = (0, _Fun.curry)(hasKey),
    _this$6 = void 0,
    haveSameProps = function (e, r) {
  (0, _newArrowCheck2.default)(this, _this$6);
  var t = getKeys(e);
  return t.length === getKeys(r).length && t.every(function (t) {
    return (0, _newArrowCheck2.default)(this, _this$6), hasKey$1(t, r) && get$1(t, e) === get$1(t, r);
  }.bind(this));
}.bind(void 0),
    haveSameProps$1 = (0, _Fun.curry)(haveSameProps),
    _this$7 = void 0,
    isEmpty = function (e) {
  return (0, _newArrowCheck2.default)(this, _this$7), 0 === getKeys(e).length;
}.bind(void 0),
    _this$8 = void 0,
    mapObject = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$8), (0, _entries.default)(r).reduce(function (t, i) {
    var n = (0, _slicedToArray2.default)(i, 2),
        o = n[0],
        s = n[1];
    return (0, _newArrowCheck2.default)(this, _this$8), (0, _extends2.default)({}, t, (0, _defineProperty2.default)({}, o, e(s, o, r)));
  }.bind(this), {});
}.bind(void 0),
    map = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$8), Array.isArray(r) ? r.map(e) : mapObject(e, r);
}.bind(void 0),
    map$1 = (0, _Fun.curry)(map),
    _this$9 = void 0,
    objectRemove = function (e, r) {
  r[e];
  var t = (0, _objectWithoutProperties2.default)(r, [e]);
  return (0, _newArrowCheck2.default)(this, _this$9), t;
}.bind(void 0),
    remove$1 = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$9), Array.isArray(r) ? (0, _utilsArray.remove)(e, 1, r) : objectRemove(e, r);
}.bind(void 0),
    remove$2 = (0, _Fun.curry)(remove$1),
    _this$12 = void 0,
    shallowCopy = function (e) {
  return (0, _newArrowCheck2.default)(this, _this$12), Array.isArray(e) ? [].concat((0, _toConsumableArray2.default)(e)) : (0, _extends2.default)({}, e);
}.bind(void 0),
    _this$11 = void 0,
    createReduceContext = function (e) {
  (0, _newArrowCheck2.default)(this, _this$11);
  var r = shallowCopy(e);
  return {
    origin: r,
    current: r,
    previous: void 0
  };
}.bind(void 0),
    set = function (e, r, t) {
  return (0, _newArrowCheck2.default)(this, _this$11), t[e] = r, get$1(e, t);
}.bind(void 0),
    updateSet = function (e, r, t, i) {
  return (0, _newArrowCheck2.default)(this, _this$11), (0, _extends2.default)({}, i, {
    current: set(e[r], t, i.current),
    previous: i.current
  });
}.bind(void 0),
    updateRemove = function (e, r, t) {
  (0, _newArrowCheck2.default)(this, _this$11);
  var i = remove$2(e[r], t.current);
  return 0 === r ? (0, _extends2.default)({}, t, {
    current: i,
    origin: i
  }) : (0, _extends2.default)({}, t, {
    previous: set(e[r - 1], i, t.previous)
  });
}.bind(void 0),
    removeAction = (0, _symbol.default)("composite.updateIn.removeAction"),
    update = function (e, r, t, i) {
  return (0, _newArrowCheck2.default)(this, _this$11), t === removeAction ? updateRemove(e, r, i) : updateSet(e, r, t, i);
}.bind(void 0),
    createSupporting = function (e) {
  return (0, _newArrowCheck2.default)(this, _this$11), "number" == typeof e ? [] : {};
}.bind(void 0),
    copyOrCreate = function (e, r, t) {
  return (0, _newArrowCheck2.default)(this, _this$11), hasKey$1(e, t) ? shallowCopy(get$1(e, t)) : createSupporting(r);
}.bind(void 0),
    getNext = function (e, r, t, i) {
  return (0, _newArrowCheck2.default)(this, _this$11), (0, _utilsArray.isLastIndex)(e, t) ? r(get$1(e[t], i)) : copyOrCreate(e[t], e[t + 1], i);
}.bind(void 0),
    getReducer = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$11), function (t, i, n) {
    return (0, _newArrowCheck2.default)(this, _this$11), update(e, n, getNext(e, r, n, t.current), t);
  }.bind(this);
}.bind(void 0),
    updateIn = function (e, r, t) {
  return (0, _newArrowCheck2.default)(this, _this$11), 0 === e.length ? t : e.reduce(getReducer(e, r), createReduceContext(t)).origin;
}.bind(void 0),
    updateInCurried = (0, _Fun.curry)(updateIn);

exports.updateIn = updateInCurried;
exports.shallowCopy = shallowCopy;
exports.remove = remove$2;
exports.map = map$1;
exports.isEmpty = isEmpty;
exports.haveSameProps = haveSameProps$1;
exports.hasKey = hasKey$1;
exports.hasIn = hasIn$1;
exports.getKeys = getKeys;
exports.getIn = getIn$1;
exports.is = is;
exports.get = get$1;
updateInCurried.remove = removeAction;

var _this$10 = void 0,
    remove$3 = function () {
  return (0, _newArrowCheck2.default)(this, _this$10), updateInCurried.remove;
}.bind(void 0),
    removeIn = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$10), updateInCurried(e, remove$3, r);
}.bind(void 0),
    removeIn$1 = (0, _Fun.curry)(removeIn),
    _this$13 = void 0,
    set$1 = function (e, r, t) {
  (0, _newArrowCheck2.default)(this, _this$13);
  var i = shallowCopy(t);
  return i[e] = r, i;
}.bind(void 0),
    set$2 = (0, _Fun.curry)(set$1),
    _this$14 = void 0,
    setIn = function (e, r, t) {
  return (0, _newArrowCheck2.default)(this, _this$14), updateInCurried(e, function () {
    return (0, _newArrowCheck2.default)(this, _this$14), r;
  }.bind(this), t);
}.bind(void 0),
    setIn$1 = (0, _Fun.curry)(setIn),
    _this$15 = void 0,
    xor = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$15), Boolean(Number(e) ^ Number(r));
}.bind(void 0),
    shallowEqual = function (e, r) {
  return (0, _newArrowCheck2.default)(this, _this$15), e === r || !xor(Array.isArray(e), Array.isArray(r)) && haveSameProps$1(e, r);
}.bind(void 0),
    shallowEqual$1 = (0, _Fun.curry)(shallowEqual),
    _this$16 = void 0,
    toUndefinedIfEmpty = function (e) {
  return (0, _newArrowCheck2.default)(this, _this$16), isEmpty(e) ? void 0 : e;
}.bind(void 0);

exports.toUndefinedIfEmpty = toUndefinedIfEmpty;
exports.shallowEqual = shallowEqual$1;
exports.setIn = setIn$1;
exports.set = set$2;
exports.removeIn = removeIn$1;
},{"babel-runtime/helpers/newArrowCheck":"EIvU","flow-static-land/lib/Fun":"o7wy","babel-runtime/helpers/typeof":"GyBZ","@jumpn/utils-array":"YuTU","babel-runtime/core-js/object/keys":"FtNa","babel-runtime/helpers/toConsumableArray":"mYpx","fast-deep-equal":"jIGR","babel-runtime/helpers/defineProperty":"Xos8","babel-runtime/helpers/extends":"T4f3","babel-runtime/helpers/slicedToArray":"m8OI","babel-runtime/core-js/object/entries":"FgrW","babel-runtime/helpers/objectWithoutProperties":"zCAL","babel-runtime/core-js/symbol":"ibPW"}],"g6sb":[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_iobject":"nGau","./_defined":"BjjL"}],"vfEH":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":"yjVO"}],"Ca7J":[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-iobject":"g6sb","./_to-length":"dJBs","./_to-absolute-index":"vfEH"}],"NaGB":[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":"zGcK","./_uid":"U49f"}],"vL0Z":[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_has":"uHgd","./_to-iobject":"g6sb","./_array-includes":"Ca7J","./_shared-key":"NaGB"}],"U9a7":[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":"vL0Z","./_enum-bug-keys":"KxjL"}],"MiMz":[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_object-dp":"nw8e","./_an-object":"eT53","./_object-keys":"U9a7","./_descriptors":"P9Ib"}],"xjB1":[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":"qf4T"}],"sYaK":[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":"eT53","./_object-dps":"MiMz","./_enum-bug-keys":"KxjL","./_shared-key":"NaGB","./_dom-create":"vZ6E","./_html":"xjB1"}],"rq3q":[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_object-dp":"nw8e","./_has":"uHgd","./_wks":"AIP1"}],"ebgP":[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":"sYaK","./_property-desc":"uJ6d","./_set-to-string-tag":"rq3q","./_hide":"NXbe","./_wks":"AIP1"}],"q6yw":[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":"uHgd","./_to-object":"rfVX","./_shared-key":"NaGB"}],"mH0U":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_library":"H21C","./_export":"izCb","./_redefine":"PHot","./_hide":"NXbe","./_iterators":"dhak","./_iter-create":"ebgP","./_set-to-string-tag":"rq3q","./_object-gpo":"q6yw","./_wks":"AIP1"}],"wVEN":[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":"Z7eD","./_iter-step":"xwDU","./_iterators":"dhak","./_to-iobject":"g6sb","./_iter-define":"mH0U"}],"v6Aj":[function(require,module,exports) {

var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./es6.array.iterator":"wVEN","./_object-keys":"U9a7","./_redefine":"PHot","./_global":"qf4T","./_hide":"NXbe","./_iterators":"dhak","./_wks":"AIP1"}],"Hh2M":[function(require,module,exports) {
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":"BXiR"}],"VsIt":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_export":"izCb","./_array-methods":"AuPh","./_strict-method":"Hh2M"}],"XfJI":[function(require,module,exports) {
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

module.exports = _arrayWithoutHoles;
},{}],"OMTj":[function(require,module,exports) {
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

module.exports = _iterableToArray;
},{}],"wFNi":[function(require,module,exports) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

module.exports = _nonIterableSpread;
},{}],"Fhqp":[function(require,module,exports) {
var arrayWithoutHoles = require("./arrayWithoutHoles");

var iterableToArray = require("./iterableToArray");

var nonIterableSpread = require("./nonIterableSpread");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
},{"./arrayWithoutHoles":"XfJI","./iterableToArray":"OMTj","./nonIterableSpread":"wFNi"}],"RBsu":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_export":"izCb","./_array-methods":"AuPh","./_strict-method":"Hh2M"}],"x5yM":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_to-integer":"yjVO","./_defined":"BjjL"}],"t3as":[function(require,module,exports) {
'use strict';
var at = require('./_string-at')(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":"x5yM"}],"GM7B":[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":"Z5df","./_wks":"AIP1"}],"sNFG":[function(require,module,exports) {
'use strict';

var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"./_classof":"GM7B"}],"hgks":[function(require,module,exports) {
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":"eT53"}],"ZcPD":[function(require,module,exports) {
'use strict';

var regexpFlags = require('./_flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./_flags":"hgks"}],"S07n":[function(require,module,exports) {
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"./_regexp-exec":"ZcPD","./_export":"izCb"}],"LmBS":[function(require,module,exports) {
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./es6.regexp.exec":"S07n","./_redefine":"PHot","./_hide":"NXbe","./_fails":"BXiR","./_defined":"BjjL","./_wks":"AIP1","./_regexp-exec":"ZcPD"}],"RTfC":[function(require,module,exports) {
'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');

// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"./_an-object":"eT53","./_to-length":"dJBs","./_advance-string-index":"t3as","./_regexp-exec-abstract":"sNFG","./_fix-re-wks":"LmBS"}],"dwTY":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_export":"izCb","./_array-methods":"AuPh","./_strict-method":"Hh2M"}],"xcbV":[function(require,module,exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],"h83E":[function(require,module,exports) {
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":"kYjc","./_is-object":"M7z6","./_invoke":"xcbV"}],"WIhg":[function(require,module,exports) {
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_export":"izCb","./_bind":"h83E"}],"tS9b":[function(require,module,exports) {
function _newArrowCheck(innerThis, boundThis) {
  if (innerThis !== boundThis) {
    throw new TypeError("Cannot instantiate an arrow function");
  }
}

module.exports = _newArrowCheck;
},{}],"hqAf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestToCompat = exports.requestFromCompat = exports.hasSubscription = exports.getOperationType = exports.errorsToString = void 0;

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.regexp.match");

require("core-js/modules/es6.array.some");

require("core-js/modules/es6.function.bind");

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _this = undefined;

var locationsToString = function locationsToString(locations) {
  var _this2 = this;

  (0, _newArrowCheck2.default)(this, _this);
  return locations.map(function (_ref) {
    var column = _ref.column,
        line = _ref.line;
    (0, _newArrowCheck2.default)(this, _this2);
    return "".concat(line, ":").concat(column);
  }.bind(this)).join("; ");
}.bind(undefined);

var errorToString = function errorToString(_ref2) {
  var message = _ref2.message,
      locations = _ref2.locations;
  (0, _newArrowCheck2.default)(this, _this);
  return message + (locations ? " (".concat(locationsToString(locations), ")") : "");
}.bind(undefined);
/**
 * Transforms an array of GqlError into a string.
 *
 * @example
 *
 * const gqlRespose = {
 *   errors: [
 *     {message: "First Error", locations: [{column: 10, line: 2}]},
 *     {message: "Second Error", locations: [{column: 2, line: 4}]}
 *   ]
 * }
 *
 * const error = errorsToString(gqlRespose.errors);
 * // string with the following:
 * // First Error (2:10)
 * // Second Error (4:2)
 */


var errorsToString = function errorsToString(gqlErrors) {
  (0, _newArrowCheck2.default)(this, _this);
  return gqlErrors.map(errorToString).join("\n");
}.bind(undefined);

exports.errorsToString = errorsToString;
var _this$1 = undefined;
var operationTypeRe = /^\s*(query|mutation|subscription|\{)/;

var getOperationTypeFromMatched = function getOperationTypeFromMatched(matched) {
  (0, _newArrowCheck2.default)(this, _this$1);
  return matched === "{" ? "query" : matched;
}.bind(undefined);
/**
 * Returns the type (query, mutation, or subscription) of the given operation
 *
 * @example
 *
 * const operation = `
 *   subscription userSubscription($userId: ID!) {
 *     user(userId: $userId) {
 *       id
 *       name
 *     }
 *   }
 * `;
 *
 * const operationType = getOperationType(operation);
 *
 * console.log(operationType); // "subscription"
 */


var getOperationType = function getOperationType(operation) {
  (0, _newArrowCheck2.default)(this, _this$1);
  var result = operation.match(operationTypeRe);

  if (!result) {
    throw new TypeError("Invalid operation:\n".concat(operation));
  }

  return getOperationTypeFromMatched(result[1]);
}.bind(undefined);

exports.getOperationType = getOperationType;
var _this$2 = undefined;

var isSubscription = function isSubscription(definition) {
  (0, _newArrowCheck2.default)(this, _this$2);
  return definition.kind === "OperationDefinition" && definition.operation === "subscription";
}.bind(undefined);
/**
 * Returns true if documentNode has a subscription or false otherwise
 */


var hasSubscription = function hasSubscription(documentNode) {
  (0, _newArrowCheck2.default)(this, _this$2);
  return documentNode.definitions.some(isSubscription);
}.bind(undefined);

exports.hasSubscription = hasSubscription;
var _this$3 = undefined;
/**
 * Creates a GqlRequest using given GqlRequestCompat
 *
 * @param {GqlRequestCompat<Variables>} gqlRequestCompat
 *
 * @return {GqlRequest<Variables>} 
 *
 * @example
 * const query = `
 *   query userQuery($userId: ID!) {
 *     user(userId: $userId) {
 *       id
 *       email
 *     }
 *   }
 * `;
 * 
 * console.log(requestFromCompat({query, variables: {userId: 10}}));
 * // {operation: "...", variables: {userId: 10}}
 */

var requestFromCompat = function requestFromCompat(_ref) {
  var operation = _ref.query,
      variables = _ref.variables;
  (0, _newArrowCheck2.default)(this, _this$3);
  return variables ? {
    operation: operation,
    variables: variables
  } : {
    operation: operation
  };
}.bind(undefined);

exports.requestFromCompat = requestFromCompat;
var _this$4 = undefined;
/**
 * Creates a GqlRequest using given GqlRequestCompat
 *
 * @param {GqlRequest<Variables>} gqlRequest
 *
 * @return {GqlRequestCompat<Variables>}
 * 
 * @example
 * const operation = `
 *   query userQuery($userId: ID!) {
 *     user(userId: $userId) {
 *       id
 *       email
 *     }
 *   }
 * `;
 * 
 * console.log(requestToCompat({operation, variables: {userId: 10}}));
 * // {query: "...", variables: {userId: 10}}
 */

var requestToCompat = function requestToCompat(_ref) {
  var query = _ref.operation,
      variables = _ref.variables;
  (0, _newArrowCheck2.default)(this, _this$4);
  return variables ? {
    query: query,
    variables: variables
  } : {
    query: query
  };
}.bind(undefined);

exports.requestToCompat = requestToCompat;
},{"core-js/modules/es6.array.map":"RBsu","core-js/modules/es6.regexp.match":"RTfC","core-js/modules/es6.array.some":"dwTY","core-js/modules/es6.function.bind":"WIhg","@babel/runtime/helpers/newArrowCheck":"tS9b"}],"AVeU":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// === Symbol Support ===

var hasSymbols = function () {
  return typeof Symbol === 'function';
};
var hasSymbol = function (name) {
  return hasSymbols() && Boolean(Symbol[name]);
};
var getSymbol = function (name) {
  return hasSymbol(name) ? Symbol[name] : '@@' + name;
};

if (hasSymbols() && !hasSymbol('observable')) {
  Symbol.observable = Symbol('observable');
}

var SymbolIterator = getSymbol('iterator');
var SymbolObservable = getSymbol('observable');
var SymbolSpecies = getSymbol('species');

// === Abstract Operations ===

function getMethod(obj, key) {
  var value = obj[key];

  if (value == null) return undefined;

  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');

  return value;
}

function getSpecies(obj) {
  var ctor = obj.constructor;
  if (ctor !== undefined) {
    ctor = ctor[SymbolSpecies];
    if (ctor === null) {
      ctor = undefined;
    }
  }
  return ctor !== undefined ? ctor : Observable;
}

function isObservable(x) {
  return x instanceof Observable; // SPEC: Brand check
}

function hostReportError(e) {
  if (hostReportError.log) {
    hostReportError.log(e);
  } else {
    setTimeout(function () {
      throw e;
    });
  }
}

function enqueue(fn) {
  Promise.resolve().then(function () {
    try {
      fn();
    } catch (e) {
      hostReportError(e);
    }
  });
}

function cleanupSubscription(subscription) {
  var cleanup = subscription._cleanup;
  if (cleanup === undefined) return;

  subscription._cleanup = undefined;

  if (!cleanup) {
    return;
  }

  try {
    if (typeof cleanup === 'function') {
      cleanup();
    } else {
      var unsubscribe = getMethod(cleanup, 'unsubscribe');
      if (unsubscribe) {
        unsubscribe.call(cleanup);
      }
    }
  } catch (e) {
    hostReportError(e);
  }
}

function closeSubscription(subscription) {
  subscription._observer = undefined;
  subscription._queue = undefined;
  subscription._state = 'closed';
}

function flushSubscription(subscription) {
  var queue = subscription._queue;
  if (!queue) {
    return;
  }
  subscription._queue = undefined;
  subscription._state = 'ready';
  for (var i = 0; i < queue.length; ++i) {
    notifySubscription(subscription, queue[i].type, queue[i].value);
    if (subscription._state === 'closed') break;
  }
}

function notifySubscription(subscription, type, value) {
  subscription._state = 'running';

  var observer = subscription._observer;

  try {
    var m = getMethod(observer, type);
    switch (type) {
      case 'next':
        if (m) m.call(observer, value);
        break;
      case 'error':
        closeSubscription(subscription);
        if (m) m.call(observer, value);else throw value;
        break;
      case 'complete':
        closeSubscription(subscription);
        if (m) m.call(observer);
        break;
    }
  } catch (e) {
    hostReportError(e);
  }

  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
}

function onNotify(subscription, type, value) {
  if (subscription._state === 'closed') return;

  if (subscription._state === 'buffering') {
    subscription._queue.push({ type: type, value: value });
    return;
  }

  if (subscription._state !== 'ready') {
    subscription._state = 'buffering';
    subscription._queue = [{ type: type, value: value }];
    enqueue(function () {
      return flushSubscription(subscription);
    });
    return;
  }

  notifySubscription(subscription, type, value);
}

var Subscription = function () {
  function Subscription(observer, subscriber) {
    _classCallCheck(this, Subscription);

    // ASSERT: observer is an object
    // ASSERT: subscriber is callable

    this._cleanup = undefined;
    this._observer = observer;
    this._queue = undefined;
    this._state = 'initializing';

    var subscriptionObserver = new SubscriptionObserver(this);

    try {
      this._cleanup = subscriber.call(undefined, subscriptionObserver);
    } catch (e) {
      subscriptionObserver.error(e);
    }

    if (this._state === 'initializing') this._state = 'ready';
  }

  _createClass(Subscription, [{
    key: 'unsubscribe',
    value: function unsubscribe() {
      if (this._state !== 'closed') {
        closeSubscription(this);
        cleanupSubscription(this);
      }
    }
  }, {
    key: 'closed',
    get: function () {
      return this._state === 'closed';
    }
  }]);

  return Subscription;
}();

var SubscriptionObserver = function () {
  function SubscriptionObserver(subscription) {
    _classCallCheck(this, SubscriptionObserver);

    this._subscription = subscription;
  }

  _createClass(SubscriptionObserver, [{
    key: 'next',
    value: function next(value) {
      onNotify(this._subscription, 'next', value);
    }
  }, {
    key: 'error',
    value: function error(value) {
      onNotify(this._subscription, 'error', value);
    }
  }, {
    key: 'complete',
    value: function complete() {
      onNotify(this._subscription, 'complete');
    }
  }, {
    key: 'closed',
    get: function () {
      return this._subscription._state === 'closed';
    }
  }]);

  return SubscriptionObserver;
}();

var Observable = exports.Observable = function () {
  function Observable(subscriber) {
    _classCallCheck(this, Observable);

    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');

    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');

    this._subscriber = subscriber;
  }

  _createClass(Observable, [{
    key: 'subscribe',
    value: function subscribe(observer) {
      if (typeof observer !== 'object' || observer === null) {
        observer = {
          next: observer,
          error: arguments[1],
          complete: arguments[2]
        };
      }
      return new Subscription(observer, this._subscriber);
    }
  }, {
    key: 'forEach',
    value: function forEach(fn) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (typeof fn !== 'function') {
          reject(new TypeError(fn + ' is not a function'));
          return;
        }

        function done() {
          subscription.unsubscribe();
          resolve();
        }

        var subscription = _this.subscribe({
          next: function (value) {
            try {
              fn(value, done);
            } catch (e) {
              reject(e);
              subscription.unsubscribe();
            }
          },

          error: reject,
          complete: resolve
        });
      });
    }
  }, {
    key: 'map',
    value: function map(fn) {
      var _this2 = this;

      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');

      var C = getSpecies(this);

      return new C(function (observer) {
        return _this2.subscribe({
          next: function (value) {
            try {
              value = fn(value);
            } catch (e) {
              return observer.error(e);
            }
            observer.next(value);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            observer.complete();
          }
        });
      });
    }
  }, {
    key: 'filter',
    value: function filter(fn) {
      var _this3 = this;

      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');

      var C = getSpecies(this);

      return new C(function (observer) {
        return _this3.subscribe({
          next: function (value) {
            try {
              if (!fn(value)) return;
            } catch (e) {
              return observer.error(e);
            }
            observer.next(value);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            observer.complete();
          }
        });
      });
    }
  }, {
    key: 'reduce',
    value: function reduce(fn) {
      var _this4 = this;

      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');

      var C = getSpecies(this);
      var hasSeed = arguments.length > 1;
      var hasValue = false;
      var seed = arguments[1];
      var acc = seed;

      return new C(function (observer) {
        return _this4.subscribe({
          next: function (value) {
            var first = !hasValue;
            hasValue = true;

            if (!first || hasSeed) {
              try {
                acc = fn(acc, value);
              } catch (e) {
                return observer.error(e);
              }
            } else {
              acc = value;
            }
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));

            observer.next(acc);
            observer.complete();
          }
        });
      });
    }
  }, {
    key: 'concat',
    value: function concat() {
      var _this5 = this;

      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
        sources[_key] = arguments[_key];
      }

      var C = getSpecies(this);

      return new C(function (observer) {
        var subscription = void 0;
        var index = 0;

        function startNext(next) {
          subscription = next.subscribe({
            next: function (v) {
              observer.next(v);
            },
            error: function (e) {
              observer.error(e);
            },
            complete: function () {
              if (index === sources.length) {
                subscription = undefined;
                observer.complete();
              } else {
                startNext(C.from(sources[index++]));
              }
            }
          });
        }

        startNext(_this5);

        return function () {
          if (subscription) {
            subscription.unsubscribe();
            subscription = undefined;
          }
        };
      });
    }
  }, {
    key: 'flatMap',
    value: function flatMap(fn) {
      var _this6 = this;

      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');

      var C = getSpecies(this);

      return new C(function (observer) {
        var subscriptions = [];

        var outer = _this6.subscribe({
          next: function (value) {
            if (fn) {
              try {
                value = fn(value);
              } catch (e) {
                return observer.error(e);
              }
            }

            var inner = C.from(value).subscribe({
              next: function (value) {
                observer.next(value);
              },
              error: function (e) {
                observer.error(e);
              },
              complete: function () {
                var i = subscriptions.indexOf(inner);
                if (i >= 0) subscriptions.splice(i, 1);
                completeIfDone();
              }
            });

            subscriptions.push(inner);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            completeIfDone();
          }
        });

        function completeIfDone() {
          if (outer.closed && subscriptions.length === 0) observer.complete();
        }

        return function () {
          subscriptions.forEach(function (s) {
            return s.unsubscribe();
          });
          outer.unsubscribe();
        };
      });
    }
  }, {
    key: SymbolObservable,
    value: function () {
      return this;
    }
  }], [{
    key: 'from',
    value: function from(x) {
      var C = typeof this === 'function' ? this : Observable;

      if (x == null) throw new TypeError(x + ' is not an object');

      var method = getMethod(x, SymbolObservable);
      if (method) {
        var observable = method.call(x);

        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');

        if (isObservable(observable) && observable.constructor === C) return observable;

        return new C(function (observer) {
          return observable.subscribe(observer);
        });
      }

      if (hasSymbol('iterator')) {
        method = getMethod(x, SymbolIterator);
        if (method) {
          return new C(function (observer) {
            enqueue(function () {
              if (observer.closed) return;
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var item = _step.value;

                  observer.next(item);
                  if (observer.closed) return;
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              observer.complete();
            });
          });
        }
      }

      if (Array.isArray(x)) {
        return new C(function (observer) {
          enqueue(function () {
            if (observer.closed) return;
            for (var i = 0; i < x.length; ++i) {
              observer.next(x[i]);
              if (observer.closed) return;
            }
            observer.complete();
          });
        });
      }

      throw new TypeError(x + ' is not observable');
    }
  }, {
    key: 'of',
    value: function of() {
      for (var _len2 = arguments.length, items = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }

      var C = typeof this === 'function' ? this : Observable;

      return new C(function (observer) {
        enqueue(function () {
          if (observer.closed) return;
          for (var i = 0; i < items.length; ++i) {
            observer.next(items[i]);
            if (observer.closed) return;
          }
          observer.complete();
        });
      });
    }
  }, {
    key: SymbolSpecies,
    get: function () {
      return this;
    }
  }]);

  return Observable;
}();

if (hasSymbols()) {
  Object.defineProperty(Observable, Symbol('extensions'), {
    value: {
      symbol: SymbolObservable,
      hostReportError: hostReportError
    },
    configurable: true
  });
}
},{}],"U0NN":[function(require,module,exports) {
module.exports = require('./lib/Observable.js').Observable;

},{"./lib/Observable.js":"AVeU"}],"TLss":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_export":"izCb","./_array-includes":"Ca7J","./_add-to-unscopables":"Z7eD"}],"WEVF":[function(require,module,exports) {
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_is-object":"M7z6","./_cof":"Z5df","./_wks":"AIP1"}],"GbTB":[function(require,module,exports) {
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_is-regexp":"WEVF","./_defined":"BjjL"}],"AhNa":[function(require,module,exports) {
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":"AIP1"}],"fH7p":[function(require,module,exports) {
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":"izCb","./_string-context":"GbTB","./_fails-is-regexp":"AhNa"}],"IxO8":[function(require,module,exports) {
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
},{}],"fwAU":[function(require,module,exports) {
var defineProperty = require("./defineProperty");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      defineProperty(target, key, source[key]);
    });
  }

  return target;
}

module.exports = _objectSpread;
},{"./defineProperty":"IxO8"}],"t2zx":[function(require,module,exports) {
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

module.exports = _objectWithoutPropertiesLoose;
},{}],"U8F3":[function(require,module,exports) {
var objectWithoutPropertiesLoose = require("./objectWithoutPropertiesLoose");

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

module.exports = _objectWithoutProperties;
},{"./objectWithoutPropertiesLoose":"t2zx"}],"LvRh":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_export":"izCb","./_array-includes":"Ca7J","./_strict-method":"Hh2M"}],"zTqj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unobserveOrCancel = exports.unobserve = exports.toObservable = exports.send = exports.observe = exports.create = exports.cancel = void 0;

require("core-js/modules/es6.array.find-index");

require("core-js/modules/es6.array.find");

require("core-js/modules/es6.function.name");

var _utilsComposite = require("@jumpn/utils-composite");

require("phoenix");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.for-each");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _utilsGraphql = require("@jumpn/utils-graphql");

var _zenObservable = _interopRequireDefault(require("zen-observable"));

require("core-js/modules/es7.array.includes");

require("core-js/modules/es6.string.includes");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

require("core-js/modules/es6.array.index-of");

var _utilsArray = require("@jumpn/utils-array");

require("core-js/modules/es6.function.bind");

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _this = undefined;

var cancel = function cancel(_ref) {
  var activeObservers = _ref.activeObservers,
      canceledObservers = _ref.canceledObservers,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["activeObservers", "canceledObservers"]);
  (0, _newArrowCheck2.default)(this, _this);
  return (0, _objectSpread2.default)({}, rest, {
    isActive: false,
    activeObservers: [],
    canceledObservers: (0, _toConsumableArray2.default)(activeObservers).concat((0, _toConsumableArray2.default)(canceledObservers))
  });
}.bind(undefined);

var _this$1 = undefined;

var getNotifier = function getNotifier(handlerName, payload) {
  var _this2 = this;

  (0, _newArrowCheck2.default)(this, _this$1);
  return function (observer) {
    (0, _newArrowCheck2.default)(this, _this2);
    return observer[handlerName] && observer[handlerName](payload);
  }.bind(this);
}.bind(undefined);

var getHandlerName = function getHandlerName(_ref) {
  var name = _ref.name;
  (0, _newArrowCheck2.default)(this, _this$1);
  return "on".concat(name);
}.bind(undefined);

var notifyAll = function notifyAll(observers, event) {
  (0, _newArrowCheck2.default)(this, _this$1);
  return observers.forEach(getNotifier(getHandlerName(event), event.payload));
}.bind(undefined);

var _this$2 = undefined;

var notifyCanceled = function notifyCanceled(notifier, event) {
  (0, _newArrowCheck2.default)(this, _this$2);
  notifyAll(notifier.canceledObservers, event);
  return notifier;
}.bind(undefined);

var eventNames = {
  abort: "Abort",
  cancel: "Cancel",
  error: "Error",
  result: "Result",
  start: "Start"
};
var _this$3 = undefined;

var createStartEvent = function createStartEvent(payload) {
  (0, _newArrowCheck2.default)(this, _this$3);
  return {
    payload: payload,
    name: eventNames.start
  };
}.bind(undefined);

var createResultEvent = function createResultEvent(payload) {
  (0, _newArrowCheck2.default)(this, _this$3);
  return {
    payload: payload,
    name: eventNames.result
  };
}.bind(undefined);

var createErrorEvent = function createErrorEvent(payload) {
  (0, _newArrowCheck2.default)(this, _this$3);
  return {
    payload: payload,
    name: eventNames.error
  };
}.bind(undefined);

var createCancelEvent = function createCancelEvent() {
  (0, _newArrowCheck2.default)(this, _this$3);
  return {
    name: eventNames.cancel,
    payload: undefined
  };
}.bind(undefined);

var createAbortEvent = function createAbortEvent(payload) {
  (0, _newArrowCheck2.default)(this, _this$3);
  return {
    payload: payload,
    name: eventNames.abort
  };
}.bind(undefined);

var _this$4 = undefined;

var clearCanceled = function clearCanceled(notifier) {
  (0, _newArrowCheck2.default)(this, _this$4);
  return (0, _objectSpread2.default)({}, notifier, {
    canceledObservers: []
  });
}.bind(undefined);

var flushCanceled = function flushCanceled(notifier) {
  (0, _newArrowCheck2.default)(this, _this$4);
  return notifier.canceledObservers.length > 0 ? clearCanceled(notifyCanceled(notifier, createCancelEvent())) : notifier;
}.bind(undefined);

var _this$5 = undefined;

var findIndex = function findIndex(notifiers, key, value // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)
) {
  (0, _newArrowCheck2.default)(this, _this$5);
  return notifiers.findIndex((0, _utilsComposite.hasIn)([key], value));
}.bind(undefined);

var _this$6 = undefined;

var refresh = function refresh(notifier) {
  var _this2 = this;

  (0, _newArrowCheck2.default)(this, _this$6);
  return function (notifiers) {
    (0, _newArrowCheck2.default)(this, _this2);
    return (0, _utilsArray.replace)(findIndex(notifiers, "request", notifier.request), [notifier], notifiers);
  }.bind(this);
}.bind(undefined);

var _this$7 = undefined;

var remove$1 = function remove$$1(notifier) {
  var _this2 = this;

  (0, _newArrowCheck2.default)(this, _this$7);
  return function (notifiers) {
    (0, _newArrowCheck2.default)(this, _this2);
    return (0, _utilsArray.remove)(findIndex(notifiers, "request", notifier.request), 1, notifiers);
  }.bind(this);
}.bind(undefined);

var _this$8 = undefined;

var updateNotifiers = function updateNotifiers(absintheSocket, updater) {
  (0, _newArrowCheck2.default)(this, _this$8);
  absintheSocket.notifiers = updater(absintheSocket.notifiers);
  return absintheSocket;
}.bind(undefined);

var _this$9 = undefined;

var refreshNotifier = function refreshNotifier(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$9);
  updateNotifiers(absintheSocket, refresh(notifier));
  return notifier;
}.bind(undefined);

var requestStatuses = {
  canceled: "canceled",
  canceling: "canceling",
  pending: "pending",
  sent: "sent",
  sending: "sending"
};
var _this$a = undefined;

var getObservers = function getObservers(_ref) {
  var activeObservers = _ref.activeObservers,
      canceledObservers = _ref.canceledObservers;
  (0, _newArrowCheck2.default)(this, _this$a);
  return (0, _toConsumableArray2.default)(activeObservers).concat((0, _toConsumableArray2.default)(canceledObservers));
}.bind(undefined);

var notify = function notify(notifier, event) {
  (0, _newArrowCheck2.default)(this, _this$a);
  notifyAll(getObservers(notifier), event);
  return notifier;
}.bind(undefined);

var _this$b = undefined;

var abortNotifier = function abortNotifier(absintheSocket, notifier, error) {
  (0, _newArrowCheck2.default)(this, _this$b);
  return updateNotifiers(absintheSocket, remove$1(notify(notifier, createAbortEvent(error))));
}.bind(undefined);

var _this$c = undefined;

var find = function find(notifiers, key, value // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)
) {
  (0, _newArrowCheck2.default)(this, _this$c);
  return notifiers.find((0, _utilsComposite.hasIn)([key], value));
}.bind(undefined);

var _this$d = undefined;

var notifyActive = function notifyActive(notifier, event) {
  (0, _newArrowCheck2.default)(this, _this$d);
  notifyAll(notifier.activeObservers, event);
  return notifier;
}.bind(undefined);

var _this$e = undefined;

var notifyResultEvent = function notifyResultEvent(notifier, result) {
  (0, _newArrowCheck2.default)(this, _this$e);
  return notifyActive(notifier, createResultEvent(result));
}.bind(undefined);

var _this$f = undefined;

var notifyStartEvent = function notifyStartEvent(notifier) {
  (0, _newArrowCheck2.default)(this, _this$f);
  return notifyActive(notifier, createStartEvent(notifier));
}.bind(undefined);

var _this$g = undefined;

var reset = function reset(notifier) {
  (0, _newArrowCheck2.default)(this, _this$g);
  return flushCanceled((0, _objectSpread2.default)({}, notifier, {
    isActive: true,
    requestStatus: requestStatuses.pending,
    subscriptionId: undefined
  }));
}.bind(undefined);

var _this$h = undefined;

var handlePush = function handlePush(push, handler) {
  (0, _newArrowCheck2.default)(this, _this$h);
  return push.receive("ok", handler.onSucceed).receive("error", handler.onError).receive("timeout", handler.onTimeout);
}.bind(undefined);

var _this$i = undefined;

var getPushHandlerMethodGetter = function getPushHandlerMethodGetter(absintheSocket, request) {
  var _this2 = this;

  (0, _newArrowCheck2.default)(this, _this$i);
  return function (handle) {
    var _this3 = this;

    (0, _newArrowCheck2.default)(this, _this2);
    return function () {
      (0, _newArrowCheck2.default)(this, _this3);
      var notifier = find(absintheSocket.notifiers, "request", request);

      if (notifier) {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        handle.apply(void 0, [absintheSocket, notifier].concat(args));
      }
    }.bind(this);
  }.bind(this);
}.bind(undefined);

var getPushHandler = function getPushHandler(absintheSocket, request, notifierPushHandler) {
  (0, _newArrowCheck2.default)(this, _this$i);
  return (0, _utilsComposite.map)(getPushHandlerMethodGetter(absintheSocket, request), notifierPushHandler);
}.bind(undefined);

var pushAbsintheEvent = function pushAbsintheEvent(absintheSocket, request, notifierPushHandler, absintheEvent) {
  (0, _newArrowCheck2.default)(this, _this$i);
  handlePush(absintheSocket.channel.push(absintheEvent.name, absintheEvent.payload), getPushHandler(absintheSocket, request, notifierPushHandler));
  return absintheSocket;
}.bind(undefined);

var absintheEventNames = {
  doc: "doc",
  unsubscribe: "unsubscribe"
};
var _this$j = undefined;

var createAbsintheUnsubscribeEvent = function createAbsintheUnsubscribeEvent(payload) {
  (0, _newArrowCheck2.default)(this, _this$j);
  return {
    payload: payload,
    name: absintheEventNames.unsubscribe
  };
}.bind(undefined);

var createAbsintheDocEvent = function createAbsintheDocEvent(payload) {
  (0, _newArrowCheck2.default)(this, _this$j);
  return {
    payload: payload,
    name: absintheEventNames.doc
  };
}.bind(undefined);

var _this$k = undefined;

var pushAbsintheDocEvent = function pushAbsintheDocEvent(absintheSocket, _ref, notifierPushHandler) {
  var request = _ref.request;
  (0, _newArrowCheck2.default)(this, _this$k);
  return pushAbsintheEvent(absintheSocket, request, notifierPushHandler, createAbsintheDocEvent((0, _utilsGraphql.requestToCompat)(request)));
}.bind(undefined);

var setNotifierRequestStatusSending = function setNotifierRequestStatusSending(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$k);
  return refreshNotifier(absintheSocket, (0, _objectSpread2.default)({}, notifier, {
    requestStatus: requestStatuses.sending
  }));
}.bind(undefined);

var createRequestError = function createRequestError(message) {
  (0, _newArrowCheck2.default)(this, _this$k);
  return new Error("request: ".concat(message));
}.bind(undefined);

var onTimeout = function onTimeout(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$k);
  return notifyActive(notifier, createErrorEvent(createRequestError("timeout")));
}.bind(undefined);

var onError = function onError(absintheSocket, notifier, errorMessage) {
  (0, _newArrowCheck2.default)(this, _this$k);
  return abortNotifier(absintheSocket, notifier, createRequestError(errorMessage));
}.bind(undefined);

var getNotifierPushHandler = function getNotifierPushHandler(onSucceed) {
  (0, _newArrowCheck2.default)(this, _this$k);
  return {
    onError: onError,
    onSucceed: onSucceed,
    onTimeout: onTimeout
  };
}.bind(undefined);

var pushRequestUsing = function pushRequestUsing(absintheSocket, notifier, onSucceed) {
  (0, _newArrowCheck2.default)(this, _this$k);
  return pushAbsintheDocEvent(absintheSocket, setNotifierRequestStatusSending(absintheSocket, notifier), getNotifierPushHandler(onSucceed));
}.bind(undefined);

var _this$l = undefined;

var onUnsubscribeSucceedCanceled = function onUnsubscribeSucceedCanceled(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$l);
  return updateNotifiers(absintheSocket, remove$1(flushCanceled(notifier)));
}.bind(undefined);

var onUnsubscribeSucceedActive = function onUnsubscribeSucceedActive(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$l);
  return subscribe(absintheSocket, refreshNotifier(absintheSocket, reset(notifier)));
}.bind(undefined);

var createUnsubscribeError = function createUnsubscribeError(message) {
  (0, _newArrowCheck2.default)(this, _this$l);
  return new Error("unsubscribe: ".concat(message));
}.bind(undefined);

var unsubscribeHandler = {
  onError: function onError$$1(absintheSocket, notifier, errorMessage) {
    (0, _newArrowCheck2.default)(this, _this$l);
    return abortNotifier(absintheSocket, notifier, createUnsubscribeError(errorMessage));
  }.bind(undefined),
  onTimeout: function onTimeout(absintheSocket, notifier) {
    (0, _newArrowCheck2.default)(this, _this$l);
    return notifyCanceled(notifier, createErrorEvent(createUnsubscribeError("timeout")));
  }.bind(undefined),
  onSucceed: function onSucceed(absintheSocket, notifier) {
    (0, _newArrowCheck2.default)(this, _this$l);

    if (notifier.isActive) {
      onUnsubscribeSucceedActive(absintheSocket, notifier);
    } else {
      onUnsubscribeSucceedCanceled(absintheSocket, notifier);
    }
  }.bind(undefined)
};

var pushAbsintheUnsubscribeEvent = function pushAbsintheUnsubscribeEvent(absintheSocket, _ref) {
  var request = _ref.request,
      subscriptionId = _ref.subscriptionId;
  (0, _newArrowCheck2.default)(this, _this$l);
  return pushAbsintheEvent(absintheSocket, request, unsubscribeHandler, createAbsintheUnsubscribeEvent({
    subscriptionId: subscriptionId
  }));
}.bind(undefined);

var unsubscribe = function unsubscribe(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$l);
  return pushAbsintheUnsubscribeEvent(absintheSocket, refreshNotifier(absintheSocket, (0, _objectSpread2.default)({}, notifier, {
    requestStatus: requestStatuses.canceling
  })));
}.bind(undefined);

var onSubscribeSucceed = function onSubscribeSucceed(absintheSocket, notifier, _ref2) {
  var subscriptionId = _ref2.subscriptionId;
  (0, _newArrowCheck2.default)(this, _this$l);
  var subscribedNotifier = refreshNotifier(absintheSocket, (0, _objectSpread2.default)({}, notifier, {
    subscriptionId: subscriptionId,
    requestStatus: requestStatuses.sent
  }));

  if (subscribedNotifier.isActive) {
    notifyStartEvent(subscribedNotifier);
  } else {
    unsubscribe(absintheSocket, subscribedNotifier);
  }
}.bind(undefined);

var onSubscribe = function onSubscribe(absintheSocket, notifier, response) {
  (0, _newArrowCheck2.default)(this, _this$l);

  if (response.errors) {
    onError(absintheSocket, notifier, (0, _utilsGraphql.errorsToString)(response.errors));
  } else {
    onSubscribeSucceed(absintheSocket, notifier, response);
  }
}.bind(undefined);

var subscribe = function subscribe(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$l);
  return pushRequestUsing(absintheSocket, notifier, onSubscribe);
}.bind(undefined);

var onDataMessage = function onDataMessage(absintheSocket, _ref3) {
  var payload = _ref3.payload;
  (0, _newArrowCheck2.default)(this, _this$l);
  var notifier = find(absintheSocket.notifiers, "subscriptionId", payload.subscriptionId);

  if (notifier) {
    notifyResultEvent(notifier, payload.result);
  }
}.bind(undefined);

var dataMessageEventName = "subscription:data";

var isDataMessage = function isDataMessage(message) {
  (0, _newArrowCheck2.default)(this, _this$l);
  return message.event === dataMessageEventName;
}.bind(undefined);

var _this$m = undefined;

var cancelQueryOrMutationSending = function cancelQueryOrMutationSending(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return updateNotifiers(absintheSocket, refresh(flushCanceled(cancel(notifier))));
}.bind(undefined);

var cancelQueryOrMutationIfSending = function cancelQueryOrMutationIfSending(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return notifier.requestStatus === requestStatuses.sending ? cancelQueryOrMutationSending(absintheSocket, notifier) : absintheSocket;
}.bind(undefined);

var cancelPending = function cancelPending(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return updateNotifiers(absintheSocket, remove$1(flushCanceled(cancel(notifier))));
}.bind(undefined);

var cancelQueryOrMutation = function cancelQueryOrMutation(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return notifier.requestStatus === requestStatuses.pending ? cancelPending(absintheSocket, notifier) : cancelQueryOrMutationIfSending(absintheSocket, notifier);
}.bind(undefined);

var unsubscribeIfNeeded = function unsubscribeIfNeeded(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return notifier.requestStatus === requestStatuses.sent ? unsubscribe(absintheSocket, notifier) : absintheSocket;
}.bind(undefined);

var cancelNonPendingSubscription = function cancelNonPendingSubscription(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return unsubscribeIfNeeded(absintheSocket, refreshNotifier(absintheSocket, cancel(notifier)));
}.bind(undefined);

var cancelSubscription = function cancelSubscription(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return notifier.requestStatus === requestStatuses.pending ? cancelPending(absintheSocket, notifier) : cancelNonPendingSubscription(absintheSocket, notifier);
}.bind(undefined);

var cancelActive = function cancelActive(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return notifier.operationType === "subscription" ? cancelSubscription(absintheSocket, notifier) : cancelQueryOrMutation(absintheSocket, notifier);
}.bind(undefined);
/**
 * Cancels a notifier sending a Cancel event to all its observers and
 * unsubscribing in case it holds a subscription request
 *
 * @example
 * import * as withAbsintheSocket from "@absinthe/socket";
 *
 * withAbsintheSocket.cancel(absintheSocket, notifier);
 */


var cancel$1 = function cancel$$1(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$m);
  return notifier.isActive ? cancelActive(absintheSocket, notifier) : absintheSocket;
}.bind(undefined);

exports.cancel = cancel$1;
var _this$n = undefined;

var setNotifierRequestStatusSent = function setNotifierRequestStatusSent(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$n);
  return refreshNotifier(absintheSocket, (0, _objectSpread2.default)({}, notifier, {
    requestStatus: requestStatuses.sent
  }));
}.bind(undefined);

var onQueryOrMutationSucceed = function onQueryOrMutationSucceed(absintheSocket, notifier, response) {
  (0, _newArrowCheck2.default)(this, _this$n);
  return updateNotifiers(absintheSocket, remove$1(notifyResultEvent(setNotifierRequestStatusSent(absintheSocket, notifier), response)));
}.bind(undefined);

var pushQueryOrMutation = function pushQueryOrMutation(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$n);
  return pushRequestUsing(absintheSocket, notifyStartEvent(notifier), onQueryOrMutationSucceed);
}.bind(undefined);

var pushRequest = function pushRequest(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$n);

  if (notifier.operationType === "subscription") {
    subscribe(absintheSocket, notifier);
  } else {
    pushQueryOrMutation(absintheSocket, notifier);
  }
}.bind(undefined);

var _this$o = undefined;

var createChannelJoinError = function createChannelJoinError(message) {
  (0, _newArrowCheck2.default)(this, _this$o);
  return new Error("channel join: ".concat(message));
}.bind(undefined);

var notifyErrorToAllActive = function notifyErrorToAllActive(absintheSocket, errorMessage) {
  var _this2 = this;

  (0, _newArrowCheck2.default)(this, _this$o);
  return absintheSocket.notifiers.forEach(function (notifier) {
    (0, _newArrowCheck2.default)(this, _this2);
    return notifyActive(notifier, createErrorEvent(createChannelJoinError(errorMessage)));
  }.bind(this));
}.bind(undefined); // join Push is reused and so the handler
// https://github.com/phoenixframework/phoenix/blob/master/assets/js/phoenix.js#L356


var createChannelJoinHandler = function createChannelJoinHandler(absintheSocket) {
  var _this3 = this;

  (0, _newArrowCheck2.default)(this, _this$o);
  return {
    onError: function onError(errorMessage) {
      (0, _newArrowCheck2.default)(this, _this3);
      return notifyErrorToAllActive(absintheSocket, errorMessage);
    }.bind(this),
    onSucceed: function onSucceed() {
      var _this4 = this;

      (0, _newArrowCheck2.default)(this, _this3);
      return absintheSocket.notifiers.forEach(function (notifier) {
        (0, _newArrowCheck2.default)(this, _this4);
        return pushRequest(absintheSocket, notifier);
      }.bind(this));
    }.bind(this),
    onTimeout: function onTimeout() {
      (0, _newArrowCheck2.default)(this, _this3);
      return notifyErrorToAllActive(absintheSocket, "timeout");
    }.bind(this)
  };
}.bind(undefined);

var joinChannel = function joinChannel(absintheSocket) {
  (0, _newArrowCheck2.default)(this, _this$o);
  handlePush(absintheSocket.channel.join(), createChannelJoinHandler(absintheSocket));
  absintheSocket.channelJoinCreated = true;
  return absintheSocket;
}.bind(undefined);

var _this$p = undefined;

var onMessage = function onMessage(absintheSocket) {
  var _this2 = this;

  (0, _newArrowCheck2.default)(this, _this$p);
  return function (message) {
    (0, _newArrowCheck2.default)(this, _this2);

    if (isDataMessage(message)) {
      onDataMessage(absintheSocket, message);
    }
  }.bind(this);
}.bind(undefined);

var createConnectionCloseError = function createConnectionCloseError() {
  (0, _newArrowCheck2.default)(this, _this$p);
  return new Error("connection: close");
}.bind(undefined);

var notifyConnectionCloseError = function notifyConnectionCloseError(notifier) {
  (0, _newArrowCheck2.default)(this, _this$p);
  return notify(notifier, createErrorEvent(createConnectionCloseError()));
}.bind(undefined);

var notifierOnConnectionCloseCanceled = function notifierOnConnectionCloseCanceled(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$p);
  return updateNotifiers(absintheSocket, remove$1(notifyConnectionCloseError(notifier)));
}.bind(undefined);

var notifierOnConnectionCloseActive = function notifierOnConnectionCloseActive(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$p);

  if (notifier.operationType === "mutation") {
    abortNotifier(absintheSocket, notifier, createConnectionCloseError());
  } else {
    refreshNotifier(absintheSocket, reset(notifyConnectionCloseError(notifier)));
  }
}.bind(undefined);

var notifierOnConnectionClose = function notifierOnConnectionClose(absintheSocket) {
  var _this3 = this;

  (0, _newArrowCheck2.default)(this, _this$p);
  return function (notifier) {
    (0, _newArrowCheck2.default)(this, _this3);

    if (notifier.isActive) {
      notifierOnConnectionCloseActive(absintheSocket, notifier);
    } else {
      notifierOnConnectionCloseCanceled(absintheSocket, notifier);
    }
  }.bind(this);
}.bind(undefined);

var onConnectionClose = function onConnectionClose(absintheSocket) {
  var _this4 = this;

  (0, _newArrowCheck2.default)(this, _this$p);
  return function () {
    (0, _newArrowCheck2.default)(this, _this4);
    return absintheSocket.notifiers.forEach(notifierOnConnectionClose(absintheSocket));
  }.bind(this);
}.bind(undefined);

var shouldJoinChannel = function shouldJoinChannel(absintheSocket) {
  (0, _newArrowCheck2.default)(this, _this$p);
  return !absintheSocket.channelJoinCreated && absintheSocket.notifiers.length > 0;
}.bind(undefined);

var onConnectionOpen = function onConnectionOpen(absintheSocket) {
  var _this5 = this;

  (0, _newArrowCheck2.default)(this, _this$p);
  return function () {
    (0, _newArrowCheck2.default)(this, _this5);

    if (shouldJoinChannel(absintheSocket)) {
      joinChannel(absintheSocket);
    }
  }.bind(this);
}.bind(undefined);

var absintheChannelName = "__absinthe__:control";
/**
 * Creates an Absinthe Socket using the given Phoenix Socket instance
 *
 * @example
 * import * as withAbsintheSocket from "@absinthe/socket";
 * import {Socket as PhoenixSocket} from "phoenix";

 * const absintheSocket = withAbsintheSocket.create(
 *   new PhoenixSocket("ws://localhost:4000/socket")
 * );
 */

var create = function create(phoenixSocket) {
  (0, _newArrowCheck2.default)(this, _this$p);
  var absintheSocket = {
    phoenixSocket: phoenixSocket,
    channel: phoenixSocket.channel(absintheChannelName),
    channelJoinCreated: false,
    notifiers: []
  };
  phoenixSocket.onOpen(onConnectionOpen(absintheSocket));
  phoenixSocket.onClose(onConnectionClose(absintheSocket));
  phoenixSocket.onMessage(onMessage(absintheSocket));
  return absintheSocket;
}.bind(undefined);

exports.create = create;
var _this$q = undefined;

var observe = function observe(_ref, observer) {
  var activeObservers = _ref.activeObservers,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["activeObservers"]);
  (0, _newArrowCheck2.default)(this, _this$q);
  return (0, _objectSpread2.default)({}, rest, {
    activeObservers: (0, _toConsumableArray2.default)(activeObservers).concat([observer]),
    isActive: true
  });
}.bind(undefined);

var _this$r = undefined;
/**
 * Observes given notifier using the provided observer
 *
 * @example
 * import * as withAbsintheSocket from "@absinthe/socket"
 *
 * const logEvent = eventName => (...args) => console.log(eventName, ...args);
 *
 * const updatedNotifier = withAbsintheSocket.observe(absintheSocket, notifier, {
 *   onAbort: logEvent("abort"),
 *   onError: logEvent("error"),
 *   onStart: logEvent("open"),
 *   onResult: logEvent("result")
 * });
 */

var observe$1 = function observe$$1(absintheSocket, notifier, observer) {
  (0, _newArrowCheck2.default)(this, _this$r);
  return refreshNotifier(absintheSocket, observe(notifier, observer));
}.bind(undefined);

exports.observe = observe$1;
var _this$s = undefined;

var createUsing = function createUsing(request, operationType) {
  (0, _newArrowCheck2.default)(this, _this$s);
  return {
    operationType: operationType,
    request: request,
    activeObservers: [],
    canceledObservers: [],
    isActive: true,
    requestStatus: requestStatuses.pending,
    subscriptionId: undefined
  };
}.bind(undefined);

var create$1 = function create(request) {
  (0, _newArrowCheck2.default)(this, _this$s);
  return createUsing(request, (0, _utilsGraphql.getOperationType)(request.operation));
}.bind(undefined);

var _this$t = undefined;

var reactivate = function reactivate(notifier) {
  (0, _newArrowCheck2.default)(this, _this$t);
  return notifier.isActive ? notifier : (0, _objectSpread2.default)({}, notifier, {
    isActive: true
  });
}.bind(undefined);

var _this$u = undefined;

var connectOrJoinChannel = function connectOrJoinChannel(absintheSocket) {
  (0, _newArrowCheck2.default)(this, _this$u);

  if (absintheSocket.phoenixSocket.isConnected()) {
    joinChannel(absintheSocket);
  } else {
    // socket ignores connect calls if a connection has already been created
    absintheSocket.phoenixSocket.connect();
  }
}.bind(undefined);

var sendNew = function sendNew(absintheSocket, request) {
  (0, _newArrowCheck2.default)(this, _this$u);
  var notifier = create$1(request);
  updateNotifiers(absintheSocket, (0, _utilsArray.append)([notifier]));

  if (absintheSocket.channelJoinCreated) {
    pushRequest(absintheSocket, notifier);
  } else {
    connectOrJoinChannel(absintheSocket);
  }

  return notifier;
}.bind(undefined);

var updateCanceledReactivate = function updateCanceledReactivate(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$u);
  return refreshNotifier(absintheSocket, reactivate(notifier));
}.bind(undefined);

var updateCanceled = function updateCanceled(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$u);
  return notifier.requestStatus === requestStatuses.sending ? updateCanceledReactivate(absintheSocket, flushCanceled(notifier)) : updateCanceledReactivate(absintheSocket, notifier);
}.bind(undefined);

var updateIfCanceled = function updateIfCanceled(absintheSocket, notifier) {
  (0, _newArrowCheck2.default)(this, _this$u);
  return notifier.isActive ? notifier : updateCanceled(absintheSocket, notifier);
}.bind(undefined);

var getExistentIfAny = function getExistentIfAny(absintheSocket, request) {
  (0, _newArrowCheck2.default)(this, _this$u);
  var notifier = find(absintheSocket.notifiers, "request", request);
  return notifier && updateIfCanceled(absintheSocket, notifier);
}.bind(undefined);
/**
 * Sends given request and returns an object (notifier) to track its progress
 * (see observe function)
 *
 * @example
 * import * as withAbsintheSocket from "@absinthe/socket";
 *
 * const operation = `
 *   subscription userSubscription($userId: ID!) {
 *     user(userId: $userId) {
 *       id
 *       name
 *     }
 *   }
 * `;
 *
 * // This example uses a subscription, but the functionallity is the same for
 * // all operation types (queries, mutations and subscriptions)
 *
 * const notifier = withAbsintheSocket.send(absintheSocket, {
 *   operation,
 *   variables: {userId: 10}
 * });
 */


var send = function send(absintheSocket, request) {
  (0, _newArrowCheck2.default)(this, _this$u);
  return getExistentIfAny(absintheSocket, request) || sendNew(absintheSocket, request);
}.bind(undefined);

exports.send = send;
var _this$v = undefined; // prettier-ignore

var getUnsubscriber = function getUnsubscriber(absintheSocket, _ref, observer, unsubscribe) {
  var _this2 = this;

  var request = _ref.request;
  (0, _newArrowCheck2.default)(this, _this$v);
  return function () {
    (0, _newArrowCheck2.default)(this, _this2);
    var notifier = find(absintheSocket.notifiers, "request", request);
    unsubscribe(absintheSocket, notifier, notifier ? observer : undefined);
  }.bind(this);
}.bind(undefined);

var onResult = function onResult(_ref2, observableObserver) {
  var _this3 = this;

  var operationType = _ref2.operationType;
  (0, _newArrowCheck2.default)(this, _this$v);
  return function (result) {
    (0, _newArrowCheck2.default)(this, _this3);
    observableObserver.next(result);

    if (operationType !== "subscription") {
      observableObserver.complete();
    }
  }.bind(this);
}.bind(undefined);

var createObserver = function createObserver(notifier, handlers, observableObserver) {
  (0, _newArrowCheck2.default)(this, _this$v);
  return (0, _objectSpread2.default)({}, handlers, {
    onAbort: observableObserver.error.bind(observableObserver),
    onResult: onResult(notifier, observableObserver)
  });
}.bind(undefined);
/**
 * Creates an Observable that will follow the given notifier
 *
 * @param {AbsintheSocket} absintheSocket
 * @param {Notifier<Result, Variables>} notifier
 * @param {Object} [options]
 * @param {function(error: Error): undefined} [options.onError]
 * @param {function(notifier: Notifier<Result, Variables>): undefined} [options.onStart]
 * @param {function(): undefined} [options.unsubscribe]
 *
 * @return {Observable}
 *
 * @example
 * import * as withAbsintheSocket from "@absinthe/socket";
 *
 * const unobserveOrCancelIfNeeded = (absintheSocket, notifier, observer) => {
 *   if (notifier && observer) {
 *     withAbsintheSocket.unobserveOrCancel(absintheSocket, notifier, observer);
 *   }
 * };
 *
 * const logEvent = eventName => (...args) => console.log(eventName, ...args);
 *
 * const observable = withAbsintheSocket.toObservable(absintheSocket, notifier, {
 *   onError: logEvent("error"),
 *   onStart: logEvent("open"),
 *   unsubscribe: unobserveOrCancelIfNeeded
 * });
 */


var toObservable = function toObservable(absintheSocket, notifier) {
  var _this4 = this;

  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      unsubscribe = _ref3.unsubscribe,
      handlers = (0, _objectWithoutProperties2.default)(_ref3, ["unsubscribe"]);

  (0, _newArrowCheck2.default)(this, _this$v);
  return new _zenObservable.default(function (observableObserver) {
    (0, _newArrowCheck2.default)(this, _this4);
    var observer = createObserver(notifier, handlers, observableObserver);
    observe$1(absintheSocket, notifier, observer);
    return unsubscribe && getUnsubscriber(absintheSocket, notifier, observer, unsubscribe);
  }.bind(this));
}.bind(undefined);

exports.toObservable = toObservable;
var _this$w = undefined;

var removeObserver = function removeObserver(observers, observer) {
  (0, _newArrowCheck2.default)(this, _this$w);
  return (0, _utilsArray.remove)(observers.indexOf(observer), 1, observers);
}.bind(undefined);

var unobserve = function unobserve(_ref, observer) {
  var activeObservers = _ref.activeObservers,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["activeObservers"]);
  (0, _newArrowCheck2.default)(this, _this$w);
  return (0, _objectSpread2.default)({}, rest, {
    activeObservers: removeObserver(activeObservers, observer)
  });
}.bind(undefined);

var _this$x = undefined;

var ensureHasActiveObserver = function ensureHasActiveObserver(notifier, observer) {
  (0, _newArrowCheck2.default)(this, _this$x);
  if (notifier.activeObservers.includes(observer)) return notifier;
  throw new Error("Observer is not attached to notifier");
}.bind(undefined);
/**
 * Detaches observer from notifier
 *
 * @example
 * import * as withAbsintheSocket from "@absinthe/socket";
 *
 * withAbsintheSocket.unobserve(absintheSocket, notifier, observer);
 */


var unobserve$1 = function unobserve$$1(absintheSocket, notifier, observer) {
  (0, _newArrowCheck2.default)(this, _this$x);
  return updateNotifiers(absintheSocket, refresh(unobserve(ensureHasActiveObserver(notifier, observer), observer)));
}.bind(undefined);

exports.unobserve = unobserve$1;
var _this$y = undefined;

var doUnobserveOrCancel = function doUnobserveOrCancel(absintheSocket, notifier, observer) {
  (0, _newArrowCheck2.default)(this, _this$y);
  return notifier.activeObservers.length === 1 ? cancel$1(absintheSocket, notifier) : unobserve$1(absintheSocket, notifier, observer);
}.bind(undefined);
/**
 * Cancels notifier if there are no more observers apart from the one given, or
 * detaches given observer from notifier otherwise
 *
 * @example
 * import * as withAbsintheSocket from "@absinthe/socket";
 *
 * withAbsintheSocket.unobserve(absintheSocket, notifier, observer);
 */


var unobserveOrCancel = function unobserveOrCancel(absintheSocket, notifier, observer) {
  (0, _newArrowCheck2.default)(this, _this$y);
  return notifier.isActive ? doUnobserveOrCancel(absintheSocket, notifier, observer) : absintheSocket;
}.bind(undefined);

exports.unobserveOrCancel = unobserveOrCancel;
},{"core-js/modules/es6.array.find-index":"sVmK","core-js/modules/es6.array.find":"Qppk","core-js/modules/es6.function.name":"N3yi","@jumpn/utils-composite":"Q0fQ","phoenix":"XFqm","core-js/modules/web.dom.iterable":"v6Aj","core-js/modules/es6.array.for-each":"VsIt","@babel/runtime/helpers/toConsumableArray":"Fhqp","@jumpn/utils-graphql":"hqAf","zen-observable":"U0NN","core-js/modules/es7.array.includes":"TLss","core-js/modules/es6.string.includes":"fH7p","@babel/runtime/helpers/objectSpread":"fwAU","@babel/runtime/helpers/objectWithoutProperties":"U8F3","core-js/modules/es6.array.index-of":"LvRh","@jumpn/utils-array":"YuTU","core-js/modules/es6.function.bind":"WIhg","@babel/runtime/helpers/newArrowCheck":"tS9b"}],"P6qz":[function(require,module,exports) {
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLClientSocket = void 0;

var AbsintheSocket = __importStar(require("@absinthe/socket"));

var Phoenix = __importStar(require("phoenix"));

var GraphQLClient_1 = require("./GraphQLClient");

var GraphQLClientSocket = function GraphQLClientSocket() {
  var _this = this;

  _classCallCheck(this, GraphQLClientSocket);

  this.notifiers = {};

  this.initialize = function (_ref) {
    var url = _ref.url,
        token = _ref.token;
    _this.url = url;
    _this.token = token;
    _this.absintheSocket = AbsintheSocket.create(new Phoenix.Socket(_this.url, {
      params: {
        token: _this.token
      }
    }));
  };

  this.subscribe = function (params) {
    var query = params.query,
        onAbort = params.onAbort,
        onStart = params.onStart,
        onResult = params.onResult;
    var subscriptionName = GraphQLClient_1.parseGraphQLMethodFromQuery(query);

    if (_this.notifiers[subscriptionName]) {
      _this.unsubscribe(subscriptionName);
    }

    var notifier = AbsintheSocket.send(_this.absintheSocket, {
      operation: query
    });
    AbsintheSocket.observe(_this.absintheSocket, notifier, {
      onStart: onStart || function () {},
      onAbort: onAbort || function () {},
      onResult: onResult || function () {}
    });
    _this.notifiers[subscriptionName] = notifier;
  };

  this.unsubscribe = function (query) {
    var subscriptionName = GraphQLClient_1.parseGraphQLMethodFromQuery(query);

    if (_this.notifiers[subscriptionName]) {
      AbsintheSocket.cancel(_this.absintheSocket, _this.notifiers[subscriptionName]);
      delete _this.notifiers[subscriptionName];
    }
  };

  this.destroy = function () {
    for (var subscriptionName in _this.notifiers) {
      AbsintheSocket.cancel(_this.absintheSocket, _this.notifiers[subscriptionName]);
      delete _this.notifiers[subscriptionName];
    }

    _this.url = null;
    _this.token = null;
    _this.absintheSocket = null;
  };
};

exports.GraphQLClientSocket = GraphQLClientSocket;
},{"@absinthe/socket":"zTqj","phoenix":"XFqm","./GraphQLClient":"fvSB"}],"H1kZ":[function(require,module,exports) {
"use strict";
/**
 * Styles are imported as base64-strings via fs.readFileSync() in order to include
 * them into a single-bundle JS file, not simply copy to /dist folder as separate files
 *
 * Note that Parcel bundler utilizes a very limited custom implementation of fs.readFileSync()
 * @see https://en.parceljs.org/javascript.html#javascript
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var fs = require('fs');

var woffDataPrefix = 'data:font/woff;base64,';
var svgDataPrefix = 'data:image/svg+xml;base64,';
var mp3DataPrefix = 'data:audio/mpeg;base64,';
exports.default = {
  fontGraphikBold: woffDataPrefix + "",
  fontGraphikMedium: woffDataPrefix + "",
  fontGraphikRegular: woffDataPrefix + "",
  fontGraphikRegularItalic: woffDataPrefix + "",
  fontElixirchatIcons: woffDataPrefix + "d09GRgABAAAAAAqMAAsAAAAAEAgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADsAAABUIIslek9TLzIAAAFEAAAAQgAAAFZHK04JY21hcAAAAYgAAAB/AAACCorO9ixnbHlmAAACCAAABf4AAAiYjY1FkmhlYWQAAAgIAAAAMwAAADYcx2twaGhlYQAACDwAAAAeAAAAJAoTBmhobXR4AAAIXAAAADIAAAA0NwD//2xvY2EAAAiQAAAAHAAAABwJaAv6bWF4cAAACKwAAAAfAAAAIAEqAPZuYW1lAAAIzAAAATsAAAJ2qMXyc3Bvc3QAAAoIAAAAggAAALYjab9teJxjYGRgYOBiMGCwY2BycfMJYeDLSSzJY5BiYGGAAJA8MpsxJzM9kYEDxgPKsYBpDiBmg4gCACY7BUgAeJxjYGSxZpzAwMrAwCDAtAdI9kBoxgcMhoxMDAxMDKzMDFhBQJprCoPDR8aPPMxB/7MYopgjGRYAhRlBcgCZyQrBAAB4nO2RyxHDMAhEnyws/1RKCkhBOaWqtEgFDguHNBHNvN1hhXQAYAV68AgM2puGzivSlnnnzNx4Zo8p93nfoU0ataUu0Wvx42Bj54h3FzMuBv8zUz+/yluR01wK5L3QVtwKzdfXQhvzUSDfCuR7gfwokJ+FNulXgXwWzC8dGSB1AHicrVRbbBzlFf7PzM7szo537rf1eGc9s9nZBDtre3Y9s7G96xobsHMBcRGQ1LkUKVxcpCoSbfoAbRG3tCDRFwJCQggipIjLSxC5WEImEYEXxE0B+tA0qqAioeoVCUjsHffM2obSSoWHjn79c/7vnP/MuXxnCBCy/CBVp0eJTAgEhpbmwNBYrwJ+PYIQLlmuHN8Lv5TdASm+WZbhsESP9Fal+P74QanqSvCMNCDDsxLBJ/F1B7tAX08sQpgArw/Xq1DyWPTplzwBdM0Eg74z6qfeKrmb3PyA2n6gfV+l5m1y11Fv9R/cSP2pHJRGPF1t/5h6bL03Uhry2/bGNd+30hfpG8k69N0Cv8JBC6pU4rsKAmWYHAjgUGHEgQMh/aEmCmq8ABOqIK6PQi1+LV5Qw0ZFyKkwgWIut74Rogg/0MJovxZ15Ak1jNajRefeikW8EC8oEd4TlJV7wmqe9BeYp00IftcIwjqGE9Z9L8nUYzUEWc0IZuA4HOMLejaehuNZvcDHM/F0tqDzcCye4fXCI3Acz4jDMdQ72podvlFf0Ffz3kM/Sm8nE5g3hFVg07jYKhWFEVbAoZJzpQoVPzn6eBLAMA1UhlFYpdIr5g6aw1nYnQXFzsaH+sParVc7ObEfftczdXlNNOw4kHW1ACDDlRwo3dl43pRE3f3hOninTxDsmT1Dtb7Yb6iyf9tDU1dNwm6uoEI2frZfEJxr9taixJMuBpNTPegJoKDoClyR7VbQZt4a3aR5VAnevaw2tHuzLQiXxeXG9ORDt/myutbbuVQJ6xlgjp5fHwc3CIflul9yPVaXNWM0YSbbB14VEG5BzQ0cQIUAJTfNwk9zGvcZzGk9trJ02izmlRcFTRNedAKnt+HSI07dKdaL8ZGPuINqT/YfPSrlqHav2T6vdGu25tQcynIbrlMvtj8uDhd/z3/N5VTC5fIqlyNssl9JiMwWkNRYWFbHHiMehaNIbYN6yjDhfS3Dshktrlq6otnz9z08vVV31MzYr+75wNYOavCcJnTZvKiiYCntqenfPv6JaorKgebolwpODaGTWjA1/K5IiqSPkPK3K1Eru56PQIglMBBg00i+jhZ1qeOtZrO1+GkTn5S1+Jmdz9spw7asv6j5vNp+ROnuVvKtFjUx3myOtxfGm5utHqqVWLVP9VgXzV4TF8awvLw8Rz+PMUikQBoYQxIAZiyCGYXJZ5FpFRw7NpnnoII1qJSrgO3xm1DB6nQaVsQ5pM705mWxS/+8fpbJpMDIAr/0NO/oWfoW3rkodmc2xYsZgX9BEhtqrf5khv2nUvyIauXXcWn1D+HbTIqOm/G1vJOlf8aDUeSXHuYHZDG6kGZE6dNxZ/D9KGTOScnPJ9WpW4gx95CQbCE/Srq2UrmkVUxCnrXITMaBijcAayHXsX9BOA6d1LRyC+o+DpQAJs6RlgwPhJVVMI2oAwmYzBi13/ZKtiLlzPhLJnu4gc9hjgVOdTmGWcoquROyJMknckp2kc0w1K7G2Fijq7eQ6hrotocH+VTBPeOWyy7v5iSmK18o5LsYKece9LrpO+0yl9bPs43RcyMN9oIi3cGc41hJ/rMiprk/MqnU0qWMtvXUmVNbRFZ15Suuu+mV5yclV2UP9f383v39IsvxJcndtXeXJ3k8x67OGH0e64OcguoqgaUkxd6EwcP1StrQtQT0kOb480ewFhgmTY/9ZubAXfsmp6Ym990FUiL1bnDGx26f+2ru9rHxRLh78hcRTVU2JBbx39dsD8zeIG674e41o461X8Je4dAvH2JfxlhyyK8NZBj/bdvIdrKX7CP3kF+Tx8gz5CVygpwm75Gz5MI3nXQ97M9/TQAdYAuxk9jdWun/JDPfyMiN75QxlO+WOz4xh/9pc3F2587ZSyfn55nmpdcHg2CQGRus1X9iWf2W9XhnfyKf78vnv7V/jVsWHOlAf/23/W8ddbvYedFLndfiinVyWnrzP9GdszuoyR2zR9uvHr05GKRGhoJgqP3GYEBpVl/H4HvsJ61E+l7rlFExcOX7TDO5muzkXweKrb8AAHicY2BkYGAA4i9P1F/H89t8ZeBmfgEUYbhdKvwSRv///z+BbT9zJJDLwcAEEgUAnKAOogB4nGNgZGBgDvqfxcDA9vE/ELDtZwCKoABeALUHB4YAAHicY2BgYGByYmBg+8jAwCIPwcybgbQ7EO9jYGCNAPI3/P/PagqkXwDVbWJgAACnOQgwAAAAAAAAACYAVACaANABQgGMAcgCCgJkAvQDOgRMeJxjYGRgYOBleMUgzAACTEDMBYQMDP/BfAYAIjgCIQB4nIWQO07DQBiEx3khEgkhgaDdCgoU5yEkpJQUSZ8ivbNZJ45sr7XeREnBBag4Cieg5BgcBTExf+Umtrz+Zv6ZXcsArvGNAKcrIEO4gQuqf26S7oVb5EfhNnp4Ee7QfxXu4glz4R5u8MYdgtYlHYUP4Qau8CncpP8l3CL/CLdxh1/hDlRwK9zFIngW7uEheDdpckic3kS+n2ibl3Oz3qWRq9t1vTCuTGyuRuGwPpqZ3LjIm5VaHlW5X4+9j1XsbKamNvcmTa0qnN0a7cON98VkMIjFD7XNYJAiwYGPg8YGETz6VBoWOUr+HYM1dkxFTJxLn5svmHB8J5VWGCHE8GxrxkReNU8TgxWbSxy5ltjz68Z0PWLqmBmLjDStur7aOyUrFNVsS0fTD3nOqVVgggHvuJYPq9OzPziMeGoAeJxtiFEOgjAQBfsQQQt4kx6K1KVtqF2yLSK3l0Tjl/M1M6pSH7T6z4AKJ9Q4o0GLC67Q6NBjwE3pUYQ3E2kqvfX0FE7mzlvqbORMpvhgZ/3zVE8hUh3ZcSe0xN1IcL7obIUoZc+lzwuNM4l5rIXab+i8hJSO+cpN2Q93Sr0B2GgsmQAA",
  iconWhatsapp: svgDataPrefix + "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iMzZweCIgaGVpZ2h0PSIzNXB4IiB2aWV3Qm94PSIwIDAgMzYgMzUiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8dGl0bGU+V0EtLTwvdGl0bGU+CiAgICA8ZyBpZD0iUGFnZS0xIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIgZmlsbD0ibm9uZSIgZmlsbC1ydWxlPSJldmVub2RkIj4KICAgICAgICA8ZyBpZD0iQXJ0Ym9hcmQiIHRyYW5zZm9ybT0idHJhbnNsYXRlKC0xNDEuMDAwMDAwLCAtNTQ1LjAwMDAwMCkiPgogICAgICAgICAgICA8ZyBpZD0iV2lkZ2V0LTkiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDk1LjAwMDAwMCwgOTEuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICA8ZyBpZD0iY2hhdCI+CiAgICAgICAgICAgICAgICAgICAgPGcgaWQ9ImhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPSJNRVNTRU5HRVJTLTIiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDIwLjA3NjczMywgMzk2LjAwMDAwMCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgaWQ9IklDT05TLTMtRVhQT1JUIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgyNi4wMDAwMDAsIDU4LjAwMDAwMCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPSJXQS0tIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3QgaWQ9IlJlY3RhbmdsZSIgZmlsbD0iIzcxQzQ2OCIgeD0iMCIgeT0iMCIgd2lkdGg9IjM0LjgwNzUwMiIgaGVpZ2h0PSIzNC44MDc1MDIiIHJ4PSI0Ij48L3JlY3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik04LjI4NzI3OTcyLDIyLjYyNDM5MjggTDguMjU3MTEzMjIsMjIuNTcxODkxNSBDNy4zMTA2MzkyMywyMC45MzMzMjg0IDYuODEwODYxNTIsMTkuMDYxNTU1IDYuODExNzMxNywxNy4xNTkzMjUgQzYuODE0MzQyMjcsMTEuMTg5ODM4NCAxMS42NzMxNzk1LDYuMzMzMDMxNjEgMTcuNjQyNjY2MSw2LjMzMzAzMTYxIEMyMC41MzgzNjAyLDYuMzMzOTAxOCAyMy4yNTk0MzY2LDcuNDYxNjY0ODYgMjUuMzA0MDg3Myw5LjUwODA1NTkyIEMyNy4zNDg0NDc5LDExLjU1NDE1NjkgMjguNDc0NDcwNiwxNC4yNzQ2NTMyIDI4LjQ3NDQ3MDYsMTcuMTY4MzE2OSBDMjguNDcxNTcsMjMuMTM4NjczNyAyMy42MTMwMjI4LDI3Ljk5NTc3MDUgMTcuNjQzNTM2MywyNy45OTU3NzA1IEMxNS44MzE1MTU3LDI3Ljk5NDkwMDMgMTQuMDQxNTM5OSwyNy41MzkyMTIxIDEyLjQ2MjcyOTYsMjYuNjc4MDE2NSBMMTIuNDEyMjU4OCwyNi42NTAxNzA1IEw2Ljc4MDk4NTA4LDI4LjEyNzE2ODggTDguMjg3Mjc5NzIsMjIuNjI0MzkyOCBaIiBpZD0iUGF0aCIgZmlsbD0iI0ZGRkZGRiIgZmlsbC1ydWxlPSJub256ZXJvIj48L3BhdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xNy41OTQyMjU2LDI1LjkxMjI1MTUgQzE2LjE0MTMwMjUsMjUuOTExMzgxMyAxNC43MDM3NTI3LDI1LjU0NTkwMjUgMTMuNDM3MDQ5NiwyNC44NTQ2ODM1IEwxMi42MDU0NDA0LDI0LjQwMTAyNTggTDExLjY4OTEzMjksMjQuNjQxMTk3NSBMOS44MDg5NDc2OSwyNS4xMzQwMTM3IEwxMC4yOTAxNjE0LDIzLjM3NTk0NDggTDEwLjU1MzI0ODEsMjIuNDE1MjU3OCBMMTAuMDU0OTIwNywyMS41NTI2MTE5IEM5LjI5NTUzNzAzLDIwLjIzNzc1ODUgOC44OTQzODA1NywxOC43MzQ2NTQ1IDguODk1MjQ5MzUsMTcuMjA2MzE1MSBDOC44OTcyODEyLDEyLjQxMDcxMTUgMTIuODAwNjUyNSw4LjUwOTA4MDYxIDE3LjU5NjI1NjEsOC41MDg1MDA0OCBDMTkuOTIzMTM3Niw4LjUwOTM3MDY3IDIyLjEwOTA0ODcsOS40MTUyMzU5MSAyMy43NTE2NzI3LDExLjA1OTAyMDIgQzI1LjM5NDI5NjgsMTIuNzAzMDk0NSAyNi4yOTkwMDE3LDE0Ljg4OTI5NTcgMjYuMjk5MDAxNywxNy4yMTM1NjY3IEMyNi4yOTY2ODEyLDIyLjAxMDA0MDQgMjIuMzkzMzEsMjUuOTEyMjUxNSAxNy41OTQyMjU2LDI1LjkxMjI1MTUgWiIgaWQ9IlBhdGgiIGZpbGw9IiM3MUM0NjgiIGZpbGwtcnVsZT0ibm9uemVybyI+PC9wYXRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMjIuNDAwODUxNiwxOS4zNDk4NzcxIEMyMi4xMzk3OTUzLDE5LjIxOTYzOSAyMC44NTc0Mjg5LDE4LjU4ODE3MjkgMjAuNjE4OTk3NiwxOC41MDE3MzQzIEMyMC4zNzk2OTYsMTguNDE0NDI1NSAyMC4yMDU5NDg1LDE4LjM3MTQ5NjIgMjAuMDMyMjAxMSwxOC42MzE5NzI0IEMxOS44NTg0NTM2LDE4Ljg5MzAyODYgMTkuMzU4Njc1OSwxOS40ODAxMTUyIDE5LjIwNjk3MzIsMTkuNjUzODYyNiBDMTkuMDU0OTgwNSwxOS44Mjc2MTAxIDE4LjkwMjk4NzcsMTkuODQ5MzY0OCAxOC42NDE5MzE0LDE5LjcxOTQxNjcgQzE4LjM4MDg3NTIsMTkuNTg5MTc4NyAxNy41NDA1NjQxLDE5LjMxMzMyOTIgMTYuNTQ0Nzc5NCwxOC40MjUxNTc4IEMxNS43NjkxNTIzLDE3LjczNDIyODkgMTUuMjQ1ODc5NSwxNi44Nzk5OTQ4IDE1LjA5NDE3NjgsMTYuNjE4OTM4NSBDMTQuOTQyMTg0LDE2LjM1Nzg4MjIgMTUuMDc3NjQzMiwxNi4yMTcyMDE5IDE1LjIwODQ2MTQsMTYuMDg2OTYzOSBDMTUuMzI1MzU2NiwxNS45NzAwNjg3IDE1LjQ2OTUxNzcsMTUuNzgyMTA4MSAxNS41OTk3NTU4LDE1LjYzMDExNTQgQzE1LjcyOTk5MzgsMTUuNDc4MTIyNiAxNS43NzM1MDMyLDE1LjM2OTA1OTEgMTUuODYwODEyLDE1LjE5NTAyMTYgQzE1Ljk0ODEyMDgsMTUuMDIxMjc0MiAxNS45MDQ2MTE1LDE0Ljg2ODQxMTIgMTUuODM5MDU3MywxNC43MzgxNzMyIEMxNS43NzM1MDMyLDE0LjYwNzkzNTEgMTUuMjUyMjYwOSwxMy4zMjQxMTg0IDE1LjAzNDcxNCwxMi44MDI1ODYgQzE0LjgyMzI1ODQsMTIuMjk0Mzk2NCAxNC42MDc3NDIsMTIuMzYzMTQxMyAxNC40NDc5MTc1LDEyLjM1NTMwOTYgQzE0LjI5NTkyNDgsMTIuMzQ3NDc3OSAxNC4xMjIxNzczLDEyLjM0NjYwNzcgMTMuOTQ4NDI5OSwxMi4zNDY2MDc3IEMxMy43NzQ2ODI0LDEyLjM0NjYwNzcgMTMuNDkxNTgxNCwxMi40MTIxNjE4IDEzLjI1MzE1LDEyLjY3MzIxODEgQzEzLjAxNDcxODYsMTIuOTM0Mjc0NCAxMi4zNDAzMjMzLDEzLjU2NDg3MDMgMTIuMzQwMzIzMywxNC44NDgxMDY4IEMxMi4zNDAzMjMzLDE2LjEzMTM0MzQgMTMuMjc0OTA0NywxNy4zNzEzNjA3IDEzLjQwNTE0MjgsMTcuNTQ1MTA4MSBDMTMuNTM1MzgwOCwxNy43MTg4NTU2IDE1LjI0MzU1OSwyMC4zNTIzMzMyIDE3Ljg2MDUwMywyMS40ODE1NDY1IEMxOC40ODIzOTcxLDIxLjc0OTU2NDMgMTguOTY4ODMxOSwyMS45MTAyNTg5IDE5LjM0NzA3MzQsMjIuMDMwOTI0OSBDMTkuOTcxNTc4LDIyLjIyOTMyNzcgMjAuNTQwMTAwNSwyMi4yMDExOTE2IDIwLjk4OTk4NzUsMjIuMTMzODk3MSBDMjEuNDkxMjE1NSwyMi4wNTg3NzA5IDIyLjUzMzQxMDIsMjEuNTAzMzAxMiAyMi43NDk3OTY4LDIwLjg5NDQ2IEMyMi45NjczNDM3LDIwLjI4NTYxODggMjIuOTY3MzQzNywxOS43NjM1MDYyIDIyLjkwMTc4OTYsMTkuNjU1MDIyOSBDMjIuODM1NjU1MywxOS41NDU2NjkzIDIyLjY2MTkwNzksMTkuNDgwMTE1MiAyMi40MDA4NTE2LDE5LjM0OTg3NzEgWiIgaWQ9IlBhdGgiIGZpbGw9IiNGRkZGRkYiIGZpbGwtcnVsZT0ibm9uemVybyI+PC9wYXRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgPC9nPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+",
  iconTelegram: svgDataPrefix + "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iMzdweCIgaGVpZ2h0PSIzNXB4IiB2aWV3Qm94PSIwIDAgMzcgMzUiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8dGl0bGU+VEcyPC90aXRsZT4KICAgIDxkZWZzPgogICAgICAgIDxsaW5lYXJHcmFkaWVudCB4MT0iNTAlIiB5MT0iMCUiIHgyPSI1MCUiIHkyPSIxMDAlIiBpZD0ibGluZWFyR3JhZGllbnQtMSI+CiAgICAgICAgICAgIDxzdG9wIHN0b3AtY29sb3I9IiMzN0FFRTIiIG9mZnNldD0iMCUiPjwvc3RvcD4KICAgICAgICAgICAgPHN0b3Agc3RvcC1jb2xvcj0iIzFFOTZDOCIgb2Zmc2V0PSIxMDAlIj48L3N0b3A+CiAgICAgICAgPC9saW5lYXJHcmFkaWVudD4KICAgICAgICA8cmVjdCBpZD0icGF0aC0yIiB4PSIwIiB5PSIwIiB3aWR0aD0iMzQuODA3NTAyIiBoZWlnaHQ9IjM0LjgwNzUwMiIgcng9IjQiPjwvcmVjdD4KICAgIDwvZGVmcz4KICAgIDxnIGlkPSJQYWdlLTEiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIxIiBmaWxsPSJub25lIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiPgogICAgICAgIDxnIGlkPSJBcnRib2FyZCIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTE4OS4wMDAwMDAsIC01NDUuMDAwMDAwKSI+CiAgICAgICAgICAgIDxnIGlkPSJXaWRnZXQtOSIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoOTUuMDAwMDAwLCA5MS4wMDAwMDApIj4KICAgICAgICAgICAgICAgIDxnIGlkPSJjaGF0Ij4KICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGcgaWQ9Ik1FU1NFTkdFUlMtMiIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMjAuMDc2NzMzLCAzOTYuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iSUNPTlMtMy1FWFBPUlQiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDI2LjAwMDAwMCwgNTguMDAwMDAwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgaWQ9IlRHMiIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoNDguNTk0MDAxLCAwLjAwMDAwMCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iUmVjdGFuZ2xlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgZmlsbD0idXJsKCNsaW5lYXJHcmFkaWVudC0xKSIgeGxpbms6aHJlZj0iI3BhdGgtMiI+PC91c2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGZpbGw9IiM1MkE0RDMiIHhsaW5rOmhyZWY9IiNwYXRoLTIiPjwvdXNlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik04LjI5MDg1Mjc3LDE3LjA0ODI4NzkgQzEzLjQ4MTcxMzEsMTQuNzU1OTcxNSAxNi45NDMwOTk2LDEzLjI0NDczNjIgMTguNjc1MDEyNCwxMi41MTQ1ODIgQzIzLjYxOTk3NTQsMTAuNDI5ODQzNSAyNC42NDc0OTYzLDEwLjA2NzcwMjEgMjUuMzE3MjIwMSwxMC4wNTU1MDA2IEMyNS40NjQ1MTk2LDEwLjA1MzExMzkgMjUuNzkzODcwMywxMC4wOTAxMTU0IDI2LjAwNzIwOTksMTAuMjY1NTc4NyBDMjYuMTg3MzQ5NiwxMC40MTM3MzY2IDI2LjIzNjkxMzIsMTAuNjEzODc2NyAyNi4yNjA2MzEsMTAuNzU0MzQ2NiBDMjYuMjg0MzQ4OCwxMC44OTQ4MTY1IDI2LjMxMzg4MzEsMTEuMjE0ODEwNCAyNi4yOTA0MDU2LDExLjQ2NDg0NDQgQzI2LjAyMjQzNjMsMTQuMzE4NjkyNCAyNC44NjI5Mzc2LDIxLjI0NDIyODggMjQuMjczMDUwNCwyNC40NDA1ODc0IEMyNC4wMjM0NDcsMjUuNzkzMDg2NSAyMy41MzE5NzAyLDI2LjI0NjU3MjYgMjMuMDU2MTYzNywyNi4yOTA5NTIyIEMyMi4wMjIxMjYyLDI2LjM4NzM5OTQgMjEuMjM2OTI1LDI1LjU5ODI5OTIgMjAuMjM1NDA5LDI0LjkzMjg2OTEgQzE4LjY2ODIzNDMsMjMuODkxNjAyNCAxNy43ODI4ODAzLDIzLjI0MzQxMDcgMTYuMjYxNjY1OSwyMi4yMjczMjY4IEMxNC41MDM2Mzk0LDIxLjA1MzA2NiAxNS42NDMyOTQ4LDIwLjQwNzY3MTkgMTYuNjQ1MTg5LDE5LjM1MjkxNzIgQzE2LjkwNzM4OTQsMTkuMDc2ODgyOSAyMS40NjMzODI2LDE0Ljg3NjUyNjEgMjEuNTUxNTY0LDE0LjQ5NTQ4NzkgQzIxLjU2MjU5MjYsMTQuNDQ3ODMyNyAyMS41NzI4Mjc2LDE0LjI3MDE5NjcgMjEuNDY4NzEyNCwxNC4xNzYzOTg0IEMyMS4zNjQ1OTcxLDE0LjA4MjYgMjEuMjEwOTMyMSwxNC4xMTQ2NzU0IDIxLjEwMDA0MywxNC4xNDAxODUyIEMyMC45NDI4NjEyLDE0LjE3NjM0NDYgMTguNDM5Mjc5MywxNS44NTM2MTI0IDEzLjU4OTI5NzIsMTkuMTcxOTg4NSBDMTIuODc4NjYzOCwxOS42NjY1OTcyIDEyLjIzNDk5NDIsMTkuOTA3NTg3MSAxMS42NTgyODgzLDE5Ljg5NDk1ODQgQzExLjAyMjUxNjIsMTkuODgxMDM2MiA5Ljc5OTU0NTkxLDE5LjUzMDU5NjkgOC44OTAzOTMyLDE5LjIzMTA1MDEgQzcuNzc1MjgwMzksMTguODYzNjQzOCA2Ljg4OTAxMDkyLDE4LjY2OTM5MzUgNi45NjYxODUwOCwxOC4wNDU0MjM5IEM3LjAwNjM4MjE1LDE3LjcyMDQyMTkgNy40NDc5MzgwNCwxNy4zODgwNDMzIDguMjkwODUyNzcsMTcuMDQ4Mjg3OSBaIiBpZD0iUGF0aCIgZmlsbD0iI0ZGRkZGRiIgZmlsbC1ydWxlPSJub256ZXJvIj48L3BhdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICA8L2c+CiAgICAgICAgPC9nPgogICAgPC9nPgo8L3N2Zz4=",
  iconFacebook: svgDataPrefix + "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iMzdweCIgaGVpZ2h0PSIzNXB4IiB2aWV3Qm94PSIwIDAgMzcgMzUiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8dGl0bGU+RkI8L3RpdGxlPgogICAgPGRlZnM+CiAgICAgICAgPGxpbmVhckdyYWRpZW50IHgxPSI1MCUiIHkxPSI5Ny4wNzgyMTUzJSIgeDI9IjUwJSIgeTI9IjAlIiBpZD0ibGluZWFyR3JhZGllbnQtMSI+CiAgICAgICAgICAgIDxzdG9wIHN0b3AtY29sb3I9IiMwMDYyRTAiIG9mZnNldD0iMCUiPjwvc3RvcD4KICAgICAgICAgICAgPHN0b3Agc3RvcC1jb2xvcj0iIzE5QUZGRiIgb2Zmc2V0PSIxMDAlIj48L3N0b3A+CiAgICAgICAgPC9saW5lYXJHcmFkaWVudD4KICAgICAgICA8cmVjdCBpZD0icGF0aC0yIiB4PSIwIiB5PSIwIiB3aWR0aD0iMzQuODA3NTAyIiBoZWlnaHQ9IjM0LjgwNzUwMiIgcng9IjQiPjwvcmVjdD4KICAgIDwvZGVmcz4KICAgIDxnIGlkPSJQYWdlLTEiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIxIiBmaWxsPSJub25lIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiPgogICAgICAgIDxnIGlkPSJBcnRib2FyZCIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTIzOC4wMDAwMDAsIC01NDUuMDAwMDAwKSI+CiAgICAgICAgICAgIDxnIGlkPSJXaWRnZXQtOSIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoOTUuMDAwMDAwLCA5MS4wMDAwMDApIj4KICAgICAgICAgICAgICAgIDxnIGlkPSJjaGF0Ij4KICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGcgaWQ9Ik1FU1NFTkdFUlMtMiIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMjAuMDc2NzMzLCAzOTYuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iSUNPTlMtMy1FWFBPUlQiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDI2LjAwMDAwMCwgNTguMDAwMDAwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgaWQ9IkZCIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSg5Ny4xODgwMDMsIDAuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPSJSZWN0YW5nbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBmaWxsPSJ1cmwoI2xpbmVhckdyYWRpZW50LTEpIiB4bGluazpocmVmPSIjcGF0aC0yIj48L3VzZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgZmlsbD0iIzQ2NjVBOCIgeGxpbms6aHJlZj0iI3BhdGgtMiI+PC91c2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD0iTTIzLjU1OTExODcsMzQuODA4NDUyNyBMMjMuNTU5MTE4NywyMS44OTcyNzIzIEwyNy40MzU5NjU4LDIxLjg5NzI3MjMgTDI4LjAxNjQ2ODcsMTcuMzk1OTQ0OSBMMjMuNTU5MTE4NywxNy4zOTU5NDQ5IEwyMy41NTkxMTg3LDE0LjUyMjEzMTcgQzIzLjU1OTExODcsMTMuMjE4ODkzNSAyMy45MjEwMDcxLDEyLjMzMDc3OTcgMjUuNzg5ODE5LDEyLjMzMDc3OTcgTDI4LjE3MzM5ODksMTIuMzI5NzM4MSBMMjguMTczMzk4OSw4LjMwMzcxNDY4IEMyNy43NjExNjc4LDguMjQ4ODU4NTUgMjYuMzQ2MjQ5OSw4LjEyNjMwMDIzIDI0LjcwMDEwMzEsOC4xMjYzMDAyMyBDMjEuMjYzNDkzNyw4LjEyNjMwMDIzIDE4LjkxMDY5ODEsMTAuMjI0MDI2NSAxOC45MTA2OTgxLDE0LjA3NjMzODggTDE4LjkxMDY5ODEsMTcuMzk1OTQ0OSBMMTUuMDIzODk4MSwxNy4zOTU5NDQ5IEwxNS4wMjM4OTgxLDIxLjg5NzI3MjMgTDE4LjkxMDY5ODEsMjEuODk3MjcyMyBMMTguOTEwNjk4MSwzNC44MDg0NTI3IEwyMy41NTkxMTg3LDM0LjgwODQ1MjcgWiIgaWQ9ImYiIGZpbGw9IiNGRkZGRkYiIGZpbGwtcnVsZT0ibm9uemVybyI+PC9wYXRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgPC9nPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+",
  iconSkype: svgDataPrefix + "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iMzdweCIgaGVpZ2h0PSIzNXB4IiB2aWV3Qm94PSIwIDAgMzcgMzUiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8dGl0bGU+U0tZUEUtLTwvdGl0bGU+CiAgICA8ZyBpZD0iUGFnZS0xIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIgZmlsbD0ibm9uZSIgZmlsbC1ydWxlPSJldmVub2RkIj4KICAgICAgICA8ZyBpZD0iQXJ0Ym9hcmQiIHRyYW5zZm9ybT0idHJhbnNsYXRlKC0zODMuMDAwMDAwLCAtNTQ1LjAwMDAwMCkiPgogICAgICAgICAgICA8ZyBpZD0iV2lkZ2V0LTkiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDk1LjAwMDAwMCwgOTEuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICA8ZyBpZD0iY2hhdCI+CiAgICAgICAgICAgICAgICAgICAgPGcgaWQ9ImhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPSJNRVNTRU5HRVJTLTIiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDIwLjA3NjczMywgMzk2LjAwMDAwMCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGcgaWQ9IklDT05TLTMtRVhQT1JUIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgyNi4wMDAwMDAsIDU4LjAwMDAwMCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPSJTS1lQRS0tIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgyNDIuOTcwMDA3LCAwLjAwMDAwMCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCBpZD0iUmVjdGFuZ2xlIiBmaWxsPSIjNDZBOUU0IiB4PSIwIiB5PSIwIiB3aWR0aD0iMzQuODA3NTAyIiBoZWlnaHQ9IjM0LjgwNzUwMiIgcng9IjQiPjwvcmVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD0iTTI2LjU2MjUxOTYsMTkuNzgwMDQ3NSBDMjYuNzA1OTU3MSwxOS4xNDM1NDM4IDI2Ljc3NzY3NTksMTguNDgzMTMzIDI2Ljc3NzY3NTksMTcuODA0NzkzNyBDMjYuNzc3Njc1OSwxMi43MzA2OTE1IDIyLjU4ODEwNDksOC42MTU4MjgxNiAxNy40MTgzNzg1LDguNjE1ODI4MTYgQzE2Ljg3NDUxMDksOC42MTU4MjgxNiAxNi4zMzk2MDkxLDguNjYzNjQwNjcgMTUuODE2NjU5Niw4Ljc1MDMwMDY0IEMxNC45Nzk5NDA4LDguMjMzMzI4MTQgMTMuOTkwODE5NSw3LjkzNDUgMTIuOTI5OTc5NCw3LjkzNDUgQzkuOTMyNzMzNjksNy45MzQ1IDcuNTAzMjYwMzIsMTAuMzE5MTQ4MiA3LjUwMzI2MDMyLDEzLjI2MjYwNiBDNy41MDMyNjAzMiwxNC4yNDU3NTA0IDcuNzcyMjA2MDMsMTUuMTY2MTQxIDguMjUwMzMxMDYsMTUuOTU4MDM1NCBDOC4xMjQ4MjI4NiwxNi41NTU2OTE3IDguMDU5MDgxMDUsMTcuMTc0MjY2MiA4LjA1OTA4MTA1LDE3LjgwNDc5MzcgQzguMDU5MDgxMDUsMjIuODgxODgzMyAxMi4yNDg2NTEyLDI2Ljk5Njc0NzQgMTcuNDE4Mzc4NSwyNi45OTY3NDc0IEMxOC4wMDQwODE2LDI2Ljk5Njc0NzQgMTguNTc3ODMxNiwyNi45NDI5NTc5IDE5LjEzMzY1MTYsMjYuODQxMzU2NyBDMTkuODk1NjYzNiwyNy4yNDQ3NzQyIDIwLjc3MTIyOTgsMjcuNDc0ODcyNCAyMS43MDA1ODU1LDI3LjQ3NDg3MjQgQzI0LjY5NzgzMiwyNy40NzQ4NzI0IDI3LjEyNzMwNDYsMjUuMDkwMjIzNCAyNy4xMjczMDQ2LDIyLjE0Njc2NjQgQzI3LjEyNDMxNjUsMjEuMjk1MTA2NCAyNi45MjQxMDE1LDIwLjQ5MTI1ODEgMjYuNTYyNTE5NiwxOS43ODAwNDc1IFogTTIyLjIxNzU1OCwyMi4xOTc1NjcgQzIxLjc4NzI0NTUsMjIuNzk4MjExNCAyMS4xNDc3NTM3LDIzLjI3NjMzNjQgMjAuMzE3MDExMSwyMy42MTQwMTI4IEMxOS40OTgyMjIzLDIzLjk0ODcwMDMgMTguNTEyMDg5MSwyNC4xMTkwMzIyIDE3LjM5NDQ3MjIsMjQuMTE5MDMyMiBDMTYuMDQ5NzQ1MiwyNC4xMTkwMzIyIDE0LjkyMDE3NTIsMjMuODg4OTM0NyAxNC4wNDE2MjAxLDIzLjQyODczOSBDMTMuNDE0MDgxNCwyMy4wOTcwMzk1IDEyLjg5NDEyLDIyLjY0MjgyMDggMTIuNTAyNjU1NywyMi4wODcwMDA4IEMxMi4xMDIyMjU2LDIxLjUyNTIwMzkgMTEuOTAyMDEwNiwyMC45NjYzOTUxIDExLjkwMjAxMDYsMjAuNDI1NTE2MyBDMTEuOTAyMDEwNiwyMC4wOTA4Mjg4IDEyLjAzMzQ5NSwxOS43OTc5NzY5IDEyLjI5MDQ4NzUsMTkuNTU4OTE0MyBDMTIuNTQ3NDc5NCwxOS4zMTk4NTE4IDEyLjg3NjE5MDcsMTkuMjAzMzA5NCAxMy4yNjc2NTU4LDE5LjIwMzMwOTQgQzEzLjU5MDM5MDIsMTkuMjAzMzA5NCAxMy44NjUzMTIsMTkuMjk1OTQ1NiAxNC4wOTI0MjE0LDE5LjQ4MTIxOTQgQzE0LjMwNzU3NzcsMTkuNjYwNTE2MyAxNC40OTI4NTA4LDE5LjkyNjQ3MzEgMTQuNjQyMjY1MiwyMC4yNzAxMjU3IEMxNC44MDY2MjAxLDIwLjY0MzY2MDcgMTQuOTg4OTA1OSwyMC45NTc0MyAxNS4xODAxNTU5LDIxLjIwNTQ1NzYgQzE1LjM2MjQ0MDgsMjEuNDQ0NTIwMSAxNS42MjgzOTc3LDIxLjY0NDczNTIgMTUuOTYzMDg1MiwyMS44MDAxMjU4IEMxNi4zMDM3NDk3LDIxLjk1ODUwNDUgMTYuNzYwOTU2NSwyMi4wMzkxODgzIDE3LjMyMjc1MzUsMjIuMDM5MTg4MyBDMTguMDk2NzE4NSwyMi4wMzkxODgzIDE4LjczMDIzNDIsMjEuODc3ODIwNyAxOS4yMDgzNTkyLDIxLjU1ODA3NTIgQzE5LjY3NDUzMTEsMjEuMjQ3MjkzOSAxOS45MDE2NDA1LDIwLjg3MDc3MDEgMTkuOTAxNjQwNSwyMC40MTA1NzUxIEMxOS45MDE2NDA1LDIwLjA0NjAwNDQgMTkuNzgyMTA5MywxOS43NjIxMTc1IDE5LjU0MDA1NzksMTkuNTM3OTk2OSBDMTkuMjg2MDU0MiwxOS4zMDQ5MTA2IDE4Ljk0ODM3ODUsMTkuMTIyNjI1NiAxOC41NDE5NzIzLDE4Ljk5NzExNzQgQzE4LjExNDY0NzgsMTguODY4NjIxOSAxNy41MzQ5MjE2LDE4LjcyODE3MjUgMTYuODIzNzEwMywxOC41Nzg3NTggQzE1Ljg1MjUxOSwxOC4zNzU1NTQ5IDE1LjAyNzc1MzMsMTguMTMzNTA0MyAxNC4zNzAzMzE0LDE3Ljg1ODU4MjQgQzEzLjY5Nzk2ODMsMTcuNTgwNjcyNCAxMy4xNTcwODg4LDE3LjE4OTIwNzQgMTIuNzYyNjM1NiwxNi43MDUxMDYyIEMxMi4zNTkyMTgyLDE2LjIxMjAzOTIgMTIuMTU5MDAzMiwxNS41OTA0NzY2IDEyLjE1OTAwMzIsMTQuODYxMzM1OSBDMTIuMTU5MDAzMiwxNC4xNjgwNTQ3IDEyLjM3MTE3MTMsMTMuNTQwNTE1OSAxMi43OTU1MDY5LDEzLjAwMjYyNTMgQzEzLjIxMDg3ODIsMTIuNDY3NzIyNyAxMy44MjM0NzU3LDEyLjA0OTM2MzMgMTQuNjEyMzgyLDExLjc2MjQ4ODMgQzE1LjM4NjM0NzEsMTEuNDgxNTkwMiAxNi4zMTI3MTQsMTEuMzM4MTUyNyAxNy4zNTU2MjQ3LDExLjMzODE1MjcgQzE4LjE5MjM0MzUsMTEuMzM4MTUyNyAxOC45Mjc0NjA0LDExLjQzMzc3NzcgMTkuNTQwMDU3OSwxMS42MjIwMzg5IEMyMC4xNTg2MzIzLDExLjgxMDMwMDggMjAuNjc4NTkzNywxMi4wNjQzMDQ1IDIxLjA4Nzk4OCwxMi4zNzgwNzQ3IEMyMS41MDAzNzA1LDEyLjY5NDgzMjEgMjEuODA1MTc1NiwxMy4wMzI1MDc3IDIxLjk5NjQyNTYsMTMuMzgyMTM3MiBDMjIuMTkwNjYzNywxMy43Mzc3NDIxIDIyLjI4OTI3NjgsMTQuMDkwMzU5NyAyMi4yODkyNzY4LDE0LjQzMTAyMzQgQzIyLjI4OTI3NjgsMTQuNzU5NzM0OCAyMi4xNjA3ODEzLDE1LjA1NTU3NDggMjEuOTA2Nzc2OCwxNS4zMTg1NDM2IEMyMS42NDk3ODQ5LDE1LjU3ODUyMzUgMjEuMzI0MDYyNSwxNS43MTAwMDc5IDIwLjk0NDU1MDUsMTUuNzEwMDA3OSBDMjAuNTk3OTA5OSwxNS43MTAwMDc5IDIwLjMyNTk3NjEsMTUuNjI5MzI0OCAyMC4xMzc3MTQyLDE1LjQ2NDk2OTIgQzE5Ljk2MTQwNjEsMTUuMzEyNTY2NiAxOS43NzkxMjA0LDE1LjA3NjQ5MjIgMTkuNTc4OTA2MSwxNC43MzU4Mjg1IEMxOS4zNDU4MTk4LDE0LjI5OTUzOSAxOS4wNjE5MzI5LDEzLjk1NTg4NzMgMTguNzM5MTk4NSwxMy43MTM4MzU5IEMxOC40MjU0MjkxLDEzLjQ4MDc1MDMgMTcuODk2NTAzNSwxMy4zNjEyMTkxIDE3LjE3NjMyNzksMTMuMzYxMjE5MSBDMTYuNTAzOTY0LDEzLjM2MTIxOTEgMTUuOTYwMDk3MSwxMy40OTI3MDM0IDE1LjU1MzY5MDksMTMuNzUyNjg0MSBDMTUuMTYyMjI1OCwxNC4wMDM2OTk4IDE0Ljk3Mzk2MzksMTQuMjkzNTYyOSAxNC45NzM5NjM5LDE0LjYzNDIyNjYgQzE0Ljk3Mzk2MzksMTQuODQzNDA2NiAxNS4wMzM3Mjk1LDE1LjAxOTcxNTQgMTUuMTU5MjM3NywxNS4xNjkxMjkxIEMxNS4yOTM3MTAyLDE1LjMyNzUwNzkgMTUuNDgxOTcyMSwxNS40Njc5NTczIDE1LjcxODA0NjUsMTUuNTg0NTAwNCBDMTUuOTY2MDczMywxNS43MDcwMTk4IDE2LjIxNzA4ODksMTUuODAyNjQ0OCAxNi40NzEwOTM0LDE1Ljg3MTM3NTUgQzE2LjczMTA3MzMsMTUuOTQzMDk0MiAxNy4xNjczNjI4LDE2LjA0NzY4NDIgMTcuNzY4MDA3MiwxNi4xODUxNDQ4IEMxOC41MjQwNDIyLDE2LjM0MzUyMzUgMTkuMjIwMzEyMywxNi41MTk4MzIzIDE5LjgzNTg5NzksMTYuNzE0MDcwNCBDMjAuNDU3NDYwNSwxNi45MTEyOTc0IDIwLjk5ODMzOTIsMTcuMTUwMzU5OSAyMS40Mzc2MTY4LDE3LjQzMTI1OCBDMjEuODg1ODU5NCwxNy43MTgxMzMgMjIuMjQxNDY0MywxOC4wODU2OTE4IDIyLjQ5MjQ3OTksMTguNTI0OTY5NCBDMjIuNzQ2NDg0NCwxOC45NjcyMzUgMjIuODcyMDIxNywxOS41MTExMDE4IDIyLjg3MjAyMTcsMjAuMTQ0NjE3NSBDMjIuODc0OTc5OSwyMC45MDM2NDE0IDIyLjY1Mzg0NzUsMjEuNTkzOTM0NiAyMi4yMTc1NTgsMjIuMTk3NTY3IFoiIGlkPSJTaGFwZSIgZmlsbD0iI0ZGRkZGRiIgZmlsbC1ydWxlPSJub256ZXJvIj48L3BhdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICA8L2c+CiAgICAgICAgPC9nPgogICAgPC9nPgo8L3N2Zz4=",
  iconViber: svgDataPrefix + "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iMzdweCIgaGVpZ2h0PSIzNXB4IiB2aWV3Qm94PSIwIDAgMzcgMzUiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8dGl0bGU+VklCRVI8L3RpdGxlPgogICAgPGcgaWQ9IlBhZ2UtMSIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiIGZpbGw9Im5vbmUiIGZpbGwtcnVsZT0iZXZlbm9kZCI+CiAgICAgICAgPGcgaWQ9IkFydGJvYXJkIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMzM1LjAwMDAwMCwgLTU0NS4wMDAwMDApIj4KICAgICAgICAgICAgPGcgaWQ9IldpZGdldC05IiB0cmFuc2Zvcm09InRyYW5zbGF0ZSg5NS4wMDAwMDAsIDkxLjAwMDAwMCkiPgogICAgICAgICAgICAgICAgPGcgaWQ9ImNoYXQiPgogICAgICAgICAgICAgICAgICAgIDxnIGlkPSJoZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iTUVTU0VOR0VSUy0yIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgyMC4wNzY3MzMsIDM5Ni4wMDAwMDApIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPSJJQ09OUy0zLUVYUE9SVCIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMjYuMDAwMDAwLCA1OC4wMDAwMDApIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iVklCRVIiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDE5NC4zNzYwMDYsIDAuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IGlkPSJSZWN0YW5nbGUiIGZpbGw9IiM3MzYwRjIiIHg9IjAiIHk9IjAiIHdpZHRoPSIzNC44MDc1MDIiIGhlaWdodD0iMzQuODA3NTAyIiByeD0iNCI+PC9yZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMjYuNzE0MTc4NCwxMi40NzMzNzAxIEMyNi4zNDY5OTYxLDExLjE2MjUyOTQgMjUuNjE5OTc1MSwxMC4xMjcwNzUzIDI0LjU1NTE0NjQsOS4zOTQ1NDY0OSBDMjMuMjExMjU5Miw4LjQ2NzQxMTI3IDIxLjY2NTQyMTksOC4xNDA2MTg3OCAyMC4zMzA3MTQxLDcuOTQwNTA0NTMgQzE4LjQ4Mzc4NjgsNy42NjUxMTc1NiAxNi44MTEyNzE3LDcuNjI2NTYzNTQgMTUuMjE1ODY0Miw3LjgyMTE3MDQgQzEzLjcyMTQzMjQsOC4wMDQ3NjE1NSAxMi41OTYwMTg4LDguMjk2NjcxMTQgMTEuNTY5NzQ0MSw4Ljc2ODUwMDc2IEM5LjU1NzU4NSw5LjY5MzgwMDE5IDguMzQ5NTU0OTYsMTEuMTkwMDY3OCA3Ljk4MDUzNjg1LDEzLjIxNTA3ODMgQzcuODAwNjE3NzYsMTQuMTk5MTI2OSA3LjY3OTQ0NzM2LDE1LjA4NzcwODEgNy42MDk2ODI5NSwxNS45MzU4OTk1IEM3LjQ0ODEyMjc0LDE3Ljg5NjY1MzEgNy41OTQ5OTU2NiwxOS42MzE1ODk0IDguMDU3NjQ1MzcsMjEuMjM5ODQ3OSBDOC41MDkyNzkzOCwyMi44MDc3MTYxIDkuMjk2ODg1MzMsMjMuOTI3NjIyNCAxMC40NjYzNjEzLDI0LjY2MzgyMjggQzEwLjc2Mzc3ODgsMjQuODUxMDg2MSAxMS4xNDU2NDg0LDI0Ljk4Njk0MzMgMTEuNTE0NjY2NSwyNS4xMTcyOTMxIEMxMS43MjM5NjA2LDI1LjE5MDcyOTYgMTEuOTI3NzQ2OSwyNS4yNjIzMzAyIDEyLjA5NDgxNDUsMjUuMzQxMjc0MSBDMTIuMjQ5MDMxMSwyNS40MTI4NzQ4IDEyLjI0OTAzMTEsMjUuNDI1NzI2MyAxMi4yNDcxOTUzLDI1LjU1NDIzOTggQzEyLjIzNDM0MzgsMjYuNjY4NjM4MyAxMi4yNDcxOTUzLDI4Ljg1MzM3MzMgMTIuMjQ3MTk1MywyOC44NTMzNzMzIEwxMi4yNTA4Njc0LDI5LjMxOTY5NDYgTDEzLjA4ODA0MzEsMjkuMzE5Njk0NiBMMTMuMjIzOTAwMywyOS4xODc1MDg5IEMxMy4zMTM4NTk4LDI5LjEwMzA1NzIgMTUuMzg4NDQwMSwyNy4wOTgyNDE4IDE2LjEyODMxMjYsMjYuMjkwNDQwNyBMMTYuMjI5Mjg3NCwyNi4xNzg0NDk4IEMxNi4zNTU5NjU2LDI2LjAzMTU3NjggMTYuMzU1OTY1NiwyNi4wMzE1NzY4IDE2LjQ4NjMxNSwyNi4wMjk3NDEgQzE3LjQ4NTA1MDksMjYuMDA5NTQ1OSAxOC41MDU4MTc3LDI1Ljk3MDk5MTkgMTkuNTE5MjQwOSwyNS45MTU5MTQ4IEMyMC43NDc0NjYxLDI1Ljg0OTgyMTkgMjIuMTcwMjk3MiwyNS43MzA0ODczIDIzLjUxMDUxMjksMjUuMTcyMzcwMiBDMjQuNzM2OTAxOCwyNC42NjAxNTEzIDI1LjYzMjgyNjYsMjMuODQ2ODQyMyAyNi4xNzA3NDg2LDIyLjc1NjMxMDYgQzI2LjczMjUzNzgsMjEuNjE4MDQ1NCAyNy4wNjQ4Mzc3LDIwLjM4NjE0OTEgMjcuMTg5Njc5NywxOC45ODkwMjAxIEMyNy40MDk5ODksMTYuNTMyNTcwNiAyNy4yNTM5MzY3LDE0LjQwMTA3NzQgMjYuNzE0MTc4NCwxMi40NzMzNzAxIFogTTIyLjI5Njk3NTUsMjIuMDI1NjE4IEMyMS45ODg1NDIzLDIyLjUyNjgyMTggMjEuNTI5NTY0MiwyMi44NzU2NDUyIDIwLjk4Nzk3MDIsMjMuMTAxNDYyIEMyMC41OTE0MTMzLDIzLjI2NjY5NDMgMjAuMTg3NTEyNywyMy4yMzE4MTE4IDE5Ljc5NjQ2MzcsMjMuMDY2NTggQzE2LjUyMzAzMzIsMjEuNjgwNDY2NyAxMy45NTQ1OTMzLDE5LjQ5NzU2NzkgMTIuMjU4MjExLDE2LjM1ODE1ODkgQzExLjkwNzU1MTgsMTUuNzExOTE4MSAxMS42NjUyMTE1LDE1LjAwNjkyOCAxMS4zODYxNTI5LDE0LjMyMzk2ODkgQzExLjMyOTIzOTUsMTQuMTg0NDM5NiAxMS4zMzI5MTE2LDE0LjAxOTIwNzggMTEuMzA3MjA4NiwxMy44NjQ5OTEzIEMxMS4zMzEwNzUzLDEyLjc2MTYwODEgMTIuMTc3NDMwOSwxMi4xMzkyMzQ0IDEzLjAzMjk2NTUsMTEuOTUxOTcxMiBDMTMuMzU5NzU4LDExLjg3ODUzNDcgMTMuNjQ5ODMxOCwxMS45OTQxOTczIDEzLjg5MjE3MjEsMTIuMjI3MzU4MSBDMTQuNTY0MTE2LDEyLjg2NjI1NTQgMTUuMDk0Njk0MywxMy42MDk3OTk0IDE1LjQ5NDkyMjgsMTQuNDQzMzAzMSBDMTUuNjY5MzM0NSwxNC44MDg2NDk2IDE1LjU5MDM5MDIsMTUuMTMxNzcgMTUuMjkyOTcyNywxNS40MDM0ODQ5IEMxNS4yMzA1NTE1LDE1LjQ2MDM5ODMgMTUuMTY2Mjk0OSwxNS41MTE4MDM4IDE1LjA5ODM2NTksMTUuNTYzMjA5MyBDMTQuNDE5MDc4OCwxNi4wNzM1OTI1IDE0LjMxOTkzOTQsMTYuNDYwOTcgMTQuNjgxNjE0MywxNy4yMzAyMTcgQzE1LjI5ODQ4MDYsMTguNTM5MjIxOSAxNi4zMjI5MTksMTkuNDE4NjIzNiAxNy42NDY2MTExLDE5Ljk2Mzg4OTIgQzE3Ljk5NTQzNDUsMjAuMTA3MDkwNiAxOC4zMjQwNjI4LDIwLjAzNTQ4OTkgMTguNTkwMjY5OSwxOS43NTI3NTkzIEMxOC42MjY5ODgxLDE5LjcxNjA0MTEgMTguNjY3Mzc3OSwxOS42NzkzMjI4IDE4LjY5MzA4MDksMTkuNjM1MjYxIEMxOS4yMTQ0Nzk4LDE4Ljc2NTAzOTEgMTkuOTcyNzExMiwxOC44NTEzMjcxIDIwLjY3MjE5MzQsMTkuMzQ3MDIzIEMyMS4xMzExNzE1LDE5LjY3MzgxNTQgMjEuNTc3Mjk4MSwyMC4wMTg5NjY4IDIyLjAzMDc2NzksMjAuMzUxMjY2NyBDMjIuNzIyOTA2OSwyMC44NTk4MTQxIDIyLjcxNzM5OTEsMjEuMzM3MTUxMSAyMi4yOTY5NzU1LDIyLjAyNTYxOCBaIE0xNy45NTUwNDQzLDEzLjMzOTkyMDMgQzE3LjgwMDgyNzcsMTMuMzM5OTIwMyAxNy42NDY2MTExLDEzLjM1Mjc3MTggMTcuNDk0MjMwOCwxMy4zNzg0NzQzIEMxNy4yMzcyMDMyLDEzLjQyMDcwMDQgMTYuOTk2Njk4NywxMy4yNDgxMjUgMTYuOTUyNjM2OCwxMi45OTEwOTc0IEMxNi45MTA0MTA3LDEyLjczNTkwNTUgMTcuMDgyOTg2NiwxMi40OTM1NjUyIDE3LjM0MDAxNDIsMTIuNDUxMzM5MSBDMTcuNTQxOTY0MywxMi40MTY0NTY3IDE3Ljc0OTQyMjIsMTIuMzk5OTMzNiAxNy45NTUwNDQzLDEyLjM5OTkzMzYgQzE5Ljk5MTA3MDUsMTIuMzk5OTMzNiAyMS42NDcwNjI1LDE0LjA1NTkyNjEgMjEuNjQ3MDYyNSwxNi4wOTE5NTE5IEMyMS42NDcwNjI1LDE2LjI5OTQwOTggMjEuNjMwNTM5NCwxNi41MDY4Njc2IDIxLjU5NTY1NywxNi43MDY5ODI0IEMyMS41NTcxMDMsMTYuOTM2NDcxMiAyMS4zNTg4MjQ1LDE3LjA5OTg2NzIgMjEuMTMzMDA3MywxNy4wOTk4NjcyIEMyMS4xMDczMDQ4LDE3LjA5OTg2NzIgMjEuMDgxNjAxOCwxNy4wOTgwMzE0IDIxLjA1NDA2MywxNy4wOTI1MjM2IEMyMC43OTg4NzE2LDE3LjA1MDI5NzUgMjAuNjI2Mjk1NywxNi44MDc5NTcxIDIwLjY2ODUyMTgsMTYuNTUyNzY1OCBDMjAuNjk0MjI0MywxNi40MDIyMjA4IDIwLjcwNzA3NTgsMTYuMjQ4MDA0MiAyMC43MDcwNzU4LDE2LjA5MTk1MTkgQzIwLjcwNzA3NTgsMTQuNTc1NDg4NyAxOS40NzE1MDc0LDEzLjMzOTkyMDMgMTcuOTU1MDQ0MywxMy4zMzk5MjAzIFogTTIwLjIzNzA4MjQsMTYuMTU5ODgwNSBDMjAuMjM3MDgyNCwxNi40MTg3NDM5IDIwLjAyNTk1MjUsMTYuNjI5ODczOCAxOS43NjcwODkxLDE2LjYyOTg3MzggQzE5LjUwODIyNTcsMTYuNjI5ODczOCAxOS4yOTcwOTU3LDE2LjQxODc0MzkgMTkuMjk3MDk1NywxNi4xNTk4ODA1IEMxOS4yOTcwOTU3LDE1LjM4MzI4OTggMTguNjYzNzA2NCwxNC43NDk5MDA0IDE3Ljg4NzExNTYsMTQuNzQ5OTAwNCBDMTcuNjI4MjUyMiwxNC43NDk5MDA0IDE3LjQxNzEyMjMsMTQuNTM4NzcwNSAxNy40MTcxMjIzLDE0LjI3OTkwNyBDMTcuNDE3MTIyMywxNC4wMjEwNDM2IDE3LjYyODI1MjIsMTMuODA5OTEzNyAxNy44ODcxMTU2LDEzLjgwOTkxMzcgQzE5LjE4MzI2OTQsMTMuODA5OTEzNyAyMC4yMzcwODI0LDE0Ljg2MzcyNzIgMjAuMjM3MDgyNCwxNi4xNTk4ODA1IFogTTIyLjkyMTE4NTQsMTcuMjA0NTE0IEMyMi44NzE2MTU3LDE3LjQyMjk4NzYgMjIuNjc3MDA4OCwxNy41Njk4NjA2IDIyLjQ2MjIwNzMsMTcuNTY5ODYwNiBDMjIuNDI3MzI0OCwxNy41Njk4NjA2IDIyLjM5MjQ0MjksMTcuNTY2MTg5IDIyLjM1NzU2MDQsMTcuNTU4ODQ1MyBDMjIuMTA0MjA0NCwxNy41MDAwOTYyIDIxLjk0NjMxNjIsMTcuMjQ4NTc1OSAyMi4wMDMyMjk2LDE2Ljk5NTIyMDQgQzIyLjA3MTE1ODIsMTYuNjk1OTY2NyAyMi4xMDYwNDA3LDE2LjM4NTY5NzcgMjIuMTA2MDQwNywxNi4wNzM1OTI1IEMyMi4xMDYwNDA3LDEzLjc4OTcxODUgMjAuMjQ2MjYxOSwxMS45Mjk5NDAyIDE3Ljk2MjM4NzksMTEuOTI5OTQwMiBDMTcuNjUwMjgzMiwxMS45Mjk5NDAyIDE3LjM0MDAxNDIsMTEuOTY0ODIyNyAxNy4wNDA3NjA1LDEyLjAzMjc1MTMgQzE2Ljc4NzQwNDUsMTIuMDkxNTAwNSAxNi41MzU4ODQ3LDExLjkzMTc3NiAxNi40Nzg5NzE0LDExLjY3ODQyMDUgQzE2LjQyMDIyMjIsMTEuNDI1MDY0NCAxNi41Nzk5NDY2LDExLjE3MzU0NDcgMTYuODMzMzAyNiwxMS4xMTY2MzEzIEMxNy4yMDA0ODUsMTEuMDMyMTc5NiAxNy41ODA1MTgzLDEwLjk4OTk1MzUgMTcuOTYyMzg3OSwxMC45ODk5NTM1IEMyMC43NjU4MjUsMTAuOTg5OTUzNSAyMy4wNDYwMjc0LDEzLjI3MDE1NTkgMjMuMDQ2MDI3NCwxNi4wNzM1OTI1IEMyMy4wNDYwMjc0LDE2LjQ1NTQ2MjEgMjMuMDAzODAxMywxNi44MzU0OTU5IDIyLjkyMTE4NTQsMTcuMjA0NTE0IFoiIGlkPSJTaGFwZSIgZmlsbD0iI0ZGRkZGRiIgZmlsbC1ydWxlPSJub256ZXJvIj48L3BhdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICA8L2c+CiAgICAgICAgPC9nPgogICAgPC9nPgo8L3N2Zz4=",
  iconVK: svgDataPrefix + "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iMzdweCIgaGVpZ2h0PSIzNXB4IiB2aWV3Qm94PSIwIDAgMzcgMzUiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8dGl0bGU+Vks8L3RpdGxlPgogICAgPGcgaWQ9IlBhZ2UtMSIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiIGZpbGw9Im5vbmUiIGZpbGwtcnVsZT0iZXZlbm9kZCI+CiAgICAgICAgPGcgaWQ9IkFydGJvYXJkIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjg2LjAwMDAwMCwgLTU0NS4wMDAwMDApIj4KICAgICAgICAgICAgPGcgaWQ9IldpZGdldC05IiB0cmFuc2Zvcm09InRyYW5zbGF0ZSg5NS4wMDAwMDAsIDkxLjAwMDAwMCkiPgogICAgICAgICAgICAgICAgPGcgaWQ9ImNoYXQiPgogICAgICAgICAgICAgICAgICAgIDxnIGlkPSJoZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iTUVTU0VOR0VSUy0yIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgyMC4wNzY3MzMsIDM5Ni4wMDAwMDApIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGlkPSJJQ09OUy0zLUVYUE9SVCIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMjYuMDAwMDAwLCA1OC4wMDAwMDApIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBpZD0iVksiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDE0NS43ODIwMDQsIDAuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IGlkPSJSZWN0YW5nbGUiIGZpbGw9IiM1QTgxQjQiIHg9IjAiIHk9IjAiIHdpZHRoPSIzNC44MDc1MDIiIGhlaWdodD0iMzQuODA3NTAyIiByeD0iNCI+PC9yZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMjcuMDg5OTEyMSwxMy4wNDA2NTg0IEMyNy4yMzMxMTc2LDEyLjU2MzEwODIgMjcuMDg5OTEyMiwxMi4yMTIyMDA0IDI2LjQwODM0NzMsMTIuMjEyMjAwNCBMMjQuMTU0NTc0NSwxMi4yMTIyMDA0IEMyMy41ODE1MTQ0LDEyLjIxMjIwMDQgMjMuMzE3MzI1NCwxMi41MTUzMzM0IDIzLjE3NDA0MDUsMTIuODQ5NTk4NiBDMjMuMTc0MDQwNSwxMi44NDk1OTg2IDIyLjAyNzkyMDEsMTUuNjQzMjM3MyAyMC40MDQyODkyLDE3LjQ1Nzg4ODIgQzE5Ljg3OTAwNCwxNy45ODMxNzM1IDE5LjY0MDIwOSwxOC4xNTAzMDYxIDE5LjM1MzY3ODksMTguMTUwMzA2MSBDMTkuMjEwNDMzNywxOC4xNTAzMDYxIDE4Ljk5NTUyNjIsMTcuOTgzMTczNSAxOC45OTU1MjYyLDE3LjUwNTY2MzEgTDE4Ljk5NTUyNjIsMTMuMDQwNjU4NCBDMTguOTk1NTI2MiwxMi40Njc1OTgyIDE4LjgzNjc0ODksMTIuMjEyMjAwNCAxOC4zNTkxNTg5LDEyLjIxMjIwMDQgTDE0LjgxNzUxNjEsMTIuMjEyMjAwNCBDMTQuNDU5NDAzMiwxMi4yMTIyMDA0IDE0LjI0NDAzMTIsMTIuNDc4MTcwNyAxNC4yNDQwMzEyLDEyLjczMDI0MDkgQzE0LjI0NDAzMTIsMTMuMjczNDkxNCAxNS4wNTU4MDY5LDEzLjM5ODc3MTQgMTUuMTM5NDgzNiwxNC45MjY5MzE5IEwxNS4xMzk0ODM2LDE4LjI0NTg1NTkgQzE1LjEzOTQ4MzYsMTguOTczNTE4NiAxNS4wMDgwNzE3LDE5LjEwNTQ0NjIgMTQuNzIxNTQxNiwxOS4xMDU0NDYyIEMxMy45NTc1MDExLDE5LjEwNTQ0NjIgMTIuMDk4OTcwNCwxNi4yOTkzMjcyIDEwLjk5NjY5LDEzLjA4ODM5MzYgQzEwLjc4MDY2OTYsMTIuNDY0Mjk5MyAxMC41NjQwMDQ1LDEyLjIxMjIwMDQgOS45ODgwMDMwOCwxMi4yMTIyMDA0IEw3LjczNDIzMDM0LDEyLjIxMjIwMDQgQzcuMDkwMjk1MjcsMTIuMjEyMjAwNCA2Ljk2MTUwMDQsMTIuNTE1MzMzNCA2Ljk2MTUwMDQsMTIuODQ5NTk4NiBDNi45NjE1MDA0LDEzLjQ0NjU0NjIgNy43MjU1ODA2NywxNi40MDczMTc1IDEwLjUxOTE3OTYsMjAuMzIzMTQ5NSBDMTIuMzgxNTY1NiwyMi45OTczNTA5IDE1LjAwNTU0NTIsMjQuNDQ2OTY2NiAxNy4zOTMyNTYzLDI0LjQ0Njk2NjYgQzE4LjgyNTg2NzEsMjQuNDQ2OTY2NiAxOS4wMDMwOTQsMjQuMTI0OTk5MSAxOS4wMDMwOTQsMjMuNTcwNDExMSBMMTkuMDAzMDk0LDIxLjU0OTI1ODggQzE5LjAwMzA5NCwyMC45MDUzMjM4IDE5LjEzODgxMTEsMjAuNzc2ODEyMiAxOS41OTI0NzM5LDIwLjc3NjgxMjIgQzE5LjkyNjczOTEsMjAuNzc2ODEyMiAyMC40OTk3OTkzLDIwLjk0Mzk0NDggMjEuODM2OTM5NywyMi4yMzMzMTA0IEMyMy4zNjUwNjA2LDIzLjc2MTQzMTIgMjMuNjE2OTkxNSwyNC40NDY5NjY2IDI0LjQ3NjU0MjEsMjQuNDQ2OTY2NiBMMjYuNzMwMzE0OCwyNC40NDY5NjY2IEMyNy4zNzQyNDk5LDI0LjQ0Njk2NjYgMjcuNjk2MjE3NCwyNC4xMjQ5OTkxIDI3LjUxMDQ3OTQsMjMuNDg5NjE0MiBDMjcuMzA3MjI2MiwyMi44NTYzNTIyIDI2LjU3NzYzMTEsMjEuOTM3NTczMyAyNS42MDk1MjY1LDIwLjg0ODQzNDcgQzI1LjA4NDIwMTUsMjAuMjI3NjM5NCAyNC4yOTYyNzM1LDE5LjU1OTEwODkgMjQuMDU3NDc4NSwxOS4yMjQ3NjQyIEMyMy43MjMyMTMzLDE4Ljc5NTAyODcgMjMuODE4NzIzMywxOC42MDM5Njg4IDI0LjA1NzQ3ODUsMTguMjIxOTY4NSBDMjQuMDU3NDc4NSwxOC4yMjE5Njg1IDI2LjgwMzM4MjEsMTQuMzUzODcxNyAyNy4wODk5MTIxLDEzLjA0MDY1ODQgTDI3LjA4OTkxMjEsMTMuMDQwNjU4NCBaIiBpZD0iUGF0aCIgZmlsbD0iI0ZGRkZGRiI+PC9wYXRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgICAgIDwvZz4KICAgICAgICAgICAgPC9nPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+",
  notificationSound: mp3DataPrefix + ""
};
},{"fs":"tuDi"}],"dZYI":[function(require,module,exports) {
var define;
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.dayjs=e()}(this,function(){"use strict";var t="millisecond",e="second",n="minute",r="hour",i="day",s="week",u="month",o="quarter",a="year",h=/^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/,f=/\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,c=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},d={s:c,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+c(r,2,"0")+":"+c(i,2,"0")},m:function(t,e){var n=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(n,u),i=e-r<0,s=t.clone().add(n+(i?-1:1),u);return Number(-(n+(e-r)/(i?r-s:s-r))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(h){return{M:u,y:a,w:s,d:i,D:"date",h:r,m:n,s:e,ms:t,Q:o}[h]||String(h||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},$={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},l="en",m={};m[l]=$;var y=function(t){return t instanceof v},M=function(t,e,n){var r;if(!t)return l;if("string"==typeof t)m[t]&&(r=t),e&&(m[t]=e,r=t);else{var i=t.name;m[i]=t,r=i}return!n&&r&&(l=r),r||!n&&l},g=function(t,e){if(y(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new v(n)},D=d;D.l=M,D.i=y,D.w=function(t,e){return g(t,{locale:e.$L,utc:e.$u,$offset:e.$offset})};var v=function(){function c(t){this.$L=this.$L||M(t.locale,null,!0),this.parse(t)}var d=c.prototype;return d.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(D.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(h);if(r)return n?new Date(Date.UTC(r[1],r[2]-1,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)):new Date(r[1],r[2]-1,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)}return new Date(e)}(t),this.init()},d.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},d.$utils=function(){return D},d.isValid=function(){return!("Invalid Date"===this.$d.toString())},d.isSame=function(t,e){var n=g(t);return this.startOf(e)<=n&&n<=this.endOf(e)},d.isAfter=function(t,e){return g(t)<this.startOf(e)},d.isBefore=function(t,e){return this.endOf(e)<g(t)},d.$g=function(t,e,n){return D.u(t)?this[e]:this.set(n,t)},d.year=function(t){return this.$g(t,"$y",a)},d.month=function(t){return this.$g(t,"$M",u)},d.day=function(t){return this.$g(t,"$W",i)},d.date=function(t){return this.$g(t,"$D","date")},d.hour=function(t){return this.$g(t,"$H",r)},d.minute=function(t){return this.$g(t,"$m",n)},d.second=function(t){return this.$g(t,"$s",e)},d.millisecond=function(e){return this.$g(e,"$ms",t)},d.unix=function(){return Math.floor(this.valueOf()/1e3)},d.valueOf=function(){return this.$d.getTime()},d.startOf=function(t,o){var h=this,f=!!D.u(o)||o,c=D.p(t),d=function(t,e){var n=D.w(h.$u?Date.UTC(h.$y,e,t):new Date(h.$y,e,t),h);return f?n:n.endOf(i)},$=function(t,e){return D.w(h.toDate()[t].apply(h.toDate("s"),(f?[0,0,0,0]:[23,59,59,999]).slice(e)),h)},l=this.$W,m=this.$M,y=this.$D,M="set"+(this.$u?"UTC":"");switch(c){case a:return f?d(1,0):d(31,11);case u:return f?d(1,m):d(0,m+1);case s:var g=this.$locale().weekStart||0,v=(l<g?l+7:l)-g;return d(f?y-v:y+(6-v),m);case i:case"date":return $(M+"Hours",0);case r:return $(M+"Minutes",1);case n:return $(M+"Seconds",2);case e:return $(M+"Milliseconds",3);default:return this.clone()}},d.endOf=function(t){return this.startOf(t,!1)},d.$set=function(s,o){var h,f=D.p(s),c="set"+(this.$u?"UTC":""),d=(h={},h[i]=c+"Date",h.date=c+"Date",h[u]=c+"Month",h[a]=c+"FullYear",h[r]=c+"Hours",h[n]=c+"Minutes",h[e]=c+"Seconds",h[t]=c+"Milliseconds",h)[f],$=f===i?this.$D+(o-this.$W):o;if(f===u||f===a){var l=this.clone().set("date",1);l.$d[d]($),l.init(),this.$d=l.set("date",Math.min(this.$D,l.daysInMonth())).toDate()}else d&&this.$d[d]($);return this.init(),this},d.set=function(t,e){return this.clone().$set(t,e)},d.get=function(t){return this[D.p(t)]()},d.add=function(t,o){var h,f=this;t=Number(t);var c=D.p(o),d=function(e){var n=g(f);return D.w(n.date(n.date()+Math.round(e*t)),f)};if(c===u)return this.set(u,this.$M+t);if(c===a)return this.set(a,this.$y+t);if(c===i)return d(1);if(c===s)return d(7);var $=(h={},h[n]=6e4,h[r]=36e5,h[e]=1e3,h)[c]||1,l=this.$d.getTime()+t*$;return D.w(l,this)},d.subtract=function(t,e){return this.add(-1*t,e)},d.format=function(t){var e=this;if(!this.isValid())return"Invalid Date";var n=t||"YYYY-MM-DDTHH:mm:ssZ",r=D.z(this),i=this.$locale(),s=this.$H,u=this.$m,o=this.$M,a=i.weekdays,h=i.months,c=function(t,r,i,s){return t&&(t[r]||t(e,n))||i[r].substr(0,s)},d=function(t){return D.s(s%12||12,t,"0")},$=i.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:o+1,MM:D.s(o+1,2,"0"),MMM:c(i.monthsShort,o,h,3),MMMM:c(h,o),D:this.$D,DD:D.s(this.$D,2,"0"),d:String(this.$W),dd:c(i.weekdaysMin,this.$W,a,2),ddd:c(i.weekdaysShort,this.$W,a,3),dddd:a[this.$W],H:String(s),HH:D.s(s,2,"0"),h:d(1),hh:d(2),a:$(s,u,!0),A:$(s,u,!1),m:String(u),mm:D.s(u,2,"0"),s:String(this.$s),ss:D.s(this.$s,2,"0"),SSS:D.s(this.$ms,3,"0"),Z:r};return n.replace(f,function(t,e){return e||l[t]||r.replace(":","")})},d.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},d.diff=function(t,h,f){var c,d=D.p(h),$=g(t),l=6e4*($.utcOffset()-this.utcOffset()),m=this-$,y=D.m(this,$);return y=(c={},c[a]=y/12,c[u]=y,c[o]=y/3,c[s]=(m-l)/6048e5,c[i]=(m-l)/864e5,c[r]=m/36e5,c[n]=m/6e4,c[e]=m/1e3,c)[d]||m,f?y:D.a(y)},d.daysInMonth=function(){return this.endOf(u).$D},d.$locale=function(){return m[this.$L]},d.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=M(t,e,!0);return r&&(n.$L=r),n},d.clone=function(){return D.w(this.$d,this)},d.toDate=function(){return new Date(this.valueOf())},d.toJSON=function(){return this.isValid()?this.toISOString():null},d.toISOString=function(){return this.$d.toISOString()},d.toString=function(){return this.$d.toUTCString()},c}();return g.prototype=v.prototype,g.extend=function(t,e){return t(e,v,g),g},g.locale=M,g.isDayjs=y,g.unix=function(t){return g(1e3*t)},g.en=m[l],g.Ls=m,g});

},{}],"B5kD":[function(require,module,exports) {
var define;
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.dayjs_plugin_calendar=t()}(this,function(){"use strict";return function(e,t,a){var n="h:mm A",d={lastDay:"[Yesterday at] "+n,sameDay:"[Today at] "+n,nextDay:"[Tomorrow at] "+n,nextWeek:"dddd [at] "+n,lastWeek:"[Last] dddd [at] "+n,sameElse:"MM/DD/YYYY"};t.prototype.calendar=function(e,t){var n=t||this.$locale().calendar||d,s=a(e||void 0).startOf("d"),o=this.diff(s,"d",!0),i=o<-6?"sameElse":o<-1?"lastWeek":o<0?"lastDay":o<1?"sameDay":o<2?"nextDay":o<7?"nextWeek":"sameElse",f=n[i]||d[i];return"function"==typeof f?f.call(this,a()):this.format(f)}}});

},{}],"ZQMA":[function(require,module,exports) {
var define;
!function(_,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("dayjs")):"function"==typeof define&&define.amd?define(["dayjs"],t):_.dayjs_locale_ru=t(_.dayjs)}(this,function(_){"use strict";_=_&&_.hasOwnProperty("default")?_.default:_;var t="января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),e="январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),n="янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),s="янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"),r=/D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;function o(_,t,e){var n,s;return"m"===e?t?"минута":"минуту":_+" "+(n=+_,s={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[e].split("_"),n%10==1&&n%100!=11?s[0]:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?s[1]:s[2])}var d=function(_,n){return r.test(n)?t[_.month()]:e[_.month()]};d.s=e,d.f=t;var i=function(_,t){return r.test(t)?n[_.month()]:s[_.month()]};i.s=s,i.f=n;var m={name:"ru",weekdays:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),weekdaysShort:"вск_пнд_втр_срд_чтв_птн_сбт".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),months:d,monthsShort:i,weekStart:1,formats:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:o,mm:o,h:"час",hh:o,d:"день",dd:o,M:"месяц",MM:o,y:"год",yy:o},ordinal:function(_){return _}};return _.locale(m,null,!0),m});

},{"dayjs":"dZYI"}],"KO9y":[function(require,module,exports) {
"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exposeComponentToGlobalScope = exports.isMobileSizeScreen = exports.isWithinElement = exports.fitDimensionsIntoLimits = exports.sanitizeHTML = exports.replaceLinksInText = exports.replaceMarkdownWithHTML = exports.generateReplyMessageQuote = exports.generateCustomerSupportSenderName = exports.scrollToElement = exports.getImageDimensions = exports.humanizeUpcomingDate = exports.humanizeTimezoneOffset = exports.humanizeTimezoneName = exports.humanizeFileSize = exports.base64toBlobUrl = exports.generateSvgIconsCSS = exports.playNotificationSound = exports.unlockNotificationSoundAutoplay = exports.inflect = void 0;

var utilsCommon_1 = require("./utilsCommon");

var assets_1 = __importDefault(require("./widget/DefaultWidget/assets"));

var dayjs_1 = __importDefault(require("dayjs"));

var calendar_1 = __importDefault(require("dayjs/plugin/calendar"));

require("dayjs/locale/ru");

dayjs_1.default.locale('ru');
dayjs_1.default.extend(calendar_1.default);

function inflect(locale, number, endings, hideNumber) {
  var getEnding = {
    'en-US': function enUS(number, endings) {
      return number === 1 ? endings[0] : endings[1];
    },
    'ru-RU': function ruRU(number, endings) {
      var cases = [2, 0, 1, 1, 1, 2];
      var endingIndex = number % 100 > 4 && number % 100 < 20 ? 2 : cases[Math.min(number % 10, 5)];
      return endings[endingIndex];
    }
  };
  var ending = getEnding[locale](number, endings) || endings[0];
  return hideNumber ? ending : number + ' ' + ending;
}

exports.inflect = inflect;
/**
 * Prevents browser from muting audio autoplay
 * @see https://medium.com/@curtisrobinson/how-to-auto-play-audio-in-safari-with-javascript-21d50b0a2765
 */

function unlockNotificationSoundAutoplay(e) {
  var notification = new Audio(assets_1.default.notificationSound);
  notification.play().then(function () {
    notification.pause();
    notification.currentTime = 0;
  });

  if (e.target.tagName !== 'TEXTAREA') {
    // In Firefox, click on textarea doesn't unlock autoplay
    e.currentTarget.removeEventListener(e.type, unlockNotificationSoundAutoplay);
  }
}

exports.unlockNotificationSoundAutoplay = unlockNotificationSoundAutoplay;

function playNotificationSound() {
  var notification = new Audio(assets_1.default.notificationSound);

  try {
    notification.play();
  } catch (e) {
    console.error('Unable to play notification sound before any action was taken by the user in the current browser tab');
  }
}

exports.playNotificationSound = playNotificationSound;

function generateSvgIconsCSS(iconClassNamePrefix, iconMap) {
  var iconsCSSArr = [];

  for (var iconName in iconMap) {
    var iconUrl = iconMap[iconName];
    iconsCSSArr.push(".".concat(iconClassNamePrefix).concat(iconName, " { background-image: url(\"").concat(iconUrl, "\"); }"));
  }

  return iconsCSSArr.join('\n');
}

exports.generateSvgIconsCSS = generateSvgIconsCSS;

function base64toBlobUrl(base64Url) {
  var sliceSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 512;

  var _base64Url$trim$split = base64Url.trim().split(','),
      _base64Url$trim$split2 = _slicedToArray(_base64Url$trim$split, 2),
      dataUrlPrefix = _base64Url$trim$split2[0],
      base64Data = _base64Url$trim$split2[1];

  var contentType = dataUrlPrefix.replace(/data:\s*/, '').replace(/s*;s*base64s*/, '');
  var byteCharacters = atob(base64Data);
  var byteArrays = [];

  for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    var slice = byteCharacters.slice(offset, offset + sliceSize);
    var byteNumbers = new Array(slice.length);

    for (var i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }

    var byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }

  var blob = new Blob(byteArrays, {
    type: contentType
  });
  return URL.createObjectURL(blob);
}

exports.base64toBlobUrl = base64toBlobUrl;

function humanizeFileSize(locale, sizeInBytes) {
  var unitsDict = {
    'ru-RU': {
      'kb': 'Кб',
      'mb': 'Мб',
      'gb': 'Гб'
    },
    'en-US': {
      'kb': 'Kb',
      'mb': 'Mb',
      'gb': 'Gb'
    }
  };
  var sizeInKb = sizeInBytes / 1024;
  var sizeInMb = sizeInKb / 1024;
  var sizeInGb = sizeInMb / 1024;
  var primarySize = sizeInKb;
  var primaryUnit = 'kb';

  if (sizeInGb > 1) {
    primarySize = sizeInGb;
    primaryUnit = 'gb';
  } else if (sizeInMb > 1) {
    primarySize = sizeInMb;
    primaryUnit = 'mb';
  }

  primarySize = primarySize < 0.1 ? 0.1 : +primarySize.toFixed(1);
  return primarySize.toLocaleString(locale) + ' ' + unitsDict[locale || 'en-US'][primaryUnit];
}

exports.humanizeFileSize = humanizeFileSize;

function humanizeTimezoneName(date) {
  date = new Date(date); // TODO: Калининград
  // TODO: Украина
  // TODO: Белоруссия
  // TODO: Прибалтика
  // TODO: figure out when to add GMT+00 (e.g. for Eastern Europe)

  var timezoneDict = {
    Moscow: 'по Москве',
    Samara: 'по Самаре',
    Yekaterinburg: 'по Екатеринбургу',
    Novosibirsk: 'по Новосибирску',
    Omsk: 'по Омску',
    Krasnoyarsk: 'по Красноярску',
    Irkutsk: 'по Иркутску',
    Yakutsk: 'по Якутску',
    Vladivostok: 'по Владивостоку',
    Sakhalin: 'по Южно-Сахалинску',
    Magadan: 'по Магадану',
    Kamchat: 'по Петропавловску-Камчатскому',
    Anadyr: 'по Анадырю',
    Tajikistan: 'по Душанбе',
    Turkmenistan: 'по Ашхабаду',
    Uzbekistan: 'по Ташкенту',
    Kyrgyzstan: 'по Бишкеку',
    Azerbaijan: 'по Баку',
    Armenia: 'по Еревану',
    'East Kazakhstan': 'по Алматы',
    'West Kazakhstan': 'по западноказахстанскому времени',
    'Eastern Europe': "\u043F\u043E \u0432\u043E\u0441\u0442\u043E\u0447\u043D\u043E\u0435\u0432\u0440\u043E\u043F\u0435\u0439\u0441\u043A\u043E\u043C\u0443 \u0432\u0440\u0435\u043C\u0435\u043D\u0438 (".concat(humanizeTimezoneOffset(date), ")")
  };
  var timezoneName = date.toTimeString().replace(/.*\((.+)\)$/, '$1');

  for (var timezoneKeyword in timezoneDict) {
    if (timezoneName.toLowerCase().includes(timezoneKeyword.toLowerCase())) {
      return timezoneDict[timezoneKeyword];
    }
  }

  return "\u043F\u043E \u0432\u0430\u0448\u0435\u043C\u0443 \u0432\u0440\u0435\u043C\u0435\u043D\u0438 (".concat(humanizeTimezoneOffset(date), ")");
}

exports.humanizeTimezoneName = humanizeTimezoneName;

function humanizeTimezoneOffset(date) {
  date = new Date(date);
  var timezoneOffset = date.getTimezoneOffset() / -60;
  var timezoneSign = timezoneOffset < 0 ? '-' : '+';
  var timezoneOffsetHours = Math.abs(Math.floor(timezoneOffset));
  var timezoneOffsetMinutes = Math.abs(timezoneOffset % 1 * 60);
  return 'GMT' + timezoneSign + timezoneOffsetHours + (timezoneOffsetMinutes ? ':' + timezoneOffsetMinutes : '');
}

exports.humanizeTimezoneOffset = humanizeTimezoneOffset;

function humanizeUpcomingDate(date) {
  date = new Date(date);
  var inflectDayDict = {
    'понедельник': 'в понедельник',
    'вторник': 'во вторник',
    'среда': 'в среду',
    'четверг': 'в четверг',
    'пятница': 'в пятницу',
    'суббота': 'в субботу',
    'воскресенье': 'в воскресенье'
  };
  var humanizedDate = dayjs_1.default(date).calendar(null, {
    nextWeek: 'dddd [в] H:mm',
    nextDay: '[завтра в] H:mm',
    sameDay: '[сегодня в] H:mm',
    lastDay: 'D MMMM [в] H:mm',
    lastWeek: 'D MMMM [в] H:mm',
    sameElse: 'D MMMM [в] H:mm'
  });

  for (var nominativeDay in inflectDayDict) {
    humanizedDate = humanizedDate.replace(nominativeDay, inflectDayDict[nominativeDay]);
  }

  return humanizedDate;
}

exports.humanizeUpcomingDate = humanizeUpcomingDate;

function getImageDimensions(_x) {
  return _getImageDimensions.apply(this, arguments);
}

function _getImageDimensions() {
  _getImageDimensions = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(imageUrl) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve) {
              var image = new Image();

              image.onload = function () {
                resolve({
                  width: image.width,
                  height: image.height
                });
              };

              image.onerror = function () {
                resolve({
                  width: 0,
                  height: 0
                });
              };

              image.src = imageUrl;
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getImageDimensions.apply(this, arguments);
}

exports.getImageDimensions = getImageDimensions;

function scrollToElement(element) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
  var isSmooth = options.isSmooth,
      position = options.position;

  if (element && element.tagName) {
    element.scrollIntoView({
      behavior: isSmooth ? 'smooth' : 'auto',
      block: position || 'center'
    });

    if (typeof IntersectionObserver !== 'undefined') {
      var intersectionObserver = new IntersectionObserver(function (entries) {
        if (entries[0].isIntersecting) {
          intersectionObserver.unobserve(element);
          callback();
        }
      });
      intersectionObserver.observe(element);
    } else {
      setTimeout(function () {
        callback && callback();
      }, 300); // default callback timeout for browsers not supporting IntersectionObserver
    }
  }
}

exports.scrollToElement = scrollToElement;

function generateCustomerSupportSenderName(message, widgetTitle) {
  var _ref = message.sender || {},
      firstName = _ref.firstName,
      lastName = _ref.lastName;

  if (firstName || lastName) {
    return [firstName, lastName].join(' ');
  } else {
    return widgetTitle;
  }
}

exports.generateCustomerSupportSenderName = generateCustomerSupportSenderName;

function generateReplyMessageQuote(messageToReplyTo, widgetTitle) {
  var _ref2 = messageToReplyTo || {},
      _ref2$sender = _ref2.sender,
      sender = _ref2$sender === void 0 ? {} : _ref2$sender,
      _ref2$text = _ref2.text,
      text = _ref2$text === void 0 ? '' : _ref2$text;

  var firstName = sender.firstName,
      lastName = sender.lastName;

  if (text) {
    return text.substr(0, 100);
  } else if (!sender.isOperator) {
    return [firstName, lastName].join(' ');
  } else {
    return generateCustomerSupportSenderName(messageToReplyTo, widgetTitle);
  }
}

exports.generateReplyMessageQuote = generateReplyMessageQuote;

function replaceMarkdownWithHTML(markdown) {
  markdown = '\n\n' + (markdown || '') + '\n\n';
  var allExtractedHtml = [];

  var handleHtmlReplacement = function handleHtmlReplacement(match) {
    allExtractedHtml.push(match);
    var currentHtmlIndex = allExtractedHtml.length - 1;
    return "\u25C6\u25C6\u25C6".concat(currentHtmlIndex, "\u25C6\u25C6\u25C6");
  };

  return markdown // Temporarily replace all HTML (e.g. links) with placeholders surrounded by '◆◆◆'
  .replace(/<[a-z]+[^>]*>[^<]*<\/[a-z]+>/igm, function (match) {
    return handleHtmlReplacement(match);
  }) // Font formatting <b> & <i>
  .replace(/_(?=[^ ])([^_\n]+)(?=[^ ])_/igm, '<i>$1</i>').replace(/\*(?=[^ ])([^\*\n]+)(?=[^ ])\*/igm, '<b>$1</b>') // <ul> / <ol> - replacing leading spaces before list items
  .replace(/\n\s*\*/gm, '\n*').replace(/\n\s*(\d)\./gm, '\n$1.') // Unordered list <ul>
  .replace(/^\*\s+([^\n]+)\n/gm, '<li>$1</li>').replace(/([^>])<li>/gm, '$1<ul><li>').replace(/<\/li>([^<])/gm, '</li></ul>$1') // Ordered list <ol>
  .replace(/^\d+\.\s+([^\n]+)\n/gm, '<li>$1</li>').replace(/([^>])<li>/gm, '$1<ol><li>').replace(/<\/li>([^<])/gm, '</li></ol>$1') // Paragraph <p>
  .replace(/^\s*(\n)?(.+)/igm, function (match) {
    return /<(\/)?(ul|ol|li|a)/.test(match) ? match : "<p>\n ".concat(match.trim(), " \n</p>");
  }) // Put back <a href...> HTML (that was extracted on the first step)
  .replace(/◆◆◆([0-9]+)◆◆◆/igm, function (match, index) {
    return allExtractedHtml[+index];
  }).trim();
}

exports.replaceMarkdownWithHTML = replaceMarkdownWithHTML;

function replaceLinksInText(text) {
  text = ' ' + (text || '') + ' '; // For all existing non-country domain zones, see https://gist.github.com/egorvinogradov/d7d946a06e680d79723f12f4a1c697a7#file-all-non-country-domains-txt

  var top50NonCountryDomains = ['com', 'org', 'net', 'info', 'xyz', 'biz', 'club', 'online', 'pro', 'site', 'top', 'edu', 'shop', 'live', 'cat', 'gov', 'blog', 'asia', 'store', 'mobi', 'space', 'tech', 'website', 'app', 'news', 'life', 'fun', 'world', 'icu', 'vip', 'today', 'work', 'tokyo', 'media', 'one', 'travel', 'agency', 'guru', 'cloud', 'name', 'coop', 'xxx', 'design', 'win', 'global', 'link', 'nyc', 'digital', 'network', 'studio', 'chat'];
  var topTwoLetterFileExtensions = ['js', 'db', 'cs', 'rm'];
  var allExtractedUrls = [];
  var fullUrlRe = /\b_?(?:https?|ftp):\/\/[a-z0-9\-\.]+\.([a-z]{2,10})(?::[0-9]{4,5})?(?:\/[a-zа-я0-9\-_\/\.?&%=#+;:,!~]*)?_?/igm;
  var localhostRe = /\b_?(?:http):\/\/([a-z0-9\-]+)(?::[0-9]{4,5})?(?:\/[a-zа-я0-9\-_\/\.?&%=#+;:,!~]*)?_?/igm;
  var ipAddressRe = /\b_?(?:https?):\/\/((?:[0-9]{1,3}\.?){4})(?::[0-9]{4,5})?(?:\/[a-zа-я0-9\-_\/\.?&%=#+;:,!~]*)?_?/igm;
  var countryDomainRe = /\b_?[a-z0-9\-\.]+\.([a-z]{2})(?::[0-9]{4,5})?(?:\/[a-zа-я0-9\-_\/\.?&%=#+;:,!~]*)?(?![a-z])_?/igm;
  var nonCountryDomainRe = /\b_?[a-z0-9\-\.]+\.([a-z]{3,10})(?::[0-9]{4,5})?(?:\/[a-zа-я0-9\-_\/\.?&%=#+;:,!~]*)?_?/igm;
  var emailAddressRe = /\b_?[a-z0-9\.\-_+]+@[a-z0-9\.\-]+_?/igm;

  var handleLinkReplacement = function handleLinkReplacement(match, offset) {
    var urlPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var isWrappedWithUnderscore = false;

    if (match[0] === '_' && match[match.length - 1] === '_') {
      isWrappedWithUnderscore = true;
      match = match.replace(/^_/, '').replace(/_$/, '');
    }

    var _match$replace$split = match.replace(/(&quot;|&lt;|&gt;)/, '◆◆◆$1').split('◆◆◆'),
        _match$replace$split2 = _slicedToArray(_match$replace$split, 2),
        urlWithoutTrailingHtmlEntities = _match$replace$split2[0],
        _match$replace$split3 = _match$replace$split2[1],
        trailingHtmlEntities = _match$replace$split3 === void 0 ? '' : _match$replace$split3;

    var _urlWithoutTrailingHt = urlWithoutTrailingHtmlEntities.replace(/([^a-zа-я0-9\-_\/=]+)$/ig, '◆◆◆$1').split('◆◆◆'),
        _urlWithoutTrailingHt2 = _slicedToArray(_urlWithoutTrailingHt, 2),
        urlWithoutTrailingSymbols = _urlWithoutTrailingHt2[0],
        _urlWithoutTrailingHt3 = _urlWithoutTrailingHt2[1],
        trailingSymbols = _urlWithoutTrailingHt3 === void 0 ? '' : _urlWithoutTrailingHt3;

    allExtractedUrls.push(urlWithoutTrailingSymbols);
    var urlIndex = allExtractedUrls.length - 1; // Temporarily replace all URLs with placeholders surrounded by '◆◆◆'

    return (isWrappedWithUnderscore ? '_' : '') + "\u25C6\u25C6\u25C6".concat(urlIndex, "|").concat(urlPrefix, "\u25C6\u25C6\u25C6") + trailingSymbols + trailingHtmlEntities + (isWrappedWithUnderscore ? '_' : '');
  };

  return text.replace(fullUrlRe, function (match, topLevelDomain, offset) {
    return handleLinkReplacement(match, offset);
  }).replace(ipAddressRe, function (match, topLevelDomain, offset) {
    return handleLinkReplacement(match, offset);
  }).replace(localhostRe, function (match, topLevelDomain, offset) {
    return handleLinkReplacement(match, offset);
  }).replace(emailAddressRe, function (match, topLevelDomain, offset) {
    return handleLinkReplacement(match, offset, 'mailto:');
  }).replace(nonCountryDomainRe, function (match, topLevelDomain, offset) {
    return top50NonCountryDomains.includes(topLevelDomain.toLowerCase()) ? handleLinkReplacement(match, offset, 'http://') : match;
  }).replace(countryDomainRe, function (match, topLevelDomain, offset) {
    return !topTwoLetterFileExtensions.includes(topLevelDomain.toLowerCase()) ? handleLinkReplacement(match, offset, 'http://') : match;
  }) // Put back URLs (that was extracted on the first step)
  .replace(/◆◆◆([0-9]+)\|([^◆]*)◆◆◆/igm, function (match, index, urlPrefix) {
    var currentUrl = allExtractedUrls[+index];
    return "<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"".concat(urlPrefix).concat(currentUrl, "\">").concat(currentUrl, "</a>");
  }).trim();
}

exports.replaceLinksInText = replaceLinksInText;

function sanitizeHTML(html) {
  html = html || '';
  return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/"/gm, '&quot;').replace(/'/gm, '&apos;');
}

exports.sanitizeHTML = sanitizeHTML;

function fitDimensionsIntoLimits(originalWidth, originalHeight, limitWidth, limitHeight) {
  limitWidth = limitWidth || Infinity;
  limitHeight = limitHeight || Infinity;
  var originalRatio = originalWidth / originalHeight;
  var newWidth = Math.min(originalWidth, limitWidth, limitHeight * originalRatio);
  var newHeight = newWidth / originalRatio;
  return [utilsCommon_1._round(newWidth), utilsCommon_1._round(newHeight)];
}

exports.fitDimensionsIntoLimits = fitDimensionsIntoLimits;

function isWithinElement(target, container) {
  if (typeof container === 'string') {
    return Boolean(target.closest('.' + container));
  } else if (container instanceof HTMLElement) {
    return container.contains(target) || target === container;
  }

  return false;
}

exports.isWithinElement = isWithinElement; // TODO: detect mobile platforms/OS rather than screen size

function isMobileSizeScreen() {
  return window.innerWidth < 480; // equals to $mobile-max-size from Widget.scss
}

exports.isMobileSizeScreen = isMobileSizeScreen;

function exposeComponentToGlobalScope(name, instance, elixirChatWidget) {
  // Can't simply use instance.constructor.name for the name due to bundler obfuscation; must pass name explicitly
  elixirChatWidget.widgetComponents[name] = instance;
}

exports.exposeComponentToGlobalScope = exposeComponentToGlobalScope;
},{"./utilsCommon":"EjGt","./widget/DefaultWidget/assets":"H1kZ","dayjs":"dZYI","dayjs/plugin/calendar":"B5kD","dayjs/locale/ru":"ZQMA"}],"Pqo8":[function(require,module,exports) {
"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n      mutation($companyId: Uuid!, $room: ForeignRoom, $client: ForeignClient!) {\n        joinRoom (companyId: $companyId, room: $room, client: $client) {\n          token\n          company {\n            isWorking\n            workHoursStartAt\n            widgetTitle\n            employees(first: 20) {\n              count\n              edges {\n                node { ...fragmentUser }\n              }\n            }\n          }\n          client {\n            ...fragmentUser\n            omnichannelCode\n          }\n          room {\n            id\n            title\n            foreignId\n            mustOpenWidget\n            unreadMessagesCount\n            unreadRepliesCount\n          }\n        }\n      }\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElixirChat = void 0;

var unique_names_generator_1 = require("unique-names-generator");

var utilsCommon_1 = require("../utilsCommon");

var serializeUser_1 = require("./serializers/serializeUser");

var Logger_1 = require("./Logger");

var ScreenshotTaker_1 = require("./ScreenshotTaker");

var TypingStatusSubscription_1 = require("./TypingStatusSubscription");

var UpdateMessageSubscription_1 = require("./UpdateMessageSubscription");

var OnlineStatusSubscription_1 = require("./OnlineStatusSubscription");

var UnreadMessagesCounter_1 = require("./UnreadMessagesCounter");

var MessageSubscription_1 = require("./MessageSubscription");

var GraphQLClient_1 = require("./GraphQLClient");

var GraphQLClientSocket_1 = require("./GraphQLClientSocket");

var ElixirChatEventTypes_1 = require("./ElixirChatEventTypes");

var utilsWidget_1 = require("../utilsWidget");

var ElixirChat =
/*#__PURE__*/
function () {
  function ElixirChat(config) {
    var _this = this;

    _classCallCheck(this, ElixirChat);

    this.version = "4.0.2.omnichannel@1";
    this.config = {};
    this.joinRoomData = {};
    this.isInitialized = false;
    this.eventHandlers = {};

    this.triggerEvent = function (eventName, data, options) {
      var _a;

      options = options || {};

      _this.logEvent(eventName, data);

      if (!((_a = _this.eventHandlers[eventName]) === null || _a === void 0 ? void 0 : _a.callbacks)) {
        _this.eventHandlers[eventName] = {
          callbacks: []
        };
      }

      var eventHandler = _this.eventHandlers[eventName];
      eventHandler.firedOnce = options.firedOnce;
      eventHandler.firedOnceArguments = data;
      eventHandler.callbacks.forEach(function (callback) {
        return callback(data);
      });
    };

    this.on = function (eventName, callback) {
      var _a;

      if (eventName instanceof Array) {
        eventName.map(function (singleEventName) {
          return _this.on(singleEventName, callback);
        });
      } else {
        if (!((_a = _this.eventHandlers[eventName]) === null || _a === void 0 ? void 0 : _a.callbacks)) {
          _this.eventHandlers[eventName] = {
            callbacks: []
          };
        }

        var eventHandler = _this.eventHandlers[eventName];
        eventHandler.callbacks.push(callback);

        if (eventHandler.firedOnce) {
          callback(eventHandler.firedOnceArguments);
        }
      }
    };

    this.off = function (eventName, callback) {
      var _a;

      var eventHandler = _this.eventHandlers[eventName];

      if ((_a = eventHandler.callbacks) === null || _a === void 0 ? void 0 : _a.length) {
        eventHandler.callbacks = eventHandler.callbacks.filter(function (currentCallback) {
          return currentCallback !== callback;
        });
      }
    };

    this.sendMessage = function (params) {
      return _this.checkIfConnected().then(function () {
        _this.typingStatusSubscription.dispatchTypedText(false);

        return _this.messageSubscription.sendMessage(params);
      });
    };

    this.retrySendMessage = function (message) {
      return _this.checkIfConnected().then(function () {
        return _this.messageSubscription.retrySendMessage(message);
      });
    };

    this.fetchMessageHistory = function (limit) {
      return _this.checkIfConnected().then(function () {
        return _this.messageSubscription.fetchMessageHistory(limit);
      });
    };

    this.fetchPrecedingMessageHistory = function (limit) {
      return _this.checkIfConnected().then(function () {
        return _this.messageSubscription.fetchPrecedingMessageHistory(limit);
      });
    };

    this.dispatchTypedText = function (typedText) {
      return _this.checkIfConnected().then(function () {
        return _this.typingStatusSubscription.dispatchTypedText(typedText);
      });
    };

    this.setLastReadMessage = function (messageId) {
      return _this.checkIfConnected().then(function () {
        return _this.unreadMessagesCounter.setLastReadMessage(messageId);
      });
    };

    this.takeScreenshot = function () {
      return _this.screenshotTaker.takeScreenshot();
    };

    this.logEvent = function (text, data) {
      return _this.logger.logEvent(text, data);
    };

    this.logInfo = function (text, data) {
      return _this.logger.logInfo(text, data);
    };

    this.logError = function (text, data) {
      return _this.logger.logError(text, data);
    };

    this.sendAPIRequest = function (query, variables, binaries) {
      var graphQLMethod = GraphQLClient_1.parseGraphQLMethodFromQuery(query);
      return _this.graphQLClient.query(query, variables, binaries).then(function (data) {
        return data[graphQLMethod];
      }).catch(function (rawError) {
        var _a, _b;

        var errorMessage = "".concat(graphQLMethod, ": ").concat(GraphQLClient_1.getErrorMessageFromResponse(rawError));
        var errorType = ((_b = (_a = rawError === null || rawError === void 0 ? void 0 : rawError.errors) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.reason) || null;
        var additionalErrorData = {
          errorMessage: errorMessage,
          errorType: errorType,
          rawError: rawError,
          query: query,
          variables: variables,
          graphQLMethod: graphQLMethod
        };

        _this.logError(errorMessage, additionalErrorData);

        throw Object.assign({
          errorMessage: errorMessage
        }, additionalErrorData);
      });
    };

    this.disconnect = function () {
      return _this.checkIfConnected().then(function () {
        _this.logInfo('Disconnecting from ElixirChat');

        _this.isConnected = false;

        _this.messageSubscription.unsubscribe();

        _this.updateMessageSubscription.unsubscribe();

        _this.unreadMessagesCounter.unsubscribe();

        _this.typingStatusSubscription.unsubscribe();

        _this.onlineStatusSubscription.unsubscribe();
      }); // TODO: remove firedOnce params? use .off()?
      // TODO: remove eventHandlers?
    };

    this.reconnect = function (config) {
      _this.logInfo('Attempting to reconnect to another room', config);

      _this.disconnect();

      return _this.joinRoom(config.room, config.client);
    };

    if (this.hasAllRequiredConfigParameters(config)) {
      this.initialize(config);
    }

    if (typeof window !== 'undefined') {
      window.elixirChat = this;
    }
  }

  _createClass(ElixirChat, [{
    key: "hasAllRequiredConfigParameters",
    value: function hasAllRequiredConfigParameters(config) {
      var requiredParams = ['apiUrl', 'socketUrl', 'companyId'];
      var missingRequiredParams = requiredParams.filter(function (paramKey) {
        return !config[paramKey];
      });

      if (missingRequiredParams.length) {
        throw "Required parameters: ".concat(missingRequiredParams.join(', '), " not provided. \nSee more: https://github.com/elixirchat/elixirchat-js-sdk#config");
      } else {
        return true;
      }
    }
  }, {
    key: "initialize",
    value: function initialize(config) {
      var _this2 = this;

      this.config = config || {};
      this.isInitialized = true;
      this.graphQLClient = new GraphQLClient_1.GraphQLClient();
      this.graphQLClientSocket = new GraphQLClientSocket_1.GraphQLClientSocket();
      this.logger = new Logger_1.Logger({
        elixirChat: this
      });
      this.screenshotTaker = new ScreenshotTaker_1.ScreenshotTaker({
        elixirChat: this
      });
      this.messageSubscription = new MessageSubscription_1.MessageSubscription({
        elixirChat: this
      });
      this.unreadMessagesCounter = new UnreadMessagesCounter_1.UnreadMessagesCounter({
        elixirChat: this
      });
      this.updateMessageSubscription = new UpdateMessageSubscription_1.UpdateMessageSubscription({
        elixirChat: this
      });
      this.typingStatusSubscription = new TypingStatusSubscription_1.TypingStatusSubscription({
        elixirChat: this
      });
      this.onlineStatusSubscription = new OnlineStatusSubscription_1.OnlineStatusSubscription({
        elixirChat: this
      });
      this.on(ElixirChatEventTypes_1.UPDATE_MESSAGES_CHANGE, function (updatedMessage) {
        _this2.messageSubscription.changeMessageBy({
          id: updatedMessage.id
        }, updatedMessage);
      });
      this.on(ElixirChatEventTypes_1.LAST_READ_MESSAGE_CHANGE, function (lastReadMessageId) {
        _this2.messageSubscription.markPrecedingMessagesRead(lastReadMessageId);
      });
      this.logInfo('Initializing ElixirChat', config);
      return this.joinRoom();
    }
  }, {
    key: "serializeClient",
    value: function serializeClient(rawClient) {
      rawClient = rawClient || {};
      var localStorageClient = utilsCommon_1.getJSONFromLocalStorage('elixirchat-client') || {};
      var anonymousClientData = this.generateAnonymousClientData();
      var clientId = rawClient.id || localStorageClient.id || anonymousClientData.id;
      var clientFirstName = typeof rawClient.firstName === 'string' ? rawClient.firstName : localStorageClient.firstName || anonymousClientData.firstName;
      var clientLastName = typeof rawClient.lastName === 'string' ? rawClient.lastName : localStorageClient.lastName || anonymousClientData.lastName;

      if (!clientFirstName && !clientLastName) {
        clientFirstName = localStorageClient.firstName || anonymousClientData.firstName;
        clientLastName = localStorageClient.lastName || anonymousClientData.lastName;
      }

      return {
        id: clientId.toString(),
        firstName: clientFirstName,
        lastName: clientLastName
      };
    }
  }, {
    key: "serializeRoom",
    value: function serializeRoom(rawRoom, client) {
      rawRoom = rawRoom || {};
      var localStorageRoom = utilsCommon_1.getJSONFromLocalStorage('elixirchat-room') || {};
      var roomId = rawRoom.id || localStorageRoom.id || client.id;
      var roomTitle = rawRoom.title || localStorageRoom.title || client.firstName + ' ' + client.lastName;
      var roomDataObj = {};

      if (_typeof(rawRoom.data) === 'object') {
        for (var key in rawRoom.data) {
          roomDataObj[key] = rawRoom.data[key].toString();
        }
      }

      return {
        id: roomId.toString(),
        title: roomTitle,
        data: JSON.stringify(roomDataObj)
      };
    }
  }, {
    key: "generateAnonymousClientData",
    value: function generateAnonymousClientData() {
      var baseTitle = unique_names_generator_1.uniqueNamesGenerator({
        length: 2,
        separator: ' ',
        dictionaries: null
      });

      var _baseTitle$split$map = baseTitle.split(' ').map(utilsCommon_1.capitalize),
          _baseTitle$split$map2 = _slicedToArray(_baseTitle$split$map, 2),
          firstName = _baseTitle$split$map2[0],
          lastName = _baseTitle$split$map2[1];

      var randomFourDigitPostfix = utilsCommon_1.randomDigitStringId(4);
      var uniqueId = baseTitle.replace(' ', '-') + '-' + randomFourDigitPostfix;
      return {
        id: uniqueId,
        firstName: firstName,
        lastName: lastName
      };
    }
  }, {
    key: "joinRoom",
    value: function joinRoom(room, client) {
      var _this3 = this;

      this.client = this.serializeClient(client);
      this.room = this.serializeRoom(room, this.client);
      this.isPrivateRoom = this.room.id === this.client.id;
      utilsCommon_1.setToLocalStorage('elixirchat-room', this.room);
      utilsCommon_1.setToLocalStorage('elixirchat-client', this.client);
      var variables = {
        companyId: this.config.companyId,
        client: this.client,
        room: this.room
      }; // TODO: support company.logoUrl on backend
      // TODO: support company.widgetChatSubtitle on backend
      // TODO: support company.channels on backend

      var query = GraphQLClient_1.insertGraphQlFragments(GraphQLClient_1.gql(_templateObject()), {
        fragmentUser: serializeUser_1.fragmentUser
      });
      var publicGraphQLClient = new GraphQLClient_1.GraphQLClient();
      publicGraphQLClient.initialize({
        url: this.config.apiUrl
      });
      return publicGraphQLClient.query(query, variables).then(function (response) {
        if (response === null || response === void 0 ? void 0 : response.joinRoom) {
          var joinRoomData = _this3.serializeJoinRoomData(response.joinRoom);

          _this3.joinRoomData = joinRoomData;

          _this3.onJoinRoomSuccess(joinRoomData);

          _this3.triggerEvent(ElixirChatEventTypes_1.JOIN_ROOM_SUCCESS, joinRoomData, {
            firedOnce: true
          });

          return joinRoomData;
        } else {
          _this3.triggerEvent(ElixirChatEventTypes_1.JOIN_ROOM_ERROR, response);

          throw response;
        }
      }).catch(function (response) {
        _this3.triggerEvent(ElixirChatEventTypes_1.JOIN_ROOM_ERROR, response);

        throw response;
      });
    }
  }, {
    key: "onJoinRoomSuccess",
    value: function onJoinRoomSuccess(joinRoomData) {
      var _this$config = this.config,
          apiUrl = _this$config.apiUrl,
          socketUrl = _this$config.socketUrl;
      var token = joinRoomData.token,
          isOnline = joinRoomData.isOnline,
          workHoursStartAt = joinRoomData.workHoursStartAt,
          unreadMessagesCount = joinRoomData.unreadMessagesCount,
          unreadRepliesCount = joinRoomData.unreadRepliesCount;
      this.logInfo('Joined room', joinRoomData);
      this.isConnected = true;
      this.graphQLClient.initialize({
        url: apiUrl,
        token: token
      });
      this.graphQLClientSocket.initialize({
        url: socketUrl,
        token: token
      });
      this.messageSubscription.subscribe();
      this.updateMessageSubscription.subscribe();
      this.onlineStatusSubscription.subscribe({
        isOnline: isOnline,
        workHoursStartAt: workHoursStartAt
      });
      this.unreadMessagesCounter.subscribe({
        unreadMessagesCount: unreadMessagesCount,
        unreadRepliesCount: unreadRepliesCount
      }); // TODO: fix params
      // this.typingStatusSubscription.subscribe(); // TODO: fix
    }
  }, {
    key: "serializeJoinRoomData",
    value: function serializeJoinRoomData(data) {
      var _this4 = this;

      var _a;

      var token = data.token,
          _data$room = data.room,
          room = _data$room === void 0 ? {} : _data$room,
          _data$client = data.client,
          client = _data$client === void 0 ? {} : _data$client,
          _data$company = data.company,
          company = _data$company === void 0 ? {} : _data$company;
      return {
        token: token,
        logoUrl: company.logoUrl,
        mainTitle: company.widgetTitle,
        chatSubtitle: company.widgetChatSubtitle,
        channels: this.serializeChannels(company.channels, client.omnichannelCode),
        employeesCount: ((_a = company.employees) === null || _a === void 0 ? void 0 : _a.count) || 0,
        employees: GraphQLClient_1.simplifyGraphQLJSON(company === null || company === void 0 ? void 0 : company.employees).map(function (employee) {
          return serializeUser_1.serializeUser(employee, _this4);
        }),
        isOnline: company.isWorking,
        isPopupOpen: room.mustOpenWidget,
        workHoursStartAt: company.workHoursStartAt,
        elixirChatClientId: client.id,
        elixirChatRoomId: room.id,
        unreadMessagesCount: room.unreadMessagesCount,
        unreadRepliesCount: room.unreadRepliesCount,
        omnichannelCode: client.omnichannelCode
      };
    }
  }, {
    key: "serializeChannels",
    value: function serializeChannels(channels, omnichannelCode) {
      // TODO: remove mock when backend is finished
      channels = [{
        type: 'whatsapp',
        username: '917290961818'
      }, {
        type: 'telegram',
        username: 'elixirchat_test_bot'
      }, {
        type: 'vkontakte',
        username: 'club198196792'
      }, {
        type: 'skype',
        username: '3997ce68-a731-4a63-a884-136268979b3d'
      }, {
        type: 'viber',
        username: 'chathelpdesk'
      }, {
        type: 'facebook',
        username: 'huntflow'
      }];
      var isMobile = utilsWidget_1.isMobileSizeScreen();
      var manualMessageMask = "\u0427\u0442\u043E\u0431\u044B \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C, \u043F\u0440\u043E\u0441\u0442\u043E \u043E\u0442\u043F\u0440\u0430\u0432\u044C\u0442\u0435 \u0446\u0435\u043B\u0438\u043A\u043E\u043C \u044D\u0442\u043E \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435. \u0412\u0430\u0448 \u043A\u043E\u0434: ".concat(omnichannelCode);
      var desktopUrlMasks = {
        whatsapp: 'https://web.whatsapp.com/send?phone={{ username }}&text={{ manualMessage }}',
        telegram: 'http://t.me/{{ username }}?start={{ omnichannelCode }}',
        skype: 'https://join.skype.com/bot/{{ username }}',
        viber: 'viber://pa?chatURI={{ username }}&context={{ omnichannelCode }}',
        facebook: 'https://m.me/{{ username }}?ref={{ omnichannelCode }}',
        vkontakte: 'https://vk.me/{{ username }}?ref={{ omnichannelCode }}'
      };
      var mobileUrlMasks = {
        whatsapp: 'whatsapp://send?phone={{ username }}&text={{ manualMessage }}',
        telegram: 'tg://resolve?domain={{ username }}&start={{ omnichannelCode }}',
        skype: 'skype:28:{{ username }}?chat',
        viber: 'viber://pa?chatURI={{ username }}&context={{ omnichannelCode }}'
      };
      return (channels || []).map(function (channel) {
        var username = channel.username;
        var type = channel.type.toLowerCase();
        var urlMask = isMobile ? mobileUrlMasks[type] : desktopUrlMasks[type];
        var url = utilsCommon_1.template(urlMask, {
          username: username,
          omnichannelCode: omnichannelCode,
          manualMessage: manualMessageMask
        });
        return {
          type: type,
          username: username,
          omnichannelCode: omnichannelCode,
          url: url
        };
      });
    }
  }, {
    key: "checkIfConnected",
    value: function checkIfConnected() {
      if (this.isConnected) {
        return Promise.resolve();
      } else {
        var message = 'ElixirChat is not currently connected. Use reconnect({ room, client }) method to connect to a room.';
        this.logError(message);
        return Promise.reject({
          message: message
        });
      }
    }
  }, {
    key: "onlineStatus",
    get: function get() {
      return this.onlineStatusSubscription.onlineStatus;
    }
  }, {
    key: "unreadMessagesCount",
    get: function get() {
      return this.unreadMessagesCounter.unreadMessagesCount;
    }
  }, {
    key: "unreadRepliesCount",
    get: function get() {
      return this.unreadMessagesCounter.unreadRepliesCount;
    }
  }, {
    key: "messageHistory",
    get: function get() {
      return this.messageSubscription.messageHistory;
    }
  }]);

  return ElixirChat;
}();

exports.ElixirChat = ElixirChat;

if (typeof window !== 'undefined') {
  window.ElixirChat = ElixirChat;
}
},{"unique-names-generator":"Qz33","../utilsCommon":"EjGt","./serializers/serializeUser":"lqyB","./Logger":"shls","./ScreenshotTaker":"CLsL","./TypingStatusSubscription":"QERd","./UpdateMessageSubscription":"AgKM","./OnlineStatusSubscription":"XLSb","./UnreadMessagesCounter":"xY1B","./MessageSubscription":"jRw6","./GraphQLClient":"fvSB","./GraphQLClientSocket":"P6qz","./ElixirChatEventTypes":"Cteb","../utilsWidget":"KO9y"}],"QCba":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ElixirChat_1 = require("./ElixirChat");

exports.default = ElixirChat_1.ElixirChat;
},{"./ElixirChat":"Pqo8"}]},{},["QCba"], null)