@import "./variables";

/* Applies media-queries using bootstrap-like syntax
 *
 * Examples:
 *
 *  div {
 *    @include elixir-media-query(xs,xs) {
 *      font-size: 12px // <-- only works for xs screen sizes (from 0 to 768px)
 *    }
 *  }
 *
 *  div {
 *    @include elixir-media-query(xs,md) {
 *      color: red // <-- works on screen sizes from xs to md (xs, sm, md)
 *    }
 *  }
 *
 *  div {
 *    @include elixir-media-query(md,lg) {
 *      max-width: 980px // <-- works on md and lg screen sizes
 *    }
 *  }
 *
 *  div {
 *    @include elixir-media-query(xs,md) { // <-- combining multiple conditions
 *      height: 80px
 *    }
 *    @include elixir-media-query(sm,lg) {
 *      padding-top: 0
 *    }
 *  }
 *
 *  div {
 *    @include elixir-media-query(700px,md) { // <-- also works with px values
 *      border-width: 2px
 *    }
 *    @include elixir-media-query(200px,400px) {
 *      border: none
 *    }
 *  }
 */


@mixin elixir-media-query($screen-size-from, $screen-size-to) {
  @if $screen-size-from == xl {
    @media (min-width: $grid-breakpoint-xl) {
      & {
        @content;
      }
    }
  }
  @else {
    $_from: 1px;
    $_to: 99999px;

    @if type_of($screen-size-from) == string {
      @if $screen-size-from == xs {
        $_from: 0;
      }
      @else if $screen-size-from == sm {
        $_from: $grid-breakpoint-sm;
      }
      @else if $screen-size-from == md {
        $_from: $grid-breakpoint-md;
      }
      @else if $screen-size-from == lg {
        $_from: $grid-breakpoint-lg;
      }
    }
    @else {
      $_from: $screen-size-from;
    }

    @if type_of($screen-size-to) == string {
      @if $screen-size-to == xs {
        $_to: $grid-breakpoint-sm - 1;
      }
      @else if $screen-size-to == sm {
        $_to: $grid-breakpoint-md - 1;
      }
      @else if $screen-size-to == md {
        $_to: $grid-breakpoint-lg - 1;
      }
      @else if $screen-size-from == lg {
        $_from: $grid-breakpoint-xl - 1;
      }
    }
    @else {
      $_to: $screen-size-to;
    }

    @media (min-width: $_from) and (max-width: $_to) {
      & {
        @content;
      }
    }
  }
}


@keyframes spinner {
  to {
    transform: rotate(360deg);
  }
}

@mixin elixir-animation-spinner($period) {
  animation: spinner $period linear infinite;
}
